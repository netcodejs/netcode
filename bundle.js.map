{
  "version": 3,
  "sources": ["index.ts", "../src/comp-interface.ts", "../src/builtin.ts", "../src/comp-schema.ts", "../src/array-map.ts", "../src/misc.ts", "../src/lib/crc-32/index.ts", "../src/config.ts", "../src/global-record.ts", "../src/comp-fixup.ts", "../src/comp-decorator.ts", "../src/base-dirty-data.ts", "../src/builtin-comp/time.ts", "../src/builtin-comp/role.ts", "../src/entity.ts", "../src/message-manager.ts", "../src/domain.ts", "../src/data/string-databuffer.ts", "../src/data/string-domain-option.ts", "mock-net.ts", "net-comp.ts"],
  "sourcesContent": ["import {\n    Domain,\n    Entity,\n    Rpc,\n    RpcType,\n    StringDataBuffer,\n    StringDomainOption,\n} from \"../src\";\nimport { Net } from \"./mock-net\";\nimport { Controller, Transform, Vector, View } from \"./net-comp\";\nexport * from \"./net-comp\";\nexport * from \"./mock-net\";\n\nconst COLOR_YELLOW = 0xf7d94c;\nconst COLOR_WHITE = 0xf8c3cd;\nconst CONTROLLER_MAP = {\n    1: { left: \"a\", right: \"d\" },\n    2: { left: \"ArrowLeft\", right: \"ArrowRight\" },\n} as any;\nexport abstract class Base {\n    readonly domain: Domain;\n    protected ctx: CanvasRenderingContext2D;\n    bg = \"#947A6D\";\n    myLoop: FrameRequestCallback;\n\n    isPrediction = false;\n    isInterpolation = false;\n    isRollback = false;\n\n    lastTimeStamp = 0;\n    actorArr: Entity[] = [];\n\n    constructor(\n        name: string,\n        readonly canvas: HTMLCanvasElement,\n        rpcType: RpcType\n    ) {\n        this.domain = Domain.Create(name, new StringDomainOption(rpcType));\n        this.ctx = canvas.getContext(\"2d\")!;\n        this.canvas.width = 950;\n        this.canvas.height = 70;\n        this.ctx.fillStyle = this.bg;\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        this.myLoop = this.loop.bind(this);\n        this.initScene();\n        this.loop(0);\n    }\n\n    loop(timestamp: number) {\n        const dt = this.lastTimeStamp == 0 ? 0 : timestamp - this.lastTimeStamp;\n        this.lastTimeStamp = timestamp;\n        this.renderBg();\n        this.domain.update(dt / 1000);\n    }\n\n    initScene() {\n        const v1 = new View();\n        v1.bindCanvas(this.ctx);\n        const t1 = new Transform();\n        t1.pos.x = 30;\n        t1.pos.y = 35;\n        const c1 = new Entity(v1, t1, new Controller());\n\n        const v2 = new View();\n        v2.bindCanvas(this.ctx);\n        const t2 = new Transform();\n        t2.pos.x = 50;\n        t2.pos.y = 35;\n        const c2 = new Entity(v2, t2, new Controller());\n\n        this.domain.reg(c1);\n        this.domain.reg(c2);\n\n        v1.changeColor(COLOR_YELLOW);\n        v2.changeColor(COLOR_WHITE);\n\n        this.actorArr.push(c1, c2);\n    }\n\n    renderBg() {\n        this.canvas.width = this.canvas.width;\n        const ctx = this.ctx;\n\n        ctx.fillStyle = this.bg;\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    receive(data: any) {\n        if (this.isPrediction) return;\n        this.domain.setData(data);\n    }\n}\n\nexport class Server extends Base {\n    sendAccumulator = 0;\n    constructor(readonly canvas: HTMLCanvasElement) {\n        super(\"server\", canvas, RpcType.SERVER);\n    }\n\n    loop(dt: number) {\n        super.loop(dt);\n        this.sendAccumulator += this.domain.renderTime.delta;\n        if (this.sendAccumulator >= 1 / 20) {\n            const outData = this.domain.asData();\n            Net.send(outData).c1();\n            Net.send(outData).c2();\n            this.sendAccumulator = 0;\n        }\n    }\n}\n\nexport class Client extends Base {\n    constructor(readonly index: number, readonly canvas: HTMLCanvasElement) {\n        super(\"client\" + index, canvas, RpcType.CLIENT);\n        this.actorArr[index - 1]\n            .get(Controller)\n            ?.setEnable(true, CONTROLLER_MAP[index]);\n    }\n\n    loop(dt: number) {\n        super.loop(dt);\n        const outData = this.domain.asData();\n        Net.send(outData).server();\n    }\n}\n", "import { Entity } from \"./entity\";\n\nexport abstract class IComp {\n    private _entity?: Entity | null;\n    get entity() {\n        return this._entity!;\n    }\n    get domain() {\n        return this._entity!.domain;\n    }\n    get $comps() {\n        return this._entity!.$comps;\n    }\n\n    get<T extends IComp>(ctr: { new (): T }): T | null {\n        return this._entity!.get(ctr);\n    }\n\n    init?(compIdx: number): void;\n    renderUpdate?(compIdx: number): void;\n    logicUpdate?(compIdx: number): void;\n    destroy?(compIdx: number): void;\n}\n", "export const NULL_NUM = -1;\nexport const NULL_STR = \"\";\nexport const NONE_CONTAINER = 0;\nexport const ARR_CONTAINER = 1;\nexport const NULL_FUNC = () => {};\nexport const RPC_MAX_UUID = (1 << 8) - 1;\n", "import { NULL_NUM, NULL_STR } from \"./builtin\";\n\nexport interface PropSchema {\n    paramIndex: number;\n    propertyKey: string;\n    type: NetFiledType;\n}\n\nexport interface Schema {\n    name: string;\n    hash: number;\n    count: number;\n    props: Record<string, PropSchema>;\n    methods: Record<string, MethodSchema>;\n    raw: PropSchema[];\n}\n\nexport interface NetFiledType {\n    container: number;\n    dataType: DataType;\n    refCtr?: { new (): any };\n}\n\nexport interface MethodSchema {\n    name: string;\n    hash: number;\n    paramTypes: DataType[];\n    paramCount: number;\n    returnType: DataType;\n    returnRefCtr?: any;\n    type: Role;\n}\n\nexport enum RpcType {\n    SERVER,\n    CLIENT,\n}\n\nexport enum Role {\n    AUTHORITY = 1,\n    SIMULATED_PROXY,\n    AUTONMOUS_PROXY,\n}\n\n// prettier-ignore\nexport enum DataType {\n    NONE, I8 = 1, U8, I16, U16, I32, U32, F32, F64,\n    SHORT, ushort, INT, uint, LONG, ulong, FLOAT, DOUBLE, STRING, BOOL\n}\nexport const DataTypeObect = 99 as DataType;\nexport const DataTypeVoid = 98 as DataType;\n\nexport type ComponentConstructor<T = any> = { new (): T } & {\n    __schema__: Schema;\n};\n\nexport function genSchema(o = Object.create(null)): Schema {\n    o.hash = NULL_NUM;\n    o.name = NULL_STR;\n    o.count = 0;\n    o.props = Object.create(null);\n    o.methods = Object.create(null);\n    o.raw = [];\n    return o;\n}\n\nexport function genMethodSchema(o = Object.create(null)): MethodSchema {\n    o.hash = NULL_NUM;\n    o.name = NULL_STR;\n    o.paramCount = 0;\n    o.paramTypes = [];\n    o.returnType = DataTypeVoid;\n    o.type = -1;\n    return o;\n}\n\nexport const SCHEME_KEY = \"__schema__\";\nexport type ISchema = { [SCHEME_KEY]: Schema };\n\nexport function getSchemaByPrototype(prototype: any): Schema | null {\n    if (prototype.hasOwnProperty(SCHEME_KEY)) {\n        return (prototype as any)[SCHEME_KEY];\n    }\n    return null;\n}\n\nexport function getOrCreateScheme(prototype: any): Schema {\n    if (prototype.hasOwnProperty(SCHEME_KEY)) {\n        return (prototype as any)[SCHEME_KEY];\n    }\n\n    const s = genSchema() as Schema;\n    (prototype as any)[SCHEME_KEY] = s;\n    const superCtr = Object.getPrototypeOf(prototype);\n\n    const superSchema = superCtr[SCHEME_KEY] as Schema;\n    if (superSchema) {\n        s.raw.push.apply(s.raw, superSchema.raw);\n    }\n    return s;\n}\n", "export class ArrayMap<k extends string | number, v> {\n    private _name2indexRecord: Record<k, number>;\n    private _values: (v | null)[];\n\n    constructor(source?: [k, v][]) {\n        this._name2indexRecord = Object.create(null) as Record<k, number>;\n        this._values = [];\n        if (source != null) {\n            this._values.length = source.length;\n            for (let i = 0, len = source.length; i < len; i++) {\n                let [key, value] = source[i];\n                this._name2indexRecord[key] = i;\n                this._values[i] = value;\n            }\n        }\n    }\n\n    get(key: k): v | null {\n        const idx = this.getIndex(key);\n        if (idx > -1) {\n            return this._values[idx];\n        }\n        return null;\n    }\n\n    getIndex(key: k): number {\n        return this._name2indexRecord[key] ?? -1;\n    }\n\n    getByIndex(index: number): v | null {\n        return this._values[index];\n    }\n\n    has(key: k): boolean {\n        return (this._name2indexRecord[key] ?? -1) > -1;\n    }\n\n    set(key: k, value: v) {\n        let index = this._name2indexRecord[key];\n        if (index == null) {\n            index = this._values.length;\n            this._name2indexRecord[key] = index;\n        }\n        this._values[index] = value;\n        return index;\n    }\n\n    delete(key: k): [v | null, number] {\n        const index = this.getIndex(key);\n        if (index < 0) {\n            return [null, -1];\n        }\n        const deleted = [this._values[index], index] as [v | null, number];\n        this._values[index] = null;\n        delete this._name2indexRecord[key];\n\n        return deleted;\n    }\n\n    clear() {\n        this._name2indexRecord = Object.create(null);\n        this._values.length = 0;\n    }\n\n    get values(): v[] {\n        return Array.from(this._values) as v[];\n    }\n\n    get readonlyValues(): readonly v[] {\n        return this._values as readonly v[];\n    }\n}\n", "import { ISerable } from \"./data/serializable\";\n\nconst MAX_VERSION = (1 << 30) - 1;\nexport function composeVersion(num: number, destoryed: boolean | 0 | 1) {\n    num = num % MAX_VERSION;\n    return destoryed ? -num : num;\n}\n\nexport function decomposeVersion(version: number): [number, boolean] {\n    return [version > 0 ? version : -version, version < 0];\n}\n\nexport function isPrimitive(test: any) {\n    return test !== Object(test);\n}\n\nexport function asSerable<T extends {}>(obj: T): (ISerable & T) | null {\n    if (!obj) return null;\n    // @ts-ignore\n    return typeof obj.ser === \"function\" && typeof obj.deser === \"function\"\n        ? (obj as ISerable & T)\n        : null;\n}\n\nexport function assert(\n    b: boolean | Object | null,\n    errrorClass: new (...args: any[]) => Error\n) {\n    if (!b) {\n        throw new errrorClass();\n    }\n}\n\nexport type ProtoOf<T> = Pick<T, keyof T>;\n\nexport class Deferred<T = unknown> {\n    public promise: Promise<T>;\n\n    private fate: \"resolved\" | \"unresolved\";\n    private state: \"pending\" | \"fulfilled\" | \"rejected\";\n\n    private _resolve!: (value: T | PromiseLike<T>) => void;\n    private _reject!: (reason?: any) => void;\n    private _value: any;\n    public get value() {\n        return this._value;\n    }\n\n    constructor() {\n        this.state = \"pending\";\n        this.fate = \"unresolved\";\n        this.promise = new Promise((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n        });\n        this.promise.then(\n            (res) => {\n                this.state = \"fulfilled\";\n                this._value = res;\n            },\n            () => (this.state = \"rejected\")\n        );\n    }\n\n    resolve(value: T | PromiseLike<T>) {\n        if (this.fate === \"resolved\") {\n            throw \"Deferred cannot be resolved twice\";\n        }\n        this.fate = \"resolved\";\n        this._resolve(value);\n    }\n\n    reject(reason?: any) {\n        if (this.fate === \"resolved\") {\n            throw \"Deferred cannot be resolved twice\";\n        }\n        this.fate = \"resolved\";\n        this._reject(reason);\n    }\n\n    isResolved() {\n        return this.fate === \"resolved\";\n    }\n\n    isPending() {\n        return this.state === \"pending\";\n    }\n\n    isFulfilled() {\n        return this.state === \"fulfilled\";\n    }\n\n    isRejected() {\n        return this.state === \"rejected\";\n    }\n}\n", "/* exports.js (C) 2014-present SheetJS -- http://sheetjs.com */\n/* last edit: mooooooi<emwings@outlook.com> */\n/* see perf/exportstable.js */\n/*global Int32Array */\nfunction signed_crc_table() {\n    let c = 0,\n        table = new Array(256);\n\n    for (let n = 0; n != 256; ++n) {\n        c = n;\n        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n        table[n] = c;\n    }\n\n    return typeof Int32Array !== \"undefined\" ? new Int32Array(table) : table;\n}\n\nconst T = signed_crc_table();\nexport function bstr(bstr: string, seed = 0) {\n    let C = seed ^ -1,\n        L = bstr.length - 1;\n    for (var i = 0; i < L; ) {\n        C = (C >>> 8) ^ T[(C ^ bstr.charCodeAt(i++)) & 0xff];\n        C = (C >>> 8) ^ T[(C ^ bstr.charCodeAt(i++)) & 0xff];\n    }\n    if (i === L) C = (C >>> 8) ^ T[(C ^ bstr.charCodeAt(i)) & 0xff];\n    return C ^ -1;\n}\n\nexport function buf(buf: number[] | Uint8Array, seed: number = 0) {\n    if (buf.length > 10000) return exports_buf_8(buf, seed);\n    let C = seed ^ -1,\n        L = buf.length - 3;\n    for (var i = 0; i < L; ) {\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n    }\n    while (i < L + 3) C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n    return C ^ -1;\n}\n\nfunction exports_buf_8(buf: number[] | Uint8Array, seed: number = 0) {\n    let C = seed ^ -1,\n        L = buf.length - 7;\n    for (var i = 0; i < L; ) {\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n    }\n    while (i < L + 7) C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n    return C ^ -1;\n}\n\nexport function str(str: string, seed = 0) {\n    let C = seed ^ -1;\n    for (let i = 0, L = str.length, c, d; i < L; ) {\n        c = str.charCodeAt(i++);\n        if (c < 0x80) {\n            C = (C >>> 8) ^ T[(C ^ c) & 0xff];\n        } else if (c < 0x800) {\n            C = (C >>> 8) ^ T[(C ^ (192 | ((c >> 6) & 31))) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ (128 | (c & 63))) & 0xff];\n        } else if (c >= 0xd800 && c < 0xe000) {\n            c = (c & 1023) + 64;\n            d = str.charCodeAt(i++) & 1023;\n            C = (C >>> 8) ^ T[(C ^ (240 | ((c >> 8) & 7))) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ (128 | ((c >> 2) & 63))) & 0xff];\n            C =\n                (C >>> 8) ^\n                T[(C ^ (128 | ((d >> 6) & 15) | ((c & 3) << 4))) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ (128 | (d & 63))) & 0xff];\n        } else {\n            C = (C >>> 8) ^ T[(C ^ (224 | ((c >> 12) & 15))) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ (128 | ((c >> 6) & 63))) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ (128 | (c & 63))) & 0xff];\n        }\n    }\n    return C ^ -1;\n}\n\nexport const version = \"1.2.0\";\nexport const table = T;\n", "export const Config = {\n    // Attention! Rollup config dependents the code format!\n    JIT: typeof eval !== \"undefined\" && typeof Function !== \"undefined\",\n};\n", "export const hash2compName: Record<number, string> = Object.create(null);\nexport const compName2ctr: Record<string, { new (): any }> =\n    Object.create(null);\nexport const hash2RpcName = {} as Record<number, string>;\n", "import { IComp } from \"./comp-interface\";\nimport {\n    DataType,\n    DataTypeObect,\n    ISchema,\n    Schema,\n    SCHEME_KEY,\n} from \"./comp-schema\";\nimport { IDataBufferWriter, IDataBufferReader } from \"./data/serializable\";\nimport { NONE_CONTAINER } from \"./builtin\";\n\nexport function serValue(\n    type: DataType,\n    value: any,\n    buffer: IDataBufferWriter\n) {\n    switch (type) {\n        case DataType.INT:\n        case DataType.I32:\n            buffer.writeInt(value);\n            break;\n        case DataType.FLOAT:\n        case DataType.F32:\n            buffer.writeFloat(value);\n            break;\n        case DataType.DOUBLE:\n        case DataType.F64:\n            buffer.writeDouble(value);\n            break;\n        case DataType.BOOL:\n            buffer.writeBoolean(value);\n            break;\n        case DataTypeObect:\n            value.ser(buffer);\n            break;\n    }\n}\n\nexport function genSerValueJit(\n    type: DataType,\n    valueStr: string,\n    bufferStr: string\n) {\n    switch (type) {\n        case DataType.INT:\n        case DataType.I32:\n            return `${bufferStr}.writeInt(${valueStr});`;\n        case DataType.FLOAT:\n        case DataType.F32:\n            return `${bufferStr}.writeFloat(${valueStr});`;\n        case DataType.DOUBLE:\n        case DataType.F64:\n            return `${bufferStr}.writeDouble(${valueStr});`;\n        case DataType.BOOL:\n            return `${bufferStr}.writeBoolean(${valueStr});`;\n        case DataTypeObect:\n            return `${valueStr}.ser(${bufferStr});`;\n        default:\n            return \"\";\n    }\n}\n\nexport function genForeachSerValueJit(\n    type: DataType[],\n    from: number,\n    to: number,\n    arrStr: string,\n    bufferStr: string\n) {\n    let outStr = \"\";\n    for (let i = from; i < to; i++) {\n        outStr += genSerValueJit(type[i], `${arrStr}[${i}]`, bufferStr);\n    }\n    return outStr;\n}\n\nexport function deserValue(\n    type: DataType,\n    buffer: IDataBufferReader,\n    ref?: any,\n    refCtr?: any\n) {\n    switch (type) {\n        case DataType.INT:\n        case DataType.I32:\n            return buffer.readInt();\n        case DataType.FLOAT:\n        case DataType.F32:\n            return buffer.readFloat();\n        case DataType.DOUBLE:\n        case DataType.F64:\n            return buffer.readDouble();\n        case DataType.BOOL:\n            return buffer.readBoolean();\n        case DataTypeObect:\n            if (!ref) ref = new refCtr!();\n            ref.deser(buffer);\n            return ref;\n    }\n}\n\nfunction genForeachDeserValueJit(\n    type: DataType[],\n    from: number,\n    to: number,\n    recevierStr: string,\n    bufferStr: string\n) {\n    let outStr = \"\";\n    for (let i = from; i < to; i++) {\n        outStr += genDeserValueJit(type[i], bufferStr, `${recevierStr}[${i}]`);\n    }\n    return outStr;\n}\n\nexport function genDeserValueJit(\n    type: DataType,\n    bufferStr: string,\n    recevierStr: string\n) {\n    switch (type) {\n        case DataType.INT:\n        case DataType.I32:\n            return `${recevierStr} = ${bufferStr}.readInt();`;\n        case DataType.FLOAT:\n        case DataType.F32:\n            return `${recevierStr} = ${bufferStr}.readFloat();`;\n        case DataType.DOUBLE:\n        case DataType.F64:\n            return `${recevierStr} = ${bufferStr}.readDouble();`;\n        case DataType.BOOL:\n            return `${recevierStr} = ${bufferStr}.readBoolean();`;\n        case DataTypeObect:\n            return `\n${recevierStr}.deser(${bufferStr})\n            `;\n        default:\n            return \"\";\n    }\n}\n\nexport function fixupSerable(prototype: any) {\n    const schema = prototype[SCHEME_KEY] as Schema;\n    fixedupSerableState(prototype, schema);\n    fixedupSerableRpc(prototype, schema);\n}\n\nexport function fixupSerableWithoutState(prototype: any) {\n    const schema = prototype[SCHEME_KEY] as Schema;\n    fixedupSerableRpc(prototype, schema);\n}\n\nexport function fixedupSerableState(prototype: any, schema: Schema) {\n    prototype.ser = function (\n        this: ISchema & Record<string, any>,\n        buffer: IDataBufferWriter\n    ) {\n        for (let i = 0, count = schema.count; i < count; i++) {\n            const prop = schema.props[i];\n            const type = prop.type;\n            const key = prop.propertyKey;\n            const value = this[key];\n            if (type.container === NONE_CONTAINER) {\n                serValue(type.dataType, value, buffer);\n            } else {\n                buffer.writeInt(value.length);\n                for (let i = 0, j = value.length; i < j; i++) {\n                    serValue(type.dataType, value[i], buffer);\n                }\n            }\n        }\n    };\n    prototype.deser = function (\n        this: ISchema & Record<string, any>,\n        buffer: IDataBufferReader\n    ) {\n        for (let i = 0, count = schema.count; i < count; i++) {\n            const prop = schema.props[i];\n            const type = prop.type;\n            const key = prop.propertyKey;\n            if (type.container === NONE_CONTAINER) {\n                this[key] = deserValue(\n                    type.dataType,\n                    buffer,\n                    this[key],\n                    prop.type.refCtr\n                );\n            } else {\n                if (!(this as any)[key]) {\n                    (this as any)[key] = [];\n                }\n                const arr = (this as any)[key] as any[];\n                arr.length = buffer.readInt();\n                for (let i = 0, j = arr.length; i < j; i++) {\n                    arr[i] = deserValue(\n                        type.dataType,\n                        buffer,\n                        arr[i],\n                        prop.type.refCtr\n                    );\n                }\n            }\n        }\n    };\n}\n\nexport function fixedupSerableRpc(prototype: any, schema: Schema) {\n    const rpcNames = Object.keys(schema.methods);\n    for (let i = 0, len = rpcNames.length; i < len; i++) {\n        const name = rpcNames[i];\n        const ms = schema.methods[name];\n        prototype[\"ser\" + ms.hash] = function (\n            buffer: IDataBufferWriter,\n            args: any[]\n        ) {\n            for (let j = 0, len = ms.paramCount; j < len; j++) {\n                const value = args[j];\n                serValue(ms.paramTypes[j], value, buffer);\n            }\n        };\n        prototype[\"deser\" + ms.hash] = function (buffer: IDataBufferReader) {\n            const args = new Array(ms.paramCount);\n            for (let j = 0, len = ms.paramCount; j < len; j++) {\n                args[j] = deserValue(\n                    ms.paramTypes[j],\n                    buffer,\n                    args[j],\n                    ms.paramTypes[j]\n                );\n            }\n            return args;\n        };\n\n        const privateName = \"__\" + name + \"__\";\n        prototype[privateName] = prototype[name];\n        prototype[name] = function (\n            this: IComp & ISchema & Record<string, Function>,\n            ...args: any[]\n        ) {\n            if (this.entity.role.local == ms.type) {\n                return this[privateName](...args);\n            } else {\n                const domain = this.domain;\n                if (domain == null) {\n                    return Promise.reject(\"Domain is not valid!\");\n                }\n                return domain.readonlyInternalMsgMng.sendRpc(\n                    name,\n                    this,\n                    args,\n                    domain.logicTime.duration\n                );\n            }\n        };\n    }\n}\n\nexport function fixupSerableJIT(prototype: any) {\n    const schema = prototype[SCHEME_KEY] as Schema;\n    fixedupSerableStateJit(prototype, schema);\n    fixedupSerableRpcJit(prototype, schema);\n}\n\nexport function fixupSerableJITWithoutState(prototype: any) {\n    const schema = prototype[SCHEME_KEY] as Schema;\n    fixedupSerableRpcJit(prototype, schema);\n}\n\nexport function fixedupSerableStateJit(prototype: any, schema: Schema) {\n    let serJitStr = \"\";\n    for (let i = 0, count = schema.count; i < count; i++) {\n        const prop = schema.props[i];\n        const type = prop.type;\n        const key = prop.propertyKey;\n        if (type.container === NONE_CONTAINER) {\n            switch (type.dataType) {\n                case DataType.INT:\n                case DataType.I32:\n                    serJitStr += `buffer.writeInt(this.${key});`;\n                    break;\n                case DataType.FLOAT:\n                case DataType.F32:\n                    serJitStr += `buffer.writeFloat(this.${key});`;\n                    break;\n                case DataType.DOUBLE:\n                case DataType.F64:\n                    serJitStr += `buffer.writeDouble(this.${key});`;\n                    break;\n                case DataType.BOOL:\n                    serJitStr += `buffer.writeBoolean(this.${key});`;\n                    break;\n                case DataTypeObect:\n                    serJitStr += `this.${key}.ser(buffer);`;\n                    break;\n            }\n        } else {\n            serJitStr += `buffer.writeInt(this.${key}.length);`;\n            let itemSerFuncStr = \"\";\n            switch (type.dataType) {\n                case DataType.INT:\n                case DataType.I32:\n                    itemSerFuncStr = `buffer.writeInt(arr[i]);`;\n                    break;\n                case DataType.FLOAT:\n                case DataType.F32:\n                    itemSerFuncStr = `buffer.writeFloat(arr[i]);`;\n                    break;\n                case DataType.DOUBLE:\n                case DataType.F64:\n                    itemSerFuncStr = `buffer.writeDouble(arr[i]);`;\n                    break;\n                case DataType.BOOL:\n                    serJitStr += `buffer.writeBoolean(this.${key});`;\n                    break;\n                case DataTypeObect:\n                    itemSerFuncStr = `arr[i].ser(buffer);`;\n                    break;\n            }\n            serJitStr += `\n            var arr = this.${key}\n            for (let i = 0, j = arr.length; i < j; i++) {\n                ${itemSerFuncStr}\n            }\n            `;\n        }\n    }\n    prototype.ser = Function(\"buffer\", serJitStr);\n    let deserJitStr = \"\";\n    for (let i = 0, count = schema.count; i < count; i++) {\n        const prop = schema.props[i];\n        const type = prop.type;\n        const key = prop.propertyKey;\n        if (type.container === NONE_CONTAINER) {\n            switch (type.dataType) {\n                case DataType.INT:\n                case DataType.I32:\n                    deserJitStr += `this.${key}=buffer.readInt();`;\n                    break;\n                case DataType.FLOAT:\n                case DataType.F32:\n                    deserJitStr += `this.${key}=buffer.readFloat();`;\n                    break;\n                case DataType.DOUBLE:\n                case DataType.F64:\n                    deserJitStr += `this.${key}=buffer.readDouble();`;\n                    break;\n                case DataType.BOOL:\n                    deserJitStr += `this.${key}=buffer.readBoolean();`;\n                    break;\n                case DataTypeObect:\n                    deserJitStr += `this.${key}.deser(buffer);`;\n                    break;\n            }\n        } else {\n            deserJitStr += `\n            if(!this.${key})this.${key}=[];\n            var arr=this.${key};\n            arr.length=buffer.readInt();`;\n            let itemSerFuncStr = \"\";\n            switch (type.dataType) {\n                case DataType.INT:\n                case DataType.I32:\n                    itemSerFuncStr = `arr[i]=buffer.readInt();`;\n                    break;\n                case DataType.FLOAT:\n                case DataType.F32:\n                    itemSerFuncStr = `arr[i]=buffer.readFloat();`;\n                    break;\n                case DataType.DOUBLE:\n                case DataType.F64:\n                    itemSerFuncStr = `arr[i]=buffer.readDouble();`;\n                    break;\n                case DataType.BOOL:\n                    deserJitStr += `arr[i]=buffer.readBoolean();`;\n                    break;\n                case DataTypeObect:\n                    itemSerFuncStr = `arr[i].deser(buffer);`;\n                    break;\n            }\n            deserJitStr += `\n            for (let i = 0, j = arr.length; i < j; i++) {\n                ${itemSerFuncStr}\n            }\n            `;\n        }\n    }\n    prototype.deser = Function(\"buffer\", deserJitStr);\n}\n\nexport function fixedupSerableRpcJit(prototype: any, schema: Schema) {\n    const rpcNames = Object.keys(schema.methods);\n    for (let i = 0, len = rpcNames.length; i < len; i++) {\n        const name = rpcNames[i];\n        const ms = schema.methods[name];\n\n        let serJitStr = `\n${genForeachSerValueJit(ms.paramTypes, 0, ms.paramCount, \"args\", \"buffer\")}\n        `;\n        prototype[\"ser\" + ms.hash] = Function(\"buffer\", \"args\", serJitStr);\n\n        let deserJitStr = `\nconst args = new Array(${ms.paramCount});\n${genForeachDeserValueJit(ms.paramTypes, 0, ms.paramCount, \"args\", \"buffer\")}\nreturn args;\n        `;\n        prototype[\"deser\" + ms.hash] = Function(\"buffer\", deserJitStr);\n\n        const privateName = \"__\" + name + \"__\";\n        prototype[privateName] = prototype[name];\n        let jitStr = `\nif (this.entity.role.local == ${ms.type}) {\n    return this[\"${privateName}\"](...args);\n} else {\n    const domain = this.domain;\n    if (domain == null) {\n        return Promise.reject(\"Domain is not valid!\")\n    }\n    return domain.readonlyInternalMsgMng.sendRpc(\n        \"${name}\",\n        this,\n        args,\n        domain.logicTime.duration\n    );\n}\n        `;\n        prototype[name] = Function(\"...args\", jitStr);\n    }\n}\n", "import { ProtoOf } from \"./misc\";\nimport { str as hash } from \"./lib/crc-32\";\nimport { Config } from \"./config\";\nimport {\n    PropSchema,\n    DataType,\n    DataTypeObect,\n    getOrCreateScheme,\n    DataTypeVoid,\n    genMethodSchema,\n    Role,\n} from \"./comp-schema\";\nimport { hash2compName, compName2ctr, hash2RpcName } from \"./global-record\";\nimport { ARR_CONTAINER, NONE_CONTAINER } from \"./builtin\";\nimport {\n    fixupSerable,\n    fixupSerableJIT,\n    fixupSerableJITWithoutState,\n    fixupSerableWithoutState,\n} from \"./comp-fixup\";\nimport { IComp } from \"./comp-interface\";\n\nclass WhyPropertyKeyHasTheSameError extends Error {}\nfunction sortComponentPropertyKey(a: PropSchema, b: PropSchema): number {\n    const akey = a.propertyKey;\n    const bkey = b.propertyKey;\n    if (akey == bkey) throw new WhyPropertyKeyHasTheSameError();\n    return akey > bkey ? 1 : -1;\n}\n\nexport function NetSerable(name: string, genSerable = true) {\n    return function <T>(target: { new (): T }) {\n        const s = getOrCreateScheme(target.prototype);\n        s.name = name;\n        s.hash = hash(name);\n        hash2compName[s.hash] = s.name;\n        compName2ctr[s.name] = target;\n\n        s.count = s.raw.length;\n        if (s.count > 0) {\n            s.raw.sort(sortComponentPropertyKey);\n            for (let paramIndex = 0; paramIndex < s.count; paramIndex++) {\n                const v = s.raw[paramIndex];\n                v.paramIndex = paramIndex;\n                s.props[paramIndex] = v;\n                s.props[v.propertyKey as string] = v;\n            }\n        }\n\n        if (genSerable) {\n            if (\n                (process.env.DISABLE_RUNTIME_JIT && process.env.ENABLE_JIT) ||\n                (!process.env.DISABLE_RUNTIME_JIT && Config.JIT)\n            ) {\n                fixupSerableJIT(target.prototype);\n            } else {\n                fixupSerable(target.prototype);\n            }\n        } else {\n            if (\n                (process.env.DISABLE_RUNTIME_JIT && process.env.ENABLE_JIT) ||\n                (!process.env.DISABLE_RUNTIME_JIT && Config.JIT)\n            ) {\n                fixupSerableJITWithoutState(target.prototype);\n            } else {\n                fixupSerableWithoutState(target.prototype);\n            }\n        }\n    };\n}\n\nexport type DataTypeMappingPrimitive = {\n    [DataType.NONE]: never;\n    [DataType.INT]: number;\n    [DataType.LONG]: number;\n    [DataType.FLOAT]: number;\n    [DataType.DOUBLE]: number;\n    [DataType.SHORT]: number;\n    [DataType.I8]: number;\n    [DataType.U8]: number;\n    [DataType.I16]: number;\n    [DataType.U16]: number;\n    [DataType.I32]: number;\n    [DataType.U32]: number;\n    [DataType.F32]: number;\n    [DataType.F64]: number;\n    [DataType.STRING]: string;\n    [DataType.BOOL]: boolean;\n};\n\nexport function NetVar<DT extends number, R>(type: DT | { new (): R }) {\n    return function <PK extends string | symbol>(\n        t: ProtoOf<Record<PK, DataTypeMappingPrimitive[DT] & R>>,\n        propertyKey: PK\n    ) {\n        const s = getOrCreateScheme(t as any);\n        s.raw.push({\n            paramIndex: -1,\n            propertyKey: String(propertyKey),\n            type: {\n                container: NONE_CONTAINER,\n                dataType: typeof type === \"number\" ? type : DataTypeObect,\n                refCtr: typeof type === \"number\" ? undefined : type,\n            },\n        });\n    };\n}\n\nexport function NetArr<DT extends number, R>(type: DT | { new (): R }) {\n    return function <PK extends string | symbol>(\n        t: ProtoOf<Record<PK, Array<DataTypeMappingPrimitive[DT] & R>>>,\n        propertyKey: PK\n    ) {\n        const s = getOrCreateScheme(t as any);\n        s.raw.push({\n            paramIndex: -1,\n            propertyKey: String(propertyKey),\n            type: {\n                container: ARR_CONTAINER,\n                dataType: typeof type === \"number\" ? type : DataTypeObect,\n                refCtr: typeof type === \"number\" ? undefined : type,\n            },\n        });\n    };\n}\n\ntype RpcReturnTypeMapping<T extends undefined | number, R> = T extends number\n    ? DataTypeMappingPrimitive[T] & R\n    : void;\nexport class Crc32PropertyKeyHashConflict extends Error {}\n\nexport function Rpc<R, RpcReturnType extends undefined | number = undefined>(\n    type: Role,\n    returnType?: RpcReturnType | { new (): R }\n) {\n    return function <PropKey extends string>(\n        t: IComp &\n            ProtoOf<\n                Record<\n                    PropKey,\n                    (\n                        ...args: any[]\n                    ) => void | Promise<RpcReturnTypeMapping<RpcReturnType, R>>\n                >\n            >,\n        propertyKey: PropKey\n    ): void {\n        // gen schema\n        const s = getOrCreateScheme(t);\n        if (!s.methods[propertyKey]) {\n            s.methods[propertyKey] = genMethodSchema();\n        }\n        const ms = s.methods[propertyKey];\n        ms.hash = hash(propertyKey);\n        ms.name = propertyKey;\n        ms.type = type;\n        if (hash2RpcName[ms.hash] && hash2RpcName[ms.hash] != ms.name) {\n            throw new Crc32PropertyKeyHashConflict();\n        }\n        hash2RpcName[ms.hash] = ms.name;\n        if (typeof returnType === \"undefined\") {\n            ms.returnType = DataTypeVoid;\n        } else {\n            ms.returnType =\n                typeof returnType === \"number\" ? returnType : DataTypeObect;\n            ms.returnRefCtr =\n                typeof returnType === \"number\" ? undefined : returnType;\n        }\n\n        ms.paramCount = ms.paramTypes.length;\n        for (let i = 0, len = ms.paramCount; i < len; i++) {\n            if (!ms.paramTypes[i]) {\n                console.warn(\n                    `[Netcode]Rpc function ${propertyKey} at paramIndex(${i}) set the default type DataType.double`\n                );\n                ms.paramTypes[i] = DataType.DOUBLE;\n            }\n        }\n    };\n}\n\nexport function RpcVar(type: DataType) {\n    return function (\n        t: IComp,\n        propertyKey: string,\n        parameterIndex: number\n    ): void {\n        const s = getOrCreateScheme(t);\n        if (!s.methods[propertyKey]) {\n            s.methods[propertyKey] = genMethodSchema();\n        }\n        const ms = s.methods[propertyKey];\n        ms.paramTypes[parameterIndex] = type;\n    };\n}\n", "import { DataType } from \"./comp-schema\";\nimport { NetSerable, NetVar } from \"./comp-decorator\";\nimport {\n    IDataBufferReader,\n    IDataBufferWriter,\n    ISerable,\n} from \"./data/serializable\";\n\nexport abstract class ADirty<T> {\n    abstract get value(): T;\n    abstract set value(inValue: T);\n    abstract dirty: boolean;\n\n    getsetDirty(): boolean {\n        const old = this.dirty;\n        this.dirty = false;\n        return old;\n    }\n}\n\n@NetSerable(\"Int\", false)\nexport class Int extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n    private _value: number = 0;\n    @NetVar(DataType.INT)\n    get value() {\n        return this._value;\n    }\n\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeInt(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readInt();\n        }\n    }\n}\n\n@NetSerable(\"Float\", false)\nexport class Float extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.FLOAT)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeFloat(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readFloat();\n        }\n    }\n}\n\n@NetSerable(\"Long\", false)\nexport class Long extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.LONG)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeLong(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readLong();\n        }\n    }\n}\n\n@NetSerable(\"Uint\", false)\nexport class Uint extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n    private _value: number = 0;\n    @NetVar(DataType.uint)\n    get value() {\n        return this._value;\n    }\n\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeUint(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readUint();\n        }\n    }\n}\n\n@NetSerable(\"Double\", false)\nexport class Double extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.DOUBLE)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeDouble(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readDouble();\n        }\n    }\n}\n\n@NetSerable(\"Ulong\", false)\nexport class Ulong extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.ulong)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeUlong(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readUlong();\n        }\n    }\n}\n\n@NetSerable(\"Short\", false)\nexport class Short extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.SHORT)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeShort(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readShort();\n        }\n    }\n}\n\n@NetSerable(\"Ulong\", false)\nexport class Ushort extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.ushort)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeUshort(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readUshort();\n        }\n    }\n}\n", "import { IComp } from \"../comp-interface\";\nimport { DataType } from \"../comp-schema\";\nimport { NetSerable, NetVar } from \"../comp-decorator\";\nimport { Float } from \"../base-dirty-data\";\n\nexport interface ITime {\n    readonly delta: number;\n    readonly duration: number;\n}\n\n@NetSerable(\"logic_time\")\nexport class LogicTimeComp extends IComp implements ITime {\n    @NetVar(Float)\n    $delta = new Float(0);\n\n    get delta() {\n        return this.$delta.value;\n    }\n    set delta(value: number) {\n        this.$delta.value = value;\n    }\n\n    @NetVar(DataType.DOUBLE)\n    duration: number = 0;\n}\n\n@NetSerable(\"render_time\")\nexport class RenderTimeComp extends IComp implements ITime {\n    delta: number = 0;\n    duration: number = 0;\n}\n", "import { IComp } from \"../comp-interface\";\nimport { Short } from \"../base-dirty-data\";\nimport { NetSerable, NetVar, Rpc } from \"../comp-decorator\";\nimport {\n    IDataBufferReader,\n    IDataBufferWriter,\n    ISerable,\n} from \"../data/serializable\";\nimport { DataType, Role, RpcType } from \"../comp-schema\";\n\n@NetSerable(\"role\", false)\nexport class RoleComp extends IComp implements ISerable {\n    //#region property\n    @NetVar(Short)\n    $local = new Short(Role.AUTHORITY);\n    get local(): Role {\n        return this.$local.value;\n    }\n    // set local(value: Role) {\n    //     this.$local.value = value;\n    // }\n\n    @NetVar(Short)\n    $remote = new Short(Role.SIMULATED_PROXY);\n    get remote(): Role {\n        return this.$remote.value;\n    }\n    set remote(value: Role) {\n        this.$remote.value = value;\n    }\n    //#endregion\n\n    //#region interface ISerable implement\n    ser(buffer: IDataBufferWriter<any>): void {\n        this.$local.ser(buffer);\n        this.$remote.ser(buffer);\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.$remote.deser(buffer);\n        this.$local.deser(buffer);\n    }\n    //#endregion\n\n    @Rpc(Role.AUTHORITY, DataType.BOOL)\n    async upgrade() {\n        if (\n            this.local == Role.AUTHORITY &&\n            this.remote != Role.AUTONMOUS_PROXY\n        ) {\n            this.remote = Role.AUTONMOUS_PROXY;\n            return true;\n        }\n        return false;\n    }\n\n    @Rpc(Role.AUTHORITY, DataType.BOOL)\n    async downgrade() {\n        if (\n            this.local == Role.AUTHORITY &&\n            this.remote != Role.SIMULATED_PROXY\n        ) {\n            this.remote = Role.SIMULATED_PROXY;\n            return true;\n        }\n        return false;\n    }\n\n    init() {\n        const type = this.domain.option.type;\n        this.$local.value =\n            type === RpcType.SERVER ? Role.AUTHORITY : Role.SIMULATED_PROXY;\n        this.$remote.value =\n            type === RpcType.SERVER ? Role.SIMULATED_PROXY : Role.AUTHORITY;\n    }\n}\n", "import { RoleComp } from \"./builtin-comp/\";\nimport { ISchema } from \"./comp-schema\";\nimport type { Domain } from \"./domain\";\nimport { compName2ctr } from \"./global-record\";\nimport { IComp } from \"./comp-interface\";\nimport { NULL_NUM } from \"./builtin\";\n\nclass ComponentHasNotDecorated extends Error {}\n/**\n * The unit in a network.It can manager some component.\n * It include id and version, plz don't modify then if you are not undersanding!\n * It is sealed, PLZ NOT implement!!!\n * @example\n ```js\n // Must do decoration\n @NetComp\n class ViewComponent {\n     @Param(DataType.bool)\n     active = false\n }\n const ent = new Entity();\n ent.add(ViewComponent);\n ent.has(ViewComponent);\n ent.get(ViewComponent);\n Domain.ref(ent);\n ent.rm(ViewComponent);\n ```\n */\nexport class Entity<ProxyObj extends Object = any> {\n    private _id: number;\n    get id() {\n        return this._id;\n    }\n    private _version: number;\n    get version() {\n        return this._version;\n    }\n    private _domain?: Domain;\n    get domain() {\n        return this._domain!;\n    }\n    static Event = {\n        REG_ENTITY: \"reg-entity\",\n        UNREG_ENTITY: \"unreg-entity\",\n    };\n\n    $comps = new Proxy<ProxyObj>(this as any, {\n        get(target: any, p, _receiver) {\n            return target.get(compName2ctr[String(p)]);\n        },\n    });\n\n    private readonly _compMap: Map<number, IComp | IComp[]>;\n    private readonly _comps: IComp[];\n    get comps(): readonly IComp[] {\n        return this._comps;\n    }\n\n    readonly role: RoleComp;\n\n    constructor(..._comps: IComp[]) {\n        this._id = NULL_NUM;\n        this._version = NULL_NUM;\n        this._compMap = new Map();\n        this.role = new RoleComp();\n\n        this._comps = [this.role, ..._comps];\n        for (let i = 0, len = this._comps.length; i < len; i++) {\n            this._initComp(this._comps[i] as IComp & ISchema);\n        }\n    }\n\n    static NewWithoutRole(..._comps: IComp[]) {\n        const ent = Object.create(Entity.prototype);\n\n        ent._id = NULL_NUM;\n        ent._version = NULL_NUM;\n        ent.$comps = new Proxy<any>(ent, {\n            get(target: any, p, _receiver) {\n                return target.get(compName2ctr[String(p)]);\n            },\n        });\n        ent._compMap = new Map();\n        ent.role = _comps[0];\n\n        ent._comps = _comps;\n        for (let i = 0, len = ent._comps.length; i < len; i++) {\n            ent._initComp(ent._comps[i] as IComp & ISchema);\n        }\n        return ent;\n    }\n\n    protected _initComp(c: ISchema & IComp) {\n        const map = this._compMap;\n        c[\"_entity\"] = this;\n        if (!c.__schema__ || c.__schema__.hash == NULL_NUM) {\n            throw new ComponentHasNotDecorated(\"Component must use @NetComp\");\n        }\n        const hash = c.__schema__.hash;\n        if (map.has(hash)) {\n            map.set(hash, [map.get(hash) as any, c]);\n        } else {\n            map.set(hash, c);\n        }\n    }\n\n    toString() {\n        return `Entity: id=${this._id},version=${this._version}`;\n    }\n\n    get<T extends IComp>(ctr: { new (): T }): T | null {\n        const schema = ctr.prototype.__schema__;\n        if (!(schema && schema.name)) {\n            console.error(\"Componrnt must use @NetComp\");\n            return null;\n        }\n\n        if (!this._compMap.has(schema.hash)) return null;\n        const insOrArr = this._compMap.get(schema.hash)!;\n        if (!Array.isArray(insOrArr)) return insOrArr as T;\n        return insOrArr[insOrArr.length - 1] as T;\n    }\n\n    mget<T extends IComp>(ctr: { new (): T }): T[] {\n        const schema = ctr.prototype.__schema__;\n        if (!(schema && schema.name)) {\n            console.error(\"Componrnt must use @NetComp\");\n            return [];\n        }\n\n        if (!this._compMap.has(schema.hash)) return [];\n        const insOrArr = this._compMap.get(schema.hash)!;\n        if (!Array.isArray(insOrArr)) return [insOrArr as T];\n        return insOrArr as T[];\n    }\n\n    has(ctr: { new (): any }): boolean {\n        const schema = ctr.prototype.__schema__;\n        if (!(schema && schema.name)) {\n            console.error(\"Componrnt must use @NetComp\");\n            return false;\n        }\n        return this._compMap.has(schema.hash);\n    }\n\n    indexOf(ins: IComp) {\n        if (ins == null) return -1;\n        return this._comps.indexOf(ins);\n    }\n\n    protected _init() {\n        for (let i = 0, len = this._comps.length; i < len; i++) {\n            const c = this._comps[i];\n            c.init && c.init(i);\n        }\n    }\n\n    protected _renderUpdate() {\n        for (let i = 0, len = this._comps.length; i < len; i++) {\n            const c = this._comps[i];\n            c.renderUpdate && c.renderUpdate(i);\n        }\n    }\n\n    protected _logicUpdate() {\n        for (let i = 0, len = this._comps.length; i < len; i++) {\n            const c = this._comps[i];\n            c.logicUpdate && c.logicUpdate(i);\n        }\n    }\n\n    protected _destroy() {\n        for (let i = 0, len = this._comps.length; i < len; i++) {\n            const c = this._comps[i];\n            c.destroy && c.destroy(i);\n            c[\"_entity\"] = null;\n        }\n        this._comps.length = 0;\n        this._compMap.clear();\n    }\n}\n", "import { composeVersion, decomposeVersion, Deferred } from \"./misc\";\nimport {\n    IDataBufferReader,\n    IDataBufferWriter,\n    ISerable,\n    SupportNetDataType,\n} from \"./data/serializable\";\nimport { DataTypeVoid, ISchema } from \"./comp-schema\";\nimport { RPC_MAX_UUID } from \"./builtin\";\nimport { IComp } from \"./comp-interface\";\n\nexport enum MessageType {\n    UPDATE_COMPONENT,\n    RPC,\n}\n\nexport interface RpcCall {\n    methodName: number;\n    component: any;\n    args: any[];\n}\n\nexport interface MessageEntityInfo {\n    entityId: number;\n    entityVersion: number;\n    destoryed: boolean;\n    compCount: number;\n}\n\nexport interface MessageRpcInfo {\n    entityId: number;\n    compIdx: number;\n    methodHash: number;\n    timestamp: number;\n    uuid: number;\n}\n\nexport interface MessageRpcCallbackInfo {\n    entityId: number;\n    compIdx: number;\n    methodHash: number;\n    uuid: number;\n}\n\nexport interface MessageRpcCallbackRecord {\n    deferred: Deferred;\n    timestamp: number;\n}\nexport class RpcCallbackUuidOutOfRange extends Error {}\n\nexport enum MessageManagerBufferType {\n    // The real net package on sending or receiving.\n    IN_OR_OUT,\n    STATE,\n    RPC,\n    RPC_CALLBACK,\n}\n\nexport interface MessageManagerBufferInitializer<T extends SupportNetDataType> {\n    newBufferReader(bufferType: MessageManagerBufferType): IDataBufferReader<T>;\n    newBufferWriter(bufferType: MessageManagerBufferType): IDataBufferWriter<T>;\n}\n\nexport class MessageManager<T extends SupportNetDataType> {\n    protected _rpcCalls: RpcCall[] = [];\n    protected _rpcDeferred: Map<string, MessageRpcCallbackRecord> = new Map();\n    protected _uuid = 0;\n\n    readonly inbufferReader: IDataBufferReader<T>;\n    readonly statebufferReader: IDataBufferReader<T>;\n    readonly rpcbufferReader: IDataBufferReader<T>;\n    readonly rpcCallbackBufferReader: IDataBufferReader<T>;\n\n    readonly outbufferWriter: IDataBufferWriter<T>;\n    readonly statebufferWriter: IDataBufferWriter<T>;\n    readonly rpcbufferWriter: IDataBufferWriter<T>;\n    readonly rpcCallbackBufferWriter: IDataBufferWriter<T>;\n\n    constructor(initializer: MessageManagerBufferInitializer<T>) {\n        this.inbufferReader = initializer.newBufferReader(\n            MessageManagerBufferType.IN_OR_OUT\n        );\n        this.statebufferReader = initializer.newBufferReader(\n            MessageManagerBufferType.STATE\n        );\n        this.rpcbufferReader = initializer.newBufferReader(\n            MessageManagerBufferType.RPC\n        );\n        this.rpcCallbackBufferReader = initializer.newBufferReader(\n            MessageManagerBufferType.RPC_CALLBACK\n        );\n\n        this.outbufferWriter = initializer.newBufferWriter(\n            MessageManagerBufferType.IN_OR_OUT\n        );\n        this.statebufferWriter = initializer.newBufferWriter(\n            MessageManagerBufferType.STATE\n        );\n        this.rpcbufferWriter = initializer.newBufferWriter(\n            MessageManagerBufferType.RPC\n        );\n        this.rpcCallbackBufferWriter = initializer.newBufferWriter(\n            MessageManagerBufferType.RPC_CALLBACK\n        );\n    }\n\n    private _getUuid() {\n        if (this._uuid >= RPC_MAX_UUID) {\n            console.warn(\n                \"[MessageManager#_getUuid]UUID is great than \" + RPC_MAX_UUID\n            );\n            return 0;\n        }\n        return ++this._uuid;\n    }\n\n    startSendEntityAndComps() {\n        this.statebufferWriter.reset();\n    }\n\n    sendEntity(\n        entityId: number,\n        entityVersion: number,\n        compsLen: number,\n        toDestroy: boolean\n    ) {\n        const buf = this.statebufferWriter;\n        // entity id\n        buf.writeInt(entityId);\n        // entity compuse version\n        buf.writeInt(composeVersion(entityVersion, toDestroy));\n        // component count\n        buf.writeInt(compsLen);\n    }\n\n    sendComp(compIdx: number, comp: ISerable & IComp & ISchema): boolean {\n        const buf = this.statebufferWriter;\n        // msg type -> compoent\n\n        // comp index\n        buf.writeInt(compIdx);\n        // comp hash\n        buf.writeLong(comp.__schema__.hash);\n        // ser comp\n        comp.ser(buf);\n\n        return true;\n    }\n\n    endSendEntityAndComps() {\n        this.statebufferWriter.reset();\n    }\n\n    startRecvEntityAndComps() {}\n\n    recvEntity(): MessageEntityInfo | null {\n        const buf = this.statebufferReader;\n        if (!buf.hasNext()) return null;\n        // entity id\n        const entityId = buf.readInt();\n        // entity compuse version\n        const [entityVersion, toDestory] = decomposeVersion(buf.readInt());\n        // component length\n        const compCount = buf.readInt();\n        return {\n            entityId,\n            entityVersion,\n            destoryed: toDestory,\n            compCount,\n        };\n    }\n\n    recvCompHeader() {\n        const buf = this.statebufferReader;\n\n        // comp index\n        const compIdx = buf.readInt();\n        // comp hash\n        const hash = buf.readLong();\n        // deser comp\n        return {\n            compIdx,\n            hash,\n        };\n    }\n\n    recvCompBody(comp: ISerable & IComp) {\n        const buf = this.statebufferReader;\n        comp.deser(buf);\n    }\n\n    endRecvEntityAndComps() {}\n\n    // callRpc(methodName: number, component: any, ...args: any) {\n    //     this._rpcCalls.push({ methodName, component, args });\n    // }\n\n    startSendRpc() {\n        // this.rpcbuffer.reset();\n    }\n\n    sendRpc(\n        methodName: string,\n        component: IComp & ISchema & Record<string, Function>,\n        params: any[],\n        timestamp: number\n    ) {\n        const uuid = this._getUuid();\n        if (uuid < 0) {\n            return Promise.reject(new RpcCallbackUuidOutOfRange());\n        }\n\n        const comp = component;\n        const entity = comp.entity;\n        const compIdx = entity.indexOf(component);\n        const buf = this.rpcbufferWriter;\n        // schema\n        const s = comp.__schema__;\n        // method schema\n        const ms = s.methods[methodName];\n        // entity id\n        buf.writeInt(entity.id);\n        // comp index\n        buf.writeUshort(compIdx);\n        // method hash\n        buf.writeLong(ms.hash);\n        // timestamp\n        buf.writeLong(timestamp);\n        // uuid\n        buf.writeUint(uuid);\n        // param\n        component[\"ser\" + ms.hash](buf, params);\n        if (ms.returnType == DataTypeVoid) {\n            return;\n        } else {\n            const deferred = new Deferred();\n            this._rpcDeferred.set(\n                `${entity.id}|${compIdx}|${ms.hash}|${uuid}`,\n                {\n                    deferred,\n                    timestamp,\n                }\n            );\n            return deferred.promise;\n        }\n    }\n\n    endSendRpc() {\n        this.rpcbufferWriter.reset();\n        this._uuid = 0;\n    }\n\n    startRecvRpc() {}\n\n    recvRpc(): MessageRpcInfo | null {\n        if (!this.rpcbufferReader.hasNext()) return null;\n        const buf = this.rpcbufferReader;\n        // entity id\n        const entityId = buf.readInt();\n        // comp index\n        const compIdx = buf.readUshort();\n        // method hash\n        const methodHash = buf.readLong();\n        // timestamp\n        const timestamp = buf.readLong();\n        // uuid\n        const uuid = buf.readUint();\n        return { entityId, compIdx, methodHash, timestamp, uuid };\n    }\n\n    endRecvRpc() {}\n\n    startSendRpcCallback() {}\n\n    sendRpcCallback(info: MessageRpcInfo) {\n        const buf = this.rpcCallbackBufferWriter;\n        buf.writeInt(info.entityId);\n        buf.writeUshort(info.compIdx);\n        buf.writeLong(info.methodHash);\n        buf.writeUint(info.uuid);\n    }\n\n    endSendRpcCallback() {\n        this.rpcCallbackBufferWriter.reset();\n    }\n\n    startRecvRpcCallback() {}\n\n    recvRpcCallback(): MessageRpcCallbackInfo | null {\n        if (!this.rpcCallbackBufferReader.hasNext()) return null;\n        const buf = this.rpcCallbackBufferReader;\n        const entityId = buf.readInt();\n        const compIdx = buf.readUshort();\n        const methodHash = buf.readLong();\n        const uuid = buf.readUint();\n        return { entityId, compIdx, methodHash, uuid };\n    }\n\n    endRecvRpcCallback() {}\n\n    getRpcCallbackRecord(param: MessageRpcCallbackInfo) {\n        return this._rpcDeferred.get(\n            `${param.entityId}|${param.compIdx}|${param.methodHash}|${param.uuid}`\n        );\n    }\n}\n", "import { LogicTimeComp, RenderTimeComp } from \"./builtin-comp\";\nimport {\n    DataTypeVoid,\n    ISchema,\n    RpcType,\n    Role,\n    SCHEME_KEY,\n} from \"./comp-schema\";\nimport { SupportNetDataType } from \"./data/serializable\";\nimport { Entity } from \"./entity\";\nimport { IComp } from \"./comp-interface\";\nimport { NULL_NUM } from \"./builtin\";\nimport {\n    MessageEntityInfo,\n    MessageManager,\n    MessageManagerBufferInitializer,\n    MessageRpcCallbackInfo,\n    MessageRpcInfo,\n} from \"./message-manager\";\nimport { asSerable, assert } from \"./misc\";\nimport { ArrayMap } from \"./array-map\";\nimport { compName2ctr, hash2compName, hash2RpcName } from \"./global-record\";\nimport { deserValue, serValue } from \"./comp-fixup\";\nimport { str as hash } from \"./lib/crc-32\";\n\nclass EntityNotValidError extends Error {}\nclass EntityRepeatRegisteredError extends Error {}\nclass EntityGroupOutOfRangeYouCanOpenAutoResize extends Error {}\nclass DomainDuplicated extends Error {}\nclass DomainCompCountNotMatch extends Error {}\n\nexport type DomainConstructorParamters<TT extends new (...args: any) => any> =\n    TT extends new (_: any, ...args: infer P) => Domain ? P : never;\n\nexport class DomainOption<T extends SupportNetDataType = string> {\n    capacity: number = 50;\n    autoResize: boolean = true;\n    fixedTimeSec: number = 0.2;\n\n    constructor(\n        readonly initializer: MessageManagerBufferInitializer<T>,\n        readonly type: RpcType\n    ) {}\n}\n\nexport class Domain<T extends SupportNetDataType = any> {\n    private static _name2domainMap: ArrayMap<string, Domain> = new ArrayMap();\n    //#region static methods\n    static Create<T extends SupportNetDataType = any>(\n        name: string,\n        option: DomainOption<T>,\n        uuid: number = hash(name)\n    ) {\n        if (this._name2domainMap.has(name)) {\n            throw new DomainDuplicated(name);\n        }\n        const news: Domain<T> = new Domain(name, option, uuid);\n        const domainIndex = this._name2domainMap.set(name, news);\n        news._index = domainIndex;\n        return news;\n    }\n\n    static Get<T extends SupportNetDataType>(name: string = \"main\") {\n        return this._name2domainMap.get(name) as Domain<T>;\n    }\n\n    static GetByEntity(entity: Entity) {\n        const domainIndex = entity.id;\n        const domain = this._name2domainMap.values[domainIndex];\n        if (domain.isValid(entity)) {\n            return domain;\n        }\n        return null;\n    }\n\n    static Clear() {\n        this._name2domainMap.clear();\n    }\n    //#endregion\n\n    //#region member variables\n    get index() {\n        return this._index;\n    }\n    private _index = -1;\n    private _entities: (Entity | null)[];\n    private _entitiesLength = 0;\n    public get entities() {\n        return this._entities;\n    }\n    public get length() {\n        return this._entitiesLength;\n    }\n    private _entityVersion: number[];\n    private _destroyEntityId: number[];\n    private _entityIdCursor = 0;\n    private _internalMsgMng: MessageManager<T>;\n    public readonly readonlyInternalMsgMng!: MessageManager<T>;\n\n    private _fixedSecAccumulator = 0;\n    public readonly time: Entity;\n    public readonly logicTime: LogicTimeComp;\n    public readonly renderTime: RenderTimeComp;\n\n    private readonly _option: DomainOption<T>;\n\n    get option() {\n        return this._option as Required<Readonly<DomainOption<T>>>;\n    }\n    //#endregion\n    protected constructor(\n        readonly name: string,\n        option: DomainOption<T>,\n        readonly uuid: number\n    ) {\n        this._option = option;\n        this._entities = new Array<Entity>(option.capacity);\n        this._entityVersion = new Array<number>(option.capacity);\n        this._entityVersion.fill(0);\n        this._destroyEntityId = new Array<number>();\n        this._internalMsgMng = new MessageManager(option.initializer);\n        this.readonlyInternalMsgMng = this._internalMsgMng;\n\n        this.logicTime = new LogicTimeComp();\n        this.renderTime = new RenderTimeComp();\n        this.time = new Entity(this.logicTime, this.renderTime);\n        this.logicTime.delta = this.option.fixedTimeSec;\n\n        this.reg(this.time);\n    }\n\n    //#region public methods\n    reg(entity: Entity) {\n        if (this.isValid(entity))\n            throw new EntityRepeatRegisteredError(entity.toString());\n        if (this._entityIdCursor == this._option.capacity) {\n            if (this._option.autoResize) {\n                this.resize(Math.ceil(this._option.capacity * 1.5));\n            } else\n                throw new EntityGroupOutOfRangeYouCanOpenAutoResize(\n                    `Domain: capacity: ${this._option.capacity}; ` +\n                        entity.toString()\n                );\n        }\n\n        const id = this._getEntityId();\n        const version = this._entityVersion[id];\n        this._reg(entity, id, version);\n        entity[\"_init\"]();\n    }\n\n    hasReg(entity: Entity) {\n        return this.isValid(entity);\n    }\n\n    unregWithoutValidation(entity: Entity) {\n        const index = entity.id;\n        this._entityVersion[index]++;\n        this._unreg(entity);\n        this._destroyEntityId.push(entity.id);\n        this._entities[index] = null;\n        entity[\"_destroy\"]();\n    }\n\n    unreg(entity: Entity) {\n        if (!this.isValid(entity))\n            throw new EntityNotValidError(entity.toString());\n        this.unregWithoutValidation(entity);\n    }\n\n    get(id: number) {\n        return this._entities[id];\n    }\n\n    resize(newSize: number) {\n        const oldSize = this._option.capacity;\n        this._entities.length = newSize;\n        this._entityVersion.length = newSize;\n        this._entityVersion.fill(0, oldSize, newSize);\n        this._option.capacity = newSize;\n    }\n\n    isValid(entity: Entity) {\n        return (\n            entity.id != NULL_NUM &&\n            entity.version != NULL_NUM &&\n            entity.version == this._entityVersion[entity.id]\n        );\n    }\n\n    asData(): T {\n        const isServer = this._option.type == RpcType.SERVER;\n        const outBuf = this._internalMsgMng.outbufferWriter;\n        const stateBuf = this._internalMsgMng.statebufferWriter;\n        const rpcBuf = this._internalMsgMng.rpcbufferWriter;\n        const rpcCbBuf = this._internalMsgMng.rpcCallbackBufferWriter;\n\n        outBuf.reset();\n        outBuf.writeInt(this.uuid).writeBoolean(isServer);\n\n        if (isServer) {\n            this._internalMsgMng.startSendEntityAndComps();\n            this._internalMsgMng.startSendRpc();\n            this._internalMsgMng.startSendRpcCallback();\n\n            this._serEntityAndComps();\n            const stateLen = stateBuf.writerCursor;\n            const rpcLen = rpcBuf.writerCursor;\n            const rpcCbLen = rpcCbBuf.writerCursor;\n\n            outBuf\n                .writeUlong(stateLen)\n                .writeUlong(rpcLen)\n                .writeUlong(rpcCbLen)\n                .append(stateBuf)\n                .append(rpcBuf)\n                .append(rpcCbBuf);\n\n            this._internalMsgMng.endSendEntityAndComps();\n            this._internalMsgMng.endSendRpc();\n            this._internalMsgMng.endSendRpcCallback();\n        } else {\n            this._internalMsgMng.startSendRpc();\n            this._internalMsgMng.startSendRpcCallback();\n\n            const rpcLen = rpcBuf.writerCursor;\n            const rpcCbLen = rpcCbBuf.writerCursor;\n\n            outBuf\n                .writeUlong(rpcLen)\n                .writeUlong(rpcCbLen)\n                .append(rpcBuf)\n                .append(rpcCbBuf);\n\n            this._internalMsgMng.endSendRpc();\n            this._internalMsgMng.endSendRpcCallback();\n        }\n\n        return outBuf.flush();\n    }\n\n    setData(source: T) {\n        const inBuf = this._internalMsgMng.inbufferReader;\n        const stateBuf = this._internalMsgMng.statebufferReader;\n        const rpcBuf = this._internalMsgMng.rpcbufferReader;\n        const rpcCbBuf = this._internalMsgMng.rpcCallbackBufferReader;\n\n        inBuf.set(source);\n        /* const uuid =  */ inBuf.readInt();\n        const isServer = inBuf.readBoolean();\n\n        if (isServer) {\n            const stateLen = inBuf.readUlong();\n            const rpcLen = inBuf.readUlong();\n            const rpcCbLen = inBuf.readUlong();\n\n            const stateStart = inBuf.readerCursor;\n            const stateEnd = stateStart + stateLen;\n\n            const rpcStart = stateEnd;\n            const rpcEnd = rpcStart + rpcLen;\n\n            const rpcCbStart = rpcEnd;\n            const rpcCbEnd = rpcCbStart + rpcCbLen;\n\n            stateBuf.set(source, stateStart, stateEnd);\n            rpcBuf.set(source, rpcStart, rpcEnd);\n            rpcCbBuf.set(source, rpcCbStart, rpcCbEnd);\n\n            this._internalMsgMng.startRecvEntityAndComps();\n            this._derEntityAndComps();\n            this._internalMsgMng.endRecvEntityAndComps();\n\n            this._internalMsgMng.startRecvRpc();\n            this._deserRpcs();\n            this._internalMsgMng.endRecvRpc();\n\n            this._internalMsgMng.startRecvRpcCallback();\n            this._deserRpcCallbacks();\n            this._internalMsgMng.endRecvRpcCallback();\n        } else {\n            const rpcLen = inBuf.readUlong();\n            const rpcCbLen = inBuf.readUlong();\n\n            const rpcStart = inBuf.readerCursor;\n            const rpcEnd = rpcStart + rpcLen;\n\n            const rpcCbStart = rpcEnd;\n            const rpcCbEnd = rpcCbStart + rpcCbLen;\n\n            rpcBuf.set(source, rpcStart, rpcEnd);\n            rpcCbBuf.set(source, rpcCbStart, rpcCbEnd);\n\n            this._internalMsgMng.startRecvRpc();\n            this._deserRpcs();\n            this._internalMsgMng.endRecvRpc();\n\n            this._internalMsgMng.startRecvRpcCallback();\n            this._deserRpcCallbacks();\n            this._internalMsgMng.endRecvRpcCallback();\n        }\n    }\n\n    update(dtSec: number) {\n        this._fixedSecAccumulator += dtSec;\n        const fixedDeltaTime = this.logicTime.delta;\n        while (this._fixedSecAccumulator > fixedDeltaTime) {\n            this._fixedSecAccumulator -= fixedDeltaTime;\n            this.logicTime.duration += fixedDeltaTime;\n            for (let i = 0, len = this._entitiesLength; i < len; i++) {\n                const ent = this._entities[i];\n                if (!ent) continue;\n                if (\n                    ent.role.local === Role.AUTHORITY ||\n                    ent.role.local === Role.AUTONMOUS_PROXY\n                ) {\n                    ent[\"_logicUpdate\"]();\n                }\n            }\n        }\n\n        this.renderTime.delta = dtSec;\n        this.renderTime.duration += dtSec;\n        for (let i = 0, len = this._entitiesLength; i < len; i++) {\n            const ent = this._entities[i];\n            if (!ent) continue;\n            ent[\"_renderUpdate\"]();\n        }\n    }\n\n    //#endregion\n\n    //#region protected methods\n    protected _reg(entity: Entity, id: number, version: number) {\n        entity[\"_id\"] = id;\n        entity[\"_version\"] = version;\n        entity[\"_domain\"] = this;\n        const index = entity.id;\n        this._entities[index] = entity;\n        if (index >= this._entitiesLength) {\n            this._entitiesLength = index + 1;\n        }\n    }\n\n    protected _unreg(entity: Entity) {\n        entity[\"_id\"] = NULL_NUM;\n        entity[\"_version\"] = NULL_NUM;\n        entity[\"_domain\"] = undefined;\n    }\n\n    protected _serEntityAndComps() {\n        for (let i = 0, len = this._entitiesLength; i < len; i++) {\n            const ent = this._entities[i];\n            if (!ent) {\n                this._internalMsgMng.sendEntity(\n                    i,\n                    this._entityVersion[i],\n                    0,\n                    true\n                );\n                continue;\n            }\n            this._internalMsgMng.sendEntity(\n                ent.id,\n                ent.version,\n                ent.comps.length,\n                false\n            );\n            const comps = ent.comps;\n            for (\n                let compIdx = 0, len = comps.length;\n                compIdx < len;\n                compIdx++\n            ) {\n                const comp = comps[compIdx] as ISchema & IComp;\n                const serableComp = asSerable(comp);\n                if (!serableComp) {\n                    console.warn(\n                        `[Domain#_ser(compIdx: ${compIdx}, entity: ${ent})]comp is not Serable!`\n                    );\n                    continue;\n                }\n                this._internalMsgMng.sendComp(compIdx, serableComp);\n            }\n        }\n    }\n\n    protected _derEntityAndComps() {\n        let params: MessageEntityInfo | null;\n        while ((params = this._internalMsgMng.recvEntity())) {\n            let ent = this._entities[params.entityId];\n            if (\n                ent &&\n                (ent.version != params.entityVersion || params.destoryed)\n            ) {\n                this.unreg(ent);\n                ent = null;\n            }\n            if (!params.destoryed) {\n                ent = ent\n                    ? this._derEntityAndCompsUnderExisted(params, ent)\n                    : this._derEntityAndCompsUnderUnExsited(params);\n            }\n        }\n    }\n\n    protected _derEntityAndCompsUnderExisted(\n        params: MessageEntityInfo,\n        entity: Entity\n    ) {\n        const entComps = entity.comps;\n        assert(params.compCount == entComps.length, DomainCompCountNotMatch);\n        for (let i = 0, len = params.compCount; i < len; i++) {\n            const compHeaderInfo = this._internalMsgMng.recvCompHeader();\n            const comp = asSerable(entComps[compHeaderInfo.compIdx]);\n            if (!comp) continue;\n            this._internalMsgMng.recvCompBody(comp);\n        }\n        return entity;\n    }\n\n    protected _derEntityAndCompsUnderUnExsited(params: MessageEntityInfo) {\n        const compArr = new Array<IComp>(params.compCount);\n        for (let i = 0, len = params.compCount; i < len; i++) {\n            const compHeaderInfo = this._internalMsgMng.recvCompHeader();\n            const compName = hash2compName[compHeaderInfo.hash];\n            const CompCtr = compName2ctr[compName];\n            const comp = new CompCtr();\n            this._internalMsgMng.recvCompBody(comp);\n            compArr[compHeaderInfo.compIdx] = comp;\n        }\n        const e = Entity.NewWithoutRole(...compArr);\n        this.reg(e);\n        return e;\n    }\n\n    protected _deserRpcs() {\n        let param: MessageRpcInfo | null;\n        while ((param = this._internalMsgMng.recvRpc())) {\n            const ent = this.get(param.entityId);\n            if (!ent) continue;\n            const comp = ent.comps[param.compIdx] as IComp &\n                ISchema &\n                Record<string, Function>;\n            if (!comp) continue;\n            const argus = comp[\"deser\" + param.methodHash](\n                this._internalMsgMng.rpcbufferReader\n            );\n            const methodName = hash2RpcName[param.methodHash];\n            const unknown = comp[methodName].apply(comp, argus);\n\n            const s = comp[SCHEME_KEY];\n            const ms = s.methods[methodName];\n            if (ms.returnType != DataTypeVoid) {\n                const w = param!;\n                unknown?.then((result: any) => {\n                    this._internalMsgMng.sendRpcCallback(w);\n                    serValue(\n                        ms.returnType,\n                        result,\n                        this._internalMsgMng.rpcCallbackBufferWriter\n                    );\n                });\n            }\n        }\n    }\n\n    protected _deserRpcCallbacks() {\n        let param: MessageRpcCallbackInfo | null;\n        while ((param = this._internalMsgMng.recvRpcCallback())) {\n            const ent = this.get(param.entityId);\n            if (!ent) continue;\n            const comp = ent.comps[param.compIdx] as IComp &\n                ISchema &\n                Record<string, Function>;\n            if (!comp) continue;\n            const s = comp[SCHEME_KEY];\n            const methodName = hash2RpcName[param.methodHash];\n            const ms = s.methods[methodName];\n            let result: any;\n            if (ms.returnType != DataTypeVoid) {\n                result = deserValue(\n                    ms.returnType,\n                    this._internalMsgMng.rpcCallbackBufferReader,\n                    undefined,\n                    ms.returnRefCtr\n                );\n            }\n            const callbackRecord =\n                this._internalMsgMng.getRpcCallbackRecord(param);\n            if (!callbackRecord) continue;\n            callbackRecord.deferred.resolve(result);\n        }\n    }\n\n    protected _getEntityId() {\n        return this._destroyEntityId.length > 0\n            ? this._destroyEntityId.unshift()\n            : this._entityIdCursor++;\n    }\n    //#endregion\n}\n", "import { IDataBufferReader, IDataBufferWriter } from \"./serializable\";\n\nconst tempTypedBuffer = {\n    int: new Int32Array(1),\n    uint: new Uint32Array(1),\n    short: new Int16Array(1),\n    ushort: new Uint16Array(1),\n    long: new Int32Array(1),\n    ulong: new Uint32Array(1),\n    float: new Float32Array(1),\n    double: new Float64Array(1),\n};\n\nexport class StringDataBufferOutOfRange extends Error {}\n\nexport class StringDataBuffer\n    implements IDataBufferWriter<string>, IDataBufferReader<string>\n{\n    public writeBuffer: any[] = [];\n    public writerCursor = 0;\n\n    public readBuffer: any[] = [];\n    public readerCursor = 0;\n    public readerStart = 0;\n    public readerEnd = 0;\n\n    protected check(increment = 0) {\n        if (\n            this.writerCursor + increment >= this.readBuffer.length &&\n            this.writerCursor + increment >= this.readerEnd\n        ) {\n            throw new StringDataBufferOutOfRange(\n                `Cursor: (${this.writerCursor}), buffer's length: (${this.writeBuffer.length})`\n            );\n        }\n    }\n    reset(): void {\n        this.writerCursor = 0;\n        this.readerCursor = 0;\n        this.readBuffer.length = 0;\n        this.writeBuffer.length = 0;\n    }\n    readInt(): number {\n        this.check();\n        const temp = tempTypedBuffer.int;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readUint(): number {\n        this.check();\n        const temp = tempTypedBuffer.uint;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readShort(): number {\n        this.check();\n        const temp = tempTypedBuffer.short;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readUshort(): number {\n        this.check();\n        const temp = tempTypedBuffer.ushort;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readLong(): number {\n        this.check();\n        const temp = tempTypedBuffer.long;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readUlong(): number {\n        this.check();\n        const temp = tempTypedBuffer.ulong;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readFloat(): number {\n        this.check();\n        const temp = tempTypedBuffer.float;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readDouble(): number {\n        this.check();\n        const temp = tempTypedBuffer.double;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readBoolean(): boolean {\n        this.check();\n        return Boolean(this.readBuffer[this.readerCursor++]);\n    }\n    set(source: string, start = 0, end = -1): void {\n        this.writerCursor = 0;\n        const dst = JSON.parse(source);\n\n        let dstChecked = Array.isArray(dst) ? dst : [];\n        if (end < 0) {\n            end += dstChecked.length;\n        }\n        this.readerStart = this.readerCursor = start;\n        this.readerEnd = end;\n        this.readBuffer = dstChecked;\n    }\n\n    writeInt(source: number): this {\n        const temp = tempTypedBuffer.int;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeUint(source: number): this {\n        const temp = tempTypedBuffer.uint;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeShort(source: number): this {\n        const temp = tempTypedBuffer.short;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeUshort(source: number): this {\n        const temp = tempTypedBuffer.ushort;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeLong(source: number): this {\n        const temp = tempTypedBuffer.long;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeUlong(source: number): this {\n        const temp = tempTypedBuffer.ulong;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeFloat(source: number): this {\n        const temp = tempTypedBuffer.float;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeDouble(source: number): this {\n        const temp = tempTypedBuffer.double;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeBoolean(source: boolean): this {\n        this.writeBuffer[this.writerCursor++] = source ? 1 : 0;\n        return this;\n    }\n\n    flush(): string {\n        this.writeBuffer.length = this.writerCursor;\n        const outValue = JSON.stringify(this.writeBuffer);\n        this.reset();\n        return outValue;\n    }\n\n    hasNext(): boolean {\n        return (\n            this.readerCursor < this.readBuffer.length &&\n            this.readerCursor < this.readerEnd\n        );\n    }\n\n    append(other: this): this {\n        this.writeBuffer.push.apply(this.writeBuffer, other.writeBuffer);\n        this.writerCursor += other.writerCursor;\n        other.reset();\n        return this;\n    }\n}\n", "import { RpcType } from \"../comp-schema\";\nimport { DomainOption } from \"../domain\";\nimport {\n    MessageManagerBufferInitializer,\n    MessageManagerBufferType,\n} from \"../message-manager\";\nimport { StringDataBuffer } from \"./string-databuffer\";\n\nconst stringInitializer: MessageManagerBufferInitializer<string> = {\n    newBufferReader(_type: MessageManagerBufferType) {\n        return new StringDataBuffer();\n    },\n\n    newBufferWriter(_type: MessageManagerBufferType) {\n        return new StringDataBuffer();\n    },\n};\n\nexport class StringDomainOption extends DomainOption<string> {\n    constructor(type: RpcType) {\n        super(stringInitializer, type);\n    }\n}\n", "import { Deferred } from \"../src\";\n\nexport interface Receiver {\n    receive(data: any): void;\n}\n\nexport class MockTcp<T> {\n    private _arr: Deferred<T>[] = [];\n    receiver?: Receiver;\n    constructor() {}\n\n    send(defer: Deferred<T>) {\n        this._arr.push(defer);\n    }\n\n    update() {\n        let defer: Deferred<T>;\n        while (this._arr.length >= 1 && (defer = this._arr[0]).isFulfilled()) {\n            this.receiver?.receive(defer.value);\n            this._arr.shift();\n        }\n    }\n}\n\nexport class Net {\n    static delay = 0;\n    static jitter = 0;\n\n    private static _serverTcp = new MockTcp<string | ArrayBuffer>();\n    private static _client1Tcp = new MockTcp<string | ArrayBuffer>();\n    private static _client2Tcp = new MockTcp<string | ArrayBuffer>();\n    static set server(value: Receiver) {\n        this._serverTcp.receiver = value;\n    }\n    static set client1(value: Receiver) {\n        this._client1Tcp.receiver = value;\n    }\n    static set client2(value: Receiver) {\n        this._client2Tcp.receiver = value;\n    }\n\n    static clone(src: string | ArrayBuffer) {\n        return src;\n    }\n\n    static send<T extends string | ArrayBuffer>(obj: T) {\n        return {\n            server: () => {\n                const defer = new Deferred<string | ArrayBuffer>();\n                setTimeout(\n                    () => defer.resolve(this.clone(obj)),\n                    this.delay + Math.random() * this.jitter\n                );\n                this._serverTcp.send(defer);\n            },\n            c1: () => {\n                const defer = new Deferred<string | ArrayBuffer>();\n                setTimeout(\n                    () => defer.resolve(this.clone(obj)),\n                    this.delay + Math.random() * this.jitter\n                );\n                this._client1Tcp.send(defer);\n            },\n            c2: () => {\n                const defer = new Deferred<string | ArrayBuffer>();\n                setTimeout(\n                    () => defer.resolve(this.clone(obj)),\n                    this.delay + Math.random() * this.jitter\n                );\n                this._client2Tcp.send(defer);\n            },\n        };\n    }\n\n    static startUpdate() {\n        setTimeout(() => this.startUpdate());\n        this._serverTcp.update();\n        this._client1Tcp.update();\n        this._client2Tcp.update();\n    }\n}\n", "import {\n    DataType,\n    IComp,\n    NetSerable,\n    NetVar,\n    Role,\n    Rpc,\n    RpcType,\n    RpcVar,\n} from \"../src\";\n\n@NetSerable(\"vec\")\nexport class Vector {\n    @NetVar(DataType.INT)\n    x: number = 0;\n    @NetVar(DataType.INT)\n    y: number = 0;\n}\n\n@NetSerable(\"trans\")\nexport class Transform extends IComp {\n    @NetVar(Vector)\n    pos = new Vector();\n\n    @Rpc(Role.AUTHORITY)\n    serverMove(\n        @RpcVar(DataType.FLOAT) x: number,\n        @RpcVar(DataType.FLOAT) y: number\n    ) {\n        if (x != 0 || y != 0) {\n            console.log(`${x} : ${y}`);\n        }\n        this.pos.x += x;\n        this.pos.y += y;\n    }\n}\n\n@NetSerable(\"view\")\nexport class View extends IComp {\n    @NetVar(DataType.INT)\n    color = 0xffffff;\n\n    @Rpc(Role.AUTHORITY)\n    changeColor(@RpcVar(DataType.INT) inColor: number) {\n        this.color = inColor;\n    }\n\n    private _ctx?: CanvasRenderingContext2D;\n\n    bindCanvas(ctx: CanvasRenderingContext2D) {\n        this._ctx = ctx;\n    }\n\n    renderUpdate() {\n        const trs = this.get(Transform);\n        const view = this.get(View);\n        if (!this._ctx || !trs || !view) return;\n        this.drawBall(this._ctx, trs.pos, \"#\" + view.color.toString(16));\n    }\n\n    protected drawBall(\n        ctx: CanvasRenderingContext2D,\n        pos: Vector,\n        color: string\n    ) {\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.arc(pos.x, pos.y, 26, 0, 2 * Math.PI);\n        ctx.fill();\n    }\n}\n\nexport interface ControlKeyboarnMap {\n    left: string;\n    right: string;\n}\n\nexport interface UserInput {\n    isLeft: boolean;\n    isRight: boolean;\n}\n\n@NetSerable(\"controller\")\nexport class Controller extends IComp {\n    private _input: UserInput = { isLeft: false, isRight: false };\n    private _onKeyDownDel: any;\n    private _onKeyUpDel: any;\n    private _enable = false;\n    controlMap!: ControlKeyboarnMap;\n    getEnable() {\n        return this._enable;\n    }\n\n    setEnable(value: false): void;\n    setEnable(value: true, controlMap: ControlKeyboarnMap): void;\n    setEnable(value: boolean, controlMap?: ControlKeyboarnMap): void {\n        if (this._enable == value) return;\n        this.controlMap = controlMap!;\n        if (value) {\n            window.addEventListener(\"keydown\", this._onKeyDownDel);\n            window.addEventListener(\"keyup\", this._onKeyUpDel);\n        } else {\n            window.removeEventListener(\"keydown\", this._onKeyDownDel);\n            window.removeEventListener(\"keyup\", this._onKeyUpDel);\n        }\n        this._enable = value;\n    }\n\n    constructor() {\n        super();\n        this._onKeyDownDel = this.onKeyDown.bind(this);\n        this._onKeyUpDel = this.onKeyUp.bind(this);\n    }\n\n    onKeyDown(ev: KeyboardEvent) {\n        const map = this.controlMap;\n        if (ev.key === map.left) {\n            this._input.isLeft = true;\n        } else if (ev.key === map.right) {\n            this._input.isRight = true;\n        }\n    }\n\n    onKeyUp(ev: KeyboardEvent) {\n        const map = this.controlMap;\n        if (ev.key === map.left) {\n            this._input.isLeft = false;\n        } else if (ev.key === map.right) {\n            this._input.isRight = false;\n        }\n    }\n\n    renderUpdate() {\n        if (!this._enable) return;\n        const input = this._input;\n        const trans = this.get(Transform)!;\n        const dirX = (input.isLeft ? -1 : 0) + (input.isRight ? 1 : 0);\n        trans.serverMove(dirX * this.domain.renderTime.delta * 100, 0);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
