{"version":3,"file":"bundle.js","sources":["../src/comp-interface.ts","../src/comp-schema.ts","../src/macro.ts","../src/array-map.ts","../src/misc.ts","../src/lib/crc-32/index.js","../src/config.ts","../src/global-record.ts","../src/comp-fixup.ts","../src/comp-decorator.ts","../src/base-dirty-data.ts","../src/builtin-comp/time.ts","../src/message-manager.ts","../src/builtin-comp/role.ts","../src/entity.ts","../src/domain.ts","../src/data/string-databuffer.ts","../src/data/string-domain-option.ts","mock-net.ts","net-comp.ts","index.ts"],"sourcesContent":["import { Entity } from \"./entity\";\n\nexport abstract class IComp {\n    private _entity?: Entity | null;\n    get entity() {\n        return this._entity!;\n    }\n    get domain() {\n        return this._entity!.domain;\n    }\n    get $comps() {\n        return this._entity!.$comps;\n    }\n\n    get<T extends IComp>(ctr: { new (): T }): T | null {\n        return this._entity!.get(ctr);\n    }\n\n    init?(compIdx: number): void;\n    renderUpdate?(compIdx: number): void;\n    logicUpdate?(compIdx: number): void;\n    destroy?(compIdx: number): void;\n}\n","import { NULL_NUM, NULL_STR } from \"./macro\";\n\nexport interface PropSchema {\n    paramIndex: number;\n    propertyKey: string;\n    type: NetFiledType;\n}\n\nexport interface Schema {\n    name: string;\n    hash: number;\n    count: number;\n    props: Record<string, PropSchema>;\n    methods: Record<string, MethodSchema>;\n    raw: PropSchema[];\n}\n\nexport interface NetFiledType {\n    container: number;\n    dataType: DataType;\n    refCtr?: { new (): any };\n}\n\nexport interface MethodSchema {\n    name: string;\n    hash: number;\n    paramTypes: DataType[];\n    paramCount: number;\n    returnType: DataType;\n    returnRefCtr?: any;\n    type: Role;\n}\n\nexport enum RpcType {\n    SERVER,\n    CLIENT,\n}\n\nexport enum Role {\n    AUTHORITY = 1,\n    SIMULATED_PROXY,\n    AUTONMOUS_PROXY,\n}\n\n// prettier-ignore\nexport enum DataType {\n    NONE, I8 = 1, U8, I16, U16, I32, U32, F32, F64,\n    SHORT, ushort, INT, uint, LONG, ulong, FLOAT, DOUBLE, STRING, BOOL\n}\nexport const DataTypeObect = 99 as DataType;\nexport const DataTypeVoid = 98 as DataType;\n\nexport type ComponentConstructor<T = any> = { new (): T } & {\n    __schema__: Schema;\n};\n\nexport function genSchema(o = Object.create(null)): Schema {\n    o.hash = NULL_NUM;\n    o.name = NULL_STR;\n    o.count = 0;\n    o.props = Object.create(null);\n    o.methods = Object.create(null);\n    o.raw = [];\n    return o;\n}\n\nexport function genMethodSchema(o = Object.create(null)): MethodSchema {\n    o.hash = NULL_NUM;\n    o.name = NULL_STR;\n    o.paramCount = 0;\n    o.paramTypes = [];\n    o.returnType = DataTypeVoid;\n    o.type = -1;\n    return o;\n}\n\nexport const SCHEME_KEY = \"__schema__\";\nexport type ISchema = { [SCHEME_KEY]: Schema };\n\nexport function getSchemaByPrototype(prototype: any): Schema | null {\n    if (prototype.hasOwnProperty(SCHEME_KEY)) {\n        return (prototype as any)[SCHEME_KEY];\n    }\n    return null;\n}\n\nexport function getOrCreateScheme(prototype: any): Schema {\n    if (prototype.hasOwnProperty(SCHEME_KEY)) {\n        return (prototype as any)[SCHEME_KEY];\n    }\n\n    const s = genSchema() as Schema;\n    (prototype as any)[SCHEME_KEY] = s;\n    const superCtr = Object.getPrototypeOf(prototype);\n\n    const superSchema = superCtr[SCHEME_KEY] as Schema;\n    if (superSchema) {\n        s.raw.push.apply(s.raw, superSchema.raw);\n    }\n    return s;\n}\n","export const NULL_NUM = -1;\nexport const NULL_STR = \"\";\nexport const NONE_CONTAINER = 0;\nexport const ARR_CONTAINER = 1;\nexport const NULL_FUNC = () => {};\nexport const RPC_MAX_UUID = (1 << 8) - 1;\n","export class ArrayMap<k extends string | number, v> {\n    private _name2indexRecord: Record<k, number>;\n    private _values: (v | null)[];\n\n    constructor(source?: [k, v][]) {\n        this._name2indexRecord = Object.create(null) as Record<k, number>;\n        this._values = [];\n        if (source != null) {\n            this._values.length = source.length;\n            for (let i = 0, len = source.length; i < len; i++) {\n                let [key, value] = source[i];\n                this._name2indexRecord[key] = i;\n                this._values[i] = value;\n            }\n        }\n    }\n\n    get(key: k): v | null {\n        const idx = this.getIndex(key);\n        if (idx > -1) {\n            return this._values[idx];\n        }\n        return null;\n    }\n\n    getIndex(key: k): number {\n        return this._name2indexRecord[key] ?? -1;\n    }\n\n    getByIndex(index: number): v | null {\n        return this._values[index];\n    }\n\n    has(key: k): boolean {\n        return (this._name2indexRecord[key] ?? -1) > -1;\n    }\n\n    set(key: k, value: v) {\n        let index = this._name2indexRecord[key];\n        if (index == null) {\n            index = this._values.length;\n            this._name2indexRecord[key] = index;\n        }\n        this._values[index] = value;\n        return index;\n    }\n\n    delete(key: k): [v | null, number] {\n        const index = this.getIndex(key);\n        if (index < 0) {\n            return [null, -1];\n        }\n        const deleted = [this._values[index], index] as [v | null, number];\n        this._values[index] = null;\n        delete this._name2indexRecord[key];\n\n        return deleted;\n    }\n\n    clear() {\n        this._name2indexRecord = Object.create(null);\n        this._values.length = 0;\n    }\n\n    get values(): v[] {\n        return Array.from(this._values) as v[];\n    }\n\n    get readonlyValues(): readonly v[] {\n        return this._values as readonly v[];\n    }\n}\n","import { DataType } from \"./comp-schema\";\nimport { ISerable } from \"./data/serializable\";\n\nconst MAX_VERSION = (1 << 30) - 1;\nexport function composeVersion(num: number, destoryed: boolean | 0 | 1) {\n    num = num % MAX_VERSION;\n    return destoryed ? -num : num;\n}\n\nexport function decomposeVersion(version: number): [number, boolean] {\n    return [version > 0 ? version : -version, version < 0];\n}\n\nexport function isPrimitive(test: any) {\n    return test !== Object(test);\n}\n\nexport function asSerable<T extends {}>(obj: T): (ISerable & T) | null {\n    if (!obj) return null;\n    // @ts-ignore\n    return typeof obj.ser === \"function\" && typeof obj.deser === \"function\"\n        ? (obj as ISerable & T)\n        : null;\n}\n\nexport function assert(\n    b: boolean | Object | null,\n    errrorClass: new (...args: any[]) => Error\n) {\n    if (!b) {\n        throw new errrorClass();\n    }\n}\n\nexport type ProtoOf<T> = Pick<T, keyof T>;\n\nexport class Deferred<T = unknown> {\n    public promise: Promise<T>;\n\n    private fate: \"resolved\" | \"unresolved\";\n    private state: \"pending\" | \"fulfilled\" | \"rejected\";\n\n    private _resolve!: (value: T | PromiseLike<T>) => void;\n    private _reject!: (reason?: any) => void;\n    private _value: any;\n    public get value() {\n        return this._value;\n    }\n\n    constructor() {\n        this.state = \"pending\";\n        this.fate = \"unresolved\";\n        this.promise = new Promise((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n        });\n        this.promise.then(\n            (res) => {\n                this.state = \"fulfilled\";\n                this._value = res;\n            },\n            () => (this.state = \"rejected\")\n        );\n    }\n\n    resolve(value: T | PromiseLike<T>) {\n        if (this.fate === \"resolved\") {\n            throw \"Deferred cannot be resolved twice\";\n        }\n        this.fate = \"resolved\";\n        this._resolve(value);\n    }\n\n    reject(reason?: any) {\n        if (this.fate === \"resolved\") {\n            throw \"Deferred cannot be resolved twice\";\n        }\n        this.fate = \"resolved\";\n        this._reject(reason);\n    }\n\n    isResolved() {\n        return this.fate === \"resolved\";\n    }\n\n    isPending() {\n        return this.state === \"pending\";\n    }\n\n    isFulfilled() {\n        return this.state === \"fulfilled\";\n    }\n\n    isRejected() {\n        return this.state === \"rejected\";\n    }\n}\n","/* crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*exported CRC32 */\nvar CRC32;\n(function (factory) {\n    /*jshint ignore:start */\n    /*eslint-disable */\n    if (typeof DO_NOT_EXPORT_CRC === \"undefined\") {\n        if (\"object\" === typeof exports) {\n            factory(exports);\n        } else if (\"function\" === typeof define && define.amd) {\n            define(function () {\n                var module = {};\n                factory(module);\n                return module;\n            });\n        } else {\n            factory((CRC32 = {}));\n        }\n    } else {\n        factory((CRC32 = {}));\n    }\n    /*eslint-enable */\n    /*jshint ignore:end */\n})(function (CRC32) {\n    CRC32.version = \"1.2.0\";\n    /* see perf/crc32table.js */\n    /*global Int32Array */\n    function signed_crc_table() {\n        var c = 0,\n            table = new Array(256);\n\n        for (var n = 0; n != 256; ++n) {\n            c = n;\n            c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n            c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n            c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n            c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n            c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n            c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n            c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n            c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n            table[n] = c;\n        }\n\n        return typeof Int32Array !== \"undefined\"\n            ? new Int32Array(table)\n            : table;\n    }\n\n    var T = signed_crc_table();\n    function crc32_bstr(bstr, seed) {\n        var C = seed ^ -1,\n            L = bstr.length - 1;\n        for (var i = 0; i < L; ) {\n            C = (C >>> 8) ^ T[(C ^ bstr.charCodeAt(i++)) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ bstr.charCodeAt(i++)) & 0xff];\n        }\n        if (i === L) C = (C >>> 8) ^ T[(C ^ bstr.charCodeAt(i)) & 0xff];\n        return C ^ -1;\n    }\n\n    function crc32_buf(buf, seed) {\n        if (buf.length > 10000) return crc32_buf_8(buf, seed);\n        var C = seed ^ -1,\n            L = buf.length - 3;\n        for (var i = 0; i < L; ) {\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        }\n        while (i < L + 3) C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        return C ^ -1;\n    }\n\n    function crc32_buf_8(buf, seed) {\n        var C = seed ^ -1,\n            L = buf.length - 7;\n        for (var i = 0; i < L; ) {\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        }\n        while (i < L + 7) C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        return C ^ -1;\n    }\n\n    function crc32_str(str, seed) {\n        var C = seed ^ -1;\n        for (var i = 0, L = str.length, c, d; i < L; ) {\n            c = str.charCodeAt(i++);\n            if (c < 0x80) {\n                C = (C >>> 8) ^ T[(C ^ c) & 0xff];\n            } else if (c < 0x800) {\n                C = (C >>> 8) ^ T[(C ^ (192 | ((c >> 6) & 31))) & 0xff];\n                C = (C >>> 8) ^ T[(C ^ (128 | (c & 63))) & 0xff];\n            } else if (c >= 0xd800 && c < 0xe000) {\n                c = (c & 1023) + 64;\n                d = str.charCodeAt(i++) & 1023;\n                C = (C >>> 8) ^ T[(C ^ (240 | ((c >> 8) & 7))) & 0xff];\n                C = (C >>> 8) ^ T[(C ^ (128 | ((c >> 2) & 63))) & 0xff];\n                C =\n                    (C >>> 8) ^\n                    T[(C ^ (128 | ((d >> 6) & 15) | ((c & 3) << 4))) & 0xff];\n                C = (C >>> 8) ^ T[(C ^ (128 | (d & 63))) & 0xff];\n            } else {\n                C = (C >>> 8) ^ T[(C ^ (224 | ((c >> 12) & 15))) & 0xff];\n                C = (C >>> 8) ^ T[(C ^ (128 | ((c >> 6) & 63))) & 0xff];\n                C = (C >>> 8) ^ T[(C ^ (128 | (c & 63))) & 0xff];\n            }\n        }\n        return C ^ -1;\n    }\n    CRC32.table = T;\n    // $FlowIgnore\n    CRC32.bstr = crc32_bstr;\n    // $FlowIgnore\n    CRC32.buf = crc32_buf;\n    // $FlowIgnore\n    CRC32.str = crc32_str;\n});\n","export const Config = {\n    // Attention! Rollup config dependents the code format!\n    JIT: typeof eval !== \"undefined\" && typeof Function !== \"undefined\",\n};\n","export const hash2compName: Record<number, string> = Object.create(null);\nexport const compName2ctr: Record<string, { new (): any }> =\n    Object.create(null);\nexport const hash2RpcName = {} as Record<number, string>;\n","import { IComp } from \"./comp-interface\";\nimport {\n    DataType,\n    DataTypeObect,\n    ISchema,\n    Schema,\n    SCHEME_KEY,\n} from \"./comp-schema\";\nimport { IDataBufferWriter, IDataBufferReader } from \"./data/serializable\";\nimport { NONE_CONTAINER } from \"./macro\";\n\nexport function serValue(\n    type: DataType,\n    value: any,\n    buffer: IDataBufferWriter\n) {\n    switch (type) {\n        case DataType.INT:\n        case DataType.I32:\n            buffer.writeInt(value);\n            break;\n        case DataType.FLOAT:\n        case DataType.F32:\n            buffer.writeFloat(value);\n            break;\n        case DataType.DOUBLE:\n        case DataType.F64:\n            buffer.writeDouble(value);\n            break;\n        case DataType.BOOL:\n            buffer.writeBoolean(value);\n            break;\n        case DataTypeObect:\n            value.ser(buffer);\n            break;\n    }\n}\n\nexport function genSerValueJit(\n    type: DataType,\n    valueStr: string,\n    bufferStr: string\n) {\n    switch (type) {\n        case DataType.INT:\n        case DataType.I32:\n            return `${bufferStr}.writeInt(${valueStr});`;\n        case DataType.FLOAT:\n        case DataType.F32:\n            return `${bufferStr}.writeFloat(${valueStr});`;\n        case DataType.DOUBLE:\n        case DataType.F64:\n            return `${bufferStr}.writeDouble(${valueStr});`;\n        case DataType.BOOL:\n            return `${bufferStr}.writeBoolean(${valueStr});`;\n        case DataTypeObect:\n            return `${valueStr}.ser(${bufferStr});`;\n    }\n}\n\nexport function genForeachSerValueJit(\n    type: DataType[],\n    from: number,\n    to: number,\n    arrStr: string,\n    bufferStr: string\n) {\n    let outStr = \"\";\n    for (let i = from; i < to; i++) {\n        outStr += genSerValueJit(type[i], `${arrStr}[${i}]`, bufferStr);\n    }\n    return outStr;\n}\n\nexport function deserValue(\n    type: DataType,\n    buffer: IDataBufferReader,\n    ref?: any,\n    refCtr?: any\n) {\n    switch (type) {\n        case DataType.INT:\n        case DataType.I32:\n            return buffer.readInt();\n        case DataType.FLOAT:\n        case DataType.F32:\n            return buffer.readFloat();\n        case DataType.DOUBLE:\n        case DataType.F64:\n            return buffer.readDouble();\n        case DataType.BOOL:\n            return buffer.readBoolean();\n        case DataTypeObect:\n            if (!ref) ref = new refCtr!();\n            ref.deser(buffer);\n            return ref;\n    }\n}\n\nfunction genForeachDeserValueJit(\n    type: DataType[],\n    from: number,\n    to: number,\n    recevierStr: string,\n    bufferStr: string\n) {\n    let outStr = \"\";\n    for (let i = from; i < to; i++) {\n        outStr += genDeserValueJit(type[i], bufferStr, `${recevierStr}[${i}]`);\n    }\n    return outStr;\n}\n\nexport function genDeserValueJit(\n    type: DataType,\n    bufferStr: string,\n    recevierStr: string\n) {\n    switch (type) {\n        case DataType.INT:\n        case DataType.I32:\n            return `${recevierStr} = ${bufferStr}.readInt();`;\n        case DataType.FLOAT:\n        case DataType.F32:\n            return `${recevierStr} = ${bufferStr}.readFloat();`;\n        case DataType.DOUBLE:\n        case DataType.F64:\n            return `${recevierStr} = ${bufferStr}.readDouble();`;\n        case DataType.BOOL:\n            return `${recevierStr} = ${bufferStr}.readBoolean();`;\n        case DataTypeObect:\n            return `\n${recevierStr}.deser(${bufferStr})\n            `;\n    }\n}\n\nexport function fixupSerable(prototype: any) {\n    const schema = prototype[SCHEME_KEY] as Schema;\n    fixedupSerableState(prototype, schema);\n    fixedupSerableRpc(prototype, schema);\n}\n\nexport function fixupSerableWithoutState(prototype: any) {\n    const schema = prototype[SCHEME_KEY] as Schema;\n    fixedupSerableRpc(prototype, schema);\n}\n\nexport function fixedupSerableState(prototype: any, schema: Schema) {\n    prototype.ser = function (\n        this: ISchema & Record<string, any>,\n        buffer: IDataBufferWriter\n    ) {\n        for (let i = 0, count = schema.count; i < count; i++) {\n            const prop = schema.props[i];\n            const type = prop.type;\n            const key = prop.propertyKey;\n            const value = this[key];\n            if (type.container === NONE_CONTAINER) {\n                serValue(type.dataType, value, buffer);\n            } else {\n                buffer.writeInt(value.length);\n                for (let i = 0, j = value.length; i < j; i++) {\n                    serValue(type.dataType, value[i], buffer);\n                }\n            }\n        }\n    };\n    prototype.deser = function (\n        this: ISchema & Record<string, any>,\n        buffer: IDataBufferReader\n    ) {\n        for (let i = 0, count = schema.count; i < count; i++) {\n            const prop = schema.props[i];\n            const type = prop.type;\n            const key = prop.propertyKey;\n            if (type.container === NONE_CONTAINER) {\n                this[key] = deserValue(\n                    type.dataType,\n                    buffer,\n                    this[key],\n                    prop.type.refCtr\n                );\n            } else {\n                if (!(this as any)[key]) {\n                    (this as any)[key] = [];\n                }\n                const arr = (this as any)[key] as any[];\n                arr.length = buffer.readInt();\n                for (let i = 0, j = arr.length; i < j; i++) {\n                    arr[i] = deserValue(\n                        type.dataType,\n                        buffer,\n                        arr[i],\n                        prop.type.refCtr\n                    );\n                }\n            }\n        }\n    };\n}\n\nexport function fixedupSerableRpc(prototype: any, schema: Schema) {\n    const rpcNames = Object.keys(schema.methods);\n    for (let i = 0, len = rpcNames.length; i < len; i++) {\n        const name = rpcNames[i];\n        const ms = schema.methods[name];\n        prototype[\"ser\" + ms.hash] = function (\n            buffer: IDataBufferWriter,\n            args: any[]\n        ) {\n            for (let j = 0, len = ms.paramCount; j < len; j++) {\n                const value = args[j];\n                serValue(ms.paramTypes[j], value, buffer);\n            }\n        };\n        prototype[\"deser\" + ms.hash] = function (buffer: IDataBufferReader) {\n            const args = new Array(ms.paramCount);\n            for (let j = 0, len = ms.paramCount; j < len; j++) {\n                args[j] = deserValue(\n                    ms.paramTypes[j],\n                    buffer,\n                    args[j],\n                    ms.paramTypes[j]\n                );\n            }\n            return args;\n        };\n\n        const privateName = \"__\" + name + \"__\";\n        prototype[privateName] = prototype[name];\n        prototype[name] = function (\n            this: IComp & ISchema & Record<string, Function>,\n            ...args: any[]\n        ) {\n            if (this.entity.role.local == ms.type) {\n                return this[privateName](...args);\n            } else {\n                const domain = this.domain;\n                if (domain == null) {\n                    return Promise.reject(\"Domain is not valid!\");\n                }\n                return domain.readonlyInternalMsgMng.sendRpc(\n                    name,\n                    this,\n                    args,\n                    domain.logicTime.duration\n                );\n            }\n        };\n    }\n}\n\nexport function fixupSerableJIT(prototype: any) {\n    const schema = prototype[SCHEME_KEY] as Schema;\n    fixedupSerableStateJit(prototype, schema);\n    fixedupSerableRpcJit(prototype, schema);\n}\n\nexport function fixupSerableJITWithoutState(prototype: any) {\n    const schema = prototype[SCHEME_KEY] as Schema;\n    fixedupSerableRpcJit(prototype, schema);\n}\n\nexport function fixedupSerableStateJit(prototype: any, schema: Schema) {\n    let serJitStr = \"\";\n    for (let i = 0, count = schema.count; i < count; i++) {\n        const prop = schema.props[i];\n        const type = prop.type;\n        const key = prop.propertyKey;\n        if (type.container === NONE_CONTAINER) {\n            switch (type.dataType) {\n                case DataType.INT:\n                case DataType.I32:\n                    serJitStr += `buffer.writeInt(this.${key});`;\n                    break;\n                case DataType.FLOAT:\n                case DataType.F32:\n                    serJitStr += `buffer.writeFloat(this.${key});`;\n                    break;\n                case DataType.DOUBLE:\n                case DataType.F64:\n                    serJitStr += `buffer.writeDouble(this.${key});`;\n                    break;\n                case DataType.BOOL:\n                    serJitStr += `buffer.writeBoolean(this.${key});`;\n                    break;\n                case DataTypeObect:\n                    serJitStr += `this.${key}.ser(buffer);`;\n                    break;\n            }\n        } else {\n            serJitStr += `buffer.writeInt(this.${key}.length);`;\n            let itemSerFuncStr = \"\";\n            switch (type.dataType) {\n                case DataType.INT:\n                case DataType.I32:\n                    itemSerFuncStr = `buffer.writeInt(arr[i]);`;\n                    break;\n                case DataType.FLOAT:\n                case DataType.F32:\n                    itemSerFuncStr = `buffer.writeFloat(arr[i]);`;\n                    break;\n                case DataType.DOUBLE:\n                case DataType.F64:\n                    itemSerFuncStr = `buffer.writeDouble(arr[i]);`;\n                    break;\n                case DataType.BOOL:\n                    serJitStr += `buffer.writeBoolean(this.${key});`;\n                    break;\n                case DataTypeObect:\n                    itemSerFuncStr = `arr[i].ser(buffer);`;\n                    break;\n            }\n            serJitStr += `\n            var arr = this.${key}\n            for (let i = 0, j = arr.length; i < j; i++) {\n                ${itemSerFuncStr}\n            }\n            `;\n        }\n    }\n    prototype.ser = Function(\"buffer\", serJitStr);\n    let deserJitStr = \"\";\n    for (let i = 0, count = schema.count; i < count; i++) {\n        const prop = schema.props[i];\n        const type = prop.type;\n        const key = prop.propertyKey;\n        if (type.container === NONE_CONTAINER) {\n            switch (type.dataType) {\n                case DataType.INT:\n                case DataType.I32:\n                    deserJitStr += `this.${key}=buffer.readInt();`;\n                    break;\n                case DataType.FLOAT:\n                case DataType.F32:\n                    deserJitStr += `this.${key}=buffer.readFloat();`;\n                    break;\n                case DataType.DOUBLE:\n                case DataType.F64:\n                    deserJitStr += `this.${key}=buffer.readDouble();`;\n                    break;\n                case DataType.BOOL:\n                    deserJitStr += `this.${key}=buffer.readBoolean();`;\n                    break;\n                case DataTypeObect:\n                    deserJitStr += `this.${key}.deser(buffer);`;\n                    break;\n            }\n        } else {\n            deserJitStr += `\n            if(!this.${key})this.${key}=[];\n            var arr=this.${key};\n            arr.length=buffer.readInt();`;\n            let itemSerFuncStr = \"\";\n            switch (type.dataType) {\n                case DataType.INT:\n                case DataType.I32:\n                    itemSerFuncStr = `arr[i]=buffer.readInt();`;\n                    break;\n                case DataType.FLOAT:\n                case DataType.F32:\n                    itemSerFuncStr = `arr[i]=buffer.readFloat();`;\n                    break;\n                case DataType.DOUBLE:\n                case DataType.F64:\n                    itemSerFuncStr = `arr[i]=buffer.readDouble();`;\n                    break;\n                case DataType.BOOL:\n                    deserJitStr += `arr[i]=buffer.readBoolean();`;\n                    break;\n                case DataTypeObect:\n                    itemSerFuncStr = `arr[i].deser(buffer);`;\n                    break;\n            }\n            deserJitStr += `\n            for (let i = 0, j = arr.length; i < j; i++) {\n                ${itemSerFuncStr}\n            }\n            `;\n        }\n    }\n    prototype.deser = Function(\"buffer\", deserJitStr);\n}\n\nexport function fixedupSerableRpcJit(prototype: any, schema: Schema) {\n    const rpcNames = Object.keys(schema.methods);\n    for (let i = 0, len = rpcNames.length; i < len; i++) {\n        const name = rpcNames[i];\n        const ms = schema.methods[name];\n\n        let serJitStr = `\n${genForeachSerValueJit(ms.paramTypes, 0, ms.paramCount, \"args\", \"buffer\")}\n        `;\n        prototype[\"ser\" + ms.hash] = Function(\"buffer\", \"args\", serJitStr);\n\n        let deserJitStr = `\nconst args = new Array(${ms.paramCount});\n${genForeachDeserValueJit(ms.paramTypes, 0, ms.paramCount, \"args\", \"buffer\")}\nreturn args;\n        `;\n        prototype[\"deser\" + ms.hash] = Function(\"buffer\", deserJitStr);\n\n        const privateName = \"__\" + name + \"__\";\n        prototype[privateName] = prototype[name];\n        let jitStr = `\nif (this.entity.role.local == ${ms.type}) {\n    return this[\"${privateName}\"](...args);\n} else {\n    const domain = this.domain;\n    if (domain == null) {\n        return Promise.reject(\"Domain is not valid!\")\n    }\n    return domain.readonlyInternalMsgMng.sendRpc(\n        \"${name}\",\n        this,\n        args,\n        domain.logicTime.duration\n    );\n}\n        `;\n        prototype[name] = Function(\"...args\", jitStr);\n    }\n}\n","import { ProtoOf } from \"./misc\";\nimport { str as hash } from \"./lib/crc-32\";\nimport { Config } from \"./config\";\nimport {\n    PropSchema,\n    DataType,\n    DataTypeObect,\n    getOrCreateScheme,\n    DataTypeVoid,\n    genMethodSchema,\n    Role,\n} from \"./comp-schema\";\nimport { hash2compName, compName2ctr, hash2RpcName } from \"./global-record\";\nimport { ARR_CONTAINER, NONE_CONTAINER } from \"./macro\";\nimport {\n    fixupSerable,\n    fixupSerableJIT,\n    fixupSerableJITWithoutState,\n    fixupSerableWithoutState,\n} from \"./comp-fixup\";\nimport { IComp } from \"./comp-interface\";\n\nclass WhyPropertyKeyHasTheSameError extends Error {}\nfunction sortComponentPropertyKey(a: PropSchema, b: PropSchema): number {\n    const akey = a.propertyKey;\n    const bkey = b.propertyKey;\n    if (akey == bkey) throw new WhyPropertyKeyHasTheSameError();\n    return akey > bkey ? 1 : -1;\n}\n\nexport function NetSerable(name: string, genSerable = true) {\n    return function <T>(target: { new (): T }) {\n        const s = getOrCreateScheme(target.prototype);\n        s.name = name;\n        s.hash = hash(name);\n        hash2compName[s.hash] = s.name;\n        compName2ctr[s.name] = target;\n\n        s.count = s.raw.length;\n        if (s.count > 0) {\n            s.raw.sort(sortComponentPropertyKey);\n            for (let paramIndex = 0; paramIndex < s.count; paramIndex++) {\n                const v = s.raw[paramIndex];\n                v.paramIndex = paramIndex;\n                s.props[paramIndex] = v;\n                s.props[v.propertyKey as string] = v;\n            }\n        }\n\n        if (genSerable) {\n            if (Config.JIT) {\n                fixupSerableJIT(target.prototype);\n            } else {\n                fixupSerable(target.prototype);\n            }\n        } else {\n            if (Config.JIT) {\n                fixupSerableJITWithoutState(target.prototype);\n            } else {\n                fixupSerableWithoutState(target.prototype);\n            }\n        }\n    };\n}\n\nexport type DataTypeMappingPrimitive = {\n    [DataType.NONE]: never;\n    [DataType.INT]: number;\n    [DataType.LONG]: number;\n    [DataType.FLOAT]: number;\n    [DataType.DOUBLE]: number;\n    [DataType.SHORT]: number;\n    [DataType.I8]: number;\n    [DataType.U8]: number;\n    [DataType.I16]: number;\n    [DataType.U16]: number;\n    [DataType.I32]: number;\n    [DataType.U32]: number;\n    [DataType.F32]: number;\n    [DataType.F64]: number;\n    [DataType.STRING]: string;\n    [DataType.BOOL]: boolean;\n};\n\nexport function NetVar<DT extends number, R>(type: DT | { new (): R }) {\n    return function <PK extends string | symbol>(\n        t: ProtoOf<Record<PK, DataTypeMappingPrimitive[DT] & R>>,\n        propertyKey: PK\n    ) {\n        const s = getOrCreateScheme(t as any);\n        s.raw.push({\n            paramIndex: -1,\n            propertyKey: String(propertyKey),\n            type: {\n                container: NONE_CONTAINER,\n                dataType: typeof type === \"number\" ? type : DataTypeObect,\n                refCtr: typeof type === \"number\" ? undefined : type,\n            },\n        });\n    };\n}\n\nexport function NetArr<DT extends number, R>(type: DT | { new (): R }) {\n    return function <PK extends string | symbol>(\n        t: ProtoOf<Record<PK, Array<DataTypeMappingPrimitive[DT] & R>>>,\n        propertyKey: PK\n    ) {\n        const s = getOrCreateScheme(t as any);\n        s.raw.push({\n            paramIndex: -1,\n            propertyKey: String(propertyKey),\n            type: {\n                container: ARR_CONTAINER,\n                dataType: typeof type === \"number\" ? type : DataTypeObect,\n                refCtr: typeof type === \"number\" ? undefined : type,\n            },\n        });\n    };\n}\n\ntype RpcReturnTypeMapping<T extends undefined | number, R> = T extends number\n    ? DataTypeMappingPrimitive[T] & R\n    : void;\nexport class Crc32PropertyKeyHashConflict extends Error {}\n\nexport function Rpc<R, RpcReturnType extends undefined | number = undefined>(\n    type: Role,\n    returnType?: RpcReturnType | { new (): R }\n) {\n    return function <PropKey extends string>(\n        t: IComp &\n            ProtoOf<\n                Record<\n                    PropKey,\n                    (\n                        ...args: any[]\n                    ) => void | Promise<RpcReturnTypeMapping<RpcReturnType, R>>\n                >\n            >,\n        propertyKey: PropKey\n    ): void {\n        // gen schema\n        const s = getOrCreateScheme(t);\n        if (!s.methods[propertyKey]) {\n            s.methods[propertyKey] = genMethodSchema();\n        }\n        const ms = s.methods[propertyKey];\n        ms.hash = hash(propertyKey);\n        ms.name = propertyKey;\n        ms.type = type;\n        if (hash2RpcName[ms.hash] && hash2RpcName[ms.hash] != ms.name) {\n            throw new Crc32PropertyKeyHashConflict();\n        }\n        hash2RpcName[ms.hash] = ms.name;\n        if (typeof returnType === \"undefined\") {\n            ms.returnType = DataTypeVoid;\n        } else {\n            ms.returnType =\n                typeof returnType === \"number\" ? returnType : DataTypeObect;\n            ms.returnRefCtr =\n                typeof returnType === \"number\" ? undefined : returnType;\n        }\n\n        ms.paramCount = ms.paramTypes.length;\n        for (let i = 0, len = ms.paramCount; i < len; i++) {\n            if (!ms.paramTypes[i]) {\n                console.warn(\n                    `[Netcode]Rpc function ${propertyKey} at paramIndex(${i}) set the default type DataType.double`\n                );\n                ms.paramTypes[i] = DataType.DOUBLE;\n            }\n        }\n    };\n}\n\nexport function RpcVar(type: DataType) {\n    return function (\n        t: IComp,\n        propertyKey: string,\n        parameterIndex: number\n    ): void {\n        const s = getOrCreateScheme(t);\n        if (!s.methods[propertyKey]) {\n            s.methods[propertyKey] = genMethodSchema();\n        }\n        const ms = s.methods[propertyKey];\n        ms.paramTypes[parameterIndex] = type;\n    };\n}\n","import { DataType } from \"./comp-schema\";\nimport { NetSerable, NetVar } from \"./comp-decorator\";\nimport {\n    IDataBufferReader,\n    IDataBufferWriter,\n    ISerable,\n} from \"./data/serializable\";\n\nexport abstract class ADirty<T> {\n    abstract get value(): T;\n    abstract set value(inValue: T);\n    abstract dirty: boolean;\n\n    getsetDirty(): boolean {\n        const old = this.dirty;\n        this.dirty = false;\n        return old;\n    }\n}\n\n@NetSerable(\"Int\", false)\nexport class Int extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n    private _value: number = 0;\n    @NetVar(DataType.INT)\n    get value() {\n        return this._value;\n    }\n\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeInt(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readInt();\n        }\n    }\n}\n\n@NetSerable(\"Float\", false)\nexport class Float extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.FLOAT)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeFloat(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readFloat();\n        }\n    }\n}\n\n@NetSerable(\"Long\", false)\nexport class Long extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.LONG)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeLong(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readLong();\n        }\n    }\n}\n\n@NetSerable(\"Uint\", false)\nexport class Uint extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n    private _value: number = 0;\n    @NetVar(DataType.uint)\n    get value() {\n        return this._value;\n    }\n\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeUint(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readUint();\n        }\n    }\n}\n\n@NetSerable(\"Double\", false)\nexport class Double extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.DOUBLE)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeDouble(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readDouble();\n        }\n    }\n}\n\n@NetSerable(\"Ulong\", false)\nexport class Ulong extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.ulong)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeUlong(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readUlong();\n        }\n    }\n}\n\n@NetSerable(\"Short\", false)\nexport class Short extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.SHORT)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeShort(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readShort();\n        }\n    }\n}\n\n@NetSerable(\"Ulong\", false)\nexport class Ushort extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.ushort)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeUshort(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readUshort();\n        }\n    }\n}\n","import { IComp } from \"../comp-interface\";\nimport { DataType } from \"../comp-schema\";\nimport { NetSerable, NetVar } from \"../comp-decorator\";\nimport { Float } from \"../base-dirty-data\";\n\nexport interface ITime {\n    readonly delta: number;\n    readonly duration: number;\n}\n\n@NetSerable(\"logic_time\")\nexport class LogicTimeComp extends IComp implements ITime {\n    @NetVar(Float)\n    $delta = new Float(0);\n\n    get delta() {\n        return this.$delta.value;\n    }\n    set delta(value: number) {\n        this.$delta.value = value;\n    }\n\n    @NetVar(DataType.DOUBLE)\n    duration: number = 0;\n}\n\n@NetSerable(\"render_time\")\nexport class RenderTimeComp extends IComp implements ITime {\n    delta: number = 0;\n    duration: number = 0;\n}\n","import { composeVersion, decomposeVersion, Deferred } from \"./misc\";\nimport {\n    IDataBufferReader,\n    IDataBufferWriter,\n    ISerable,\n    SupportNetDataType,\n} from \"./data/serializable\";\nimport { DataTypeVoid, ISchema, RpcType } from \"./comp-schema\";\nimport { RPC_MAX_UUID } from \"./macro\";\nimport { IComp } from \"./comp-interface\";\n\nexport enum MessageType {\n    UPDATE_COMPONENT,\n    RPC,\n}\n\nexport interface RpcCall {\n    methodName: number;\n    component: any;\n    args: any[];\n}\n\nexport interface MessageEntityInfo {\n    entityId: number;\n    entityVersion: number;\n    destoryed: boolean;\n    compCount: number;\n}\n\nexport interface MessageRpcInfo {\n    entityId: number;\n    compIdx: number;\n    methodHash: number;\n    timestamp: number;\n    uuid: number;\n}\n\nexport interface MessageRpcCallbackInfo {\n    entityId: number;\n    compIdx: number;\n    methodHash: number;\n    uuid: number;\n}\n\nexport interface MessageRpcCallbackRecord {\n    deferred: Deferred;\n    timestamp: number;\n}\nexport class RpcCallbackUuidOutOfRange extends Error {}\n\nexport enum MessageManagerBufferType {\n    // The real net package on sending or receiving.\n    IN_OR_OUT,\n    STATE,\n    RPC,\n    RPC_CALLBACK,\n}\n\nexport interface MessageManagerBufferInitializer<T extends SupportNetDataType> {\n    newBufferReader(bufferType: MessageManagerBufferType): IDataBufferReader<T>;\n    newBufferWriter(bufferType: MessageManagerBufferType): IDataBufferWriter<T>;\n}\n\nexport class MessageManager<T extends SupportNetDataType> {\n    protected _rpcCalls: RpcCall[] = [];\n    protected _rpcDeferred: Map<string, MessageRpcCallbackRecord> = new Map();\n    protected _uuid = 0;\n\n    readonly inbufferReader: IDataBufferReader<T>;\n    readonly statebufferReader: IDataBufferReader<T>;\n    readonly rpcbufferReader: IDataBufferReader<T>;\n    readonly rpcCallbackBufferReader: IDataBufferReader<T>;\n\n    readonly outbufferWriter: IDataBufferWriter<T>;\n    readonly statebufferWriter: IDataBufferWriter<T>;\n    readonly rpcbufferWriter: IDataBufferWriter<T>;\n    readonly rpcCallbackBufferWriter: IDataBufferWriter<T>;\n\n    constructor(initializer: MessageManagerBufferInitializer<T>) {\n        this.inbufferReader = initializer.newBufferReader(\n            MessageManagerBufferType.IN_OR_OUT\n        );\n        this.statebufferReader = initializer.newBufferReader(\n            MessageManagerBufferType.STATE\n        );\n        this.rpcbufferReader = initializer.newBufferReader(\n            MessageManagerBufferType.RPC\n        );\n        this.rpcCallbackBufferReader = initializer.newBufferReader(\n            MessageManagerBufferType.RPC_CALLBACK\n        );\n\n        this.outbufferWriter = initializer.newBufferWriter(\n            MessageManagerBufferType.IN_OR_OUT\n        );\n        this.statebufferWriter = initializer.newBufferWriter(\n            MessageManagerBufferType.STATE\n        );\n        this.rpcbufferWriter = initializer.newBufferWriter(\n            MessageManagerBufferType.RPC\n        );\n        this.rpcCallbackBufferWriter = initializer.newBufferWriter(\n            MessageManagerBufferType.RPC_CALLBACK\n        );\n    }\n\n    private _getUuid() {\n        if (this._uuid >= RPC_MAX_UUID) {\n            console.warn(\n                \"[MessageManager#_getUuid]UUID is great than \" + RPC_MAX_UUID\n            );\n            return 0;\n        }\n        return ++this._uuid;\n    }\n\n    startSendEntityAndComps() {\n        this.statebufferWriter.reset();\n    }\n\n    sendEntity(\n        entityId: number,\n        entityVersion: number,\n        compsLen: number,\n        toDestroy: boolean\n    ) {\n        const buf = this.statebufferWriter;\n        // entity id\n        buf.writeInt(entityId);\n        // entity compuse version\n        buf.writeInt(composeVersion(entityVersion, toDestroy));\n        // component count\n        buf.writeInt(compsLen);\n    }\n\n    sendComp(compIdx: number, comp: ISerable & IComp & ISchema): boolean {\n        const buf = this.statebufferWriter;\n        // msg type -> compoent\n\n        // comp index\n        buf.writeInt(compIdx);\n        // comp hash\n        buf.writeLong(comp.__schema__.hash);\n        // ser comp\n        comp.ser(buf);\n\n        return true;\n    }\n\n    endSendEntityAndComps() {\n        this.statebufferWriter.reset();\n    }\n\n    startRecvEntityAndComps() {}\n\n    recvEntity(): MessageEntityInfo | null {\n        const buf = this.statebufferReader;\n        if (!buf.hasNext()) return null;\n        // entity id\n        const entityId = buf.readInt();\n        // entity compuse version\n        const [entityVersion, toDestory] = decomposeVersion(buf.readInt());\n        // component length\n        const compCount = buf.readInt();\n        return {\n            entityId,\n            entityVersion,\n            destoryed: toDestory,\n            compCount,\n        };\n    }\n\n    recvCompHeader() {\n        const buf = this.statebufferReader;\n\n        // comp index\n        const compIdx = buf.readInt();\n        // comp hash\n        const hash = buf.readLong();\n        // deser comp\n        return {\n            compIdx,\n            hash,\n        };\n    }\n\n    recvCompBody(comp: ISerable & IComp) {\n        const buf = this.statebufferReader;\n        comp.deser(buf);\n    }\n\n    endRecvEntityAndComps() {}\n\n    // callRpc(methodName: number, component: any, ...args: any) {\n    //     this._rpcCalls.push({ methodName, component, args });\n    // }\n\n    startSendRpc() {\n        // this.rpcbuffer.reset();\n    }\n\n    sendRpc(\n        methodName: string,\n        component: IComp & ISchema & Record<string, Function>,\n        params: any[],\n        timestamp: number\n    ) {\n        const uuid = this._getUuid();\n        if (uuid < 0) {\n            return Promise.reject(new RpcCallbackUuidOutOfRange());\n        }\n\n        const comp = component;\n        const entity = comp.entity;\n        const compIdx = entity.indexOf(component);\n        const buf = this.rpcbufferWriter;\n        // schema\n        const s = comp.__schema__;\n        // method schema\n        const ms = s.methods[methodName];\n        // entity id\n        buf.writeInt(entity.id);\n        // comp index\n        buf.writeUshort(compIdx);\n        // method hash\n        buf.writeLong(ms.hash);\n        // timestamp\n        buf.writeLong(timestamp);\n        // uuid\n        buf.writeUint(uuid);\n        // param\n        component[\"ser\" + ms.hash](buf, params);\n        if (ms.returnType == DataTypeVoid) {\n            return;\n        } else {\n            const deferred = new Deferred();\n            this._rpcDeferred.set(\n                `${entity.id}|${compIdx}|${ms.hash}|${uuid}`,\n                {\n                    deferred,\n                    timestamp,\n                }\n            );\n            return deferred.promise;\n        }\n    }\n\n    endSendRpc() {\n        this.rpcbufferWriter.reset();\n        this._uuid = 0;\n    }\n\n    startRecvRpc() {}\n\n    recvRpc(): MessageRpcInfo | null {\n        if (!this.rpcbufferReader.hasNext()) return null;\n        const buf = this.rpcbufferReader;\n        // entity id\n        const entityId = buf.readInt();\n        // comp index\n        const compIdx = buf.readUshort();\n        // method hash\n        const methodHash = buf.readLong();\n        // timestamp\n        const timestamp = buf.readLong();\n        // uuid\n        const uuid = buf.readUint();\n        return { entityId, compIdx, methodHash, timestamp, uuid };\n    }\n\n    endRecvRpc() {}\n\n    startSendRpcCallback() {}\n\n    sendRpcCallback(info: MessageRpcInfo) {\n        const buf = this.rpcCallbackBufferWriter;\n        buf.writeInt(info.entityId);\n        buf.writeUshort(info.compIdx);\n        buf.writeLong(info.methodHash);\n        buf.writeUint(info.uuid);\n    }\n\n    endSendRpcCallback() {\n        this.rpcCallbackBufferWriter.reset();\n    }\n\n    startRecvRpcCallback() {}\n\n    recvRpcCallback(): MessageRpcCallbackInfo | null {\n        if (!this.rpcCallbackBufferReader.hasNext()) return null;\n        const buf = this.rpcCallbackBufferReader;\n        const entityId = buf.readInt();\n        const compIdx = buf.readUshort();\n        const methodHash = buf.readLong();\n        const uuid = buf.readUint();\n        return { entityId, compIdx, methodHash, uuid };\n    }\n\n    endRecvRpcCallback() {}\n\n    getRpcCallbackRecord(param: MessageRpcCallbackInfo) {\n        return this._rpcDeferred.get(\n            `${param.entityId}|${param.compIdx}|${param.methodHash}|${param.uuid}`\n        );\n    }\n}\n","import { IComp } from \"../comp-interface\";\nimport { Short } from \"../base-dirty-data\";\nimport { NetSerable, NetVar, Rpc } from \"../comp-decorator\";\nimport {\n    IDataBufferReader,\n    IDataBufferWriter,\n    ISerable,\n} from \"../data/serializable\";\nimport { DataType, Role, RpcType } from \"../comp-schema\";\n\n@NetSerable(\"role\", false)\nexport class RoleComp extends IComp implements ISerable {\n    //#region property\n    @NetVar(Short)\n    $local = new Short(Role.AUTHORITY);\n    get local(): Role {\n        return this.$local.value;\n    }\n    // set local(value: Role) {\n    //     this.$local.value = value;\n    // }\n\n    @NetVar(Short)\n    $remote = new Short(Role.SIMULATED_PROXY);\n    get remote(): Role {\n        return this.$remote.value;\n    }\n    set remote(value: Role) {\n        this.$remote.value = value;\n    }\n    //#endregion\n\n    //#region interface ISerable implement\n    ser(buffer: IDataBufferWriter<any>): void {\n        this.$local.ser(buffer);\n        this.$remote.ser(buffer);\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.$remote.deser(buffer);\n        this.$local.deser(buffer);\n    }\n    //#endregion\n\n    @Rpc(Role.AUTHORITY, DataType.BOOL)\n    async upgrade() {\n        if (\n            this.local == Role.AUTHORITY &&\n            this.remote != Role.AUTONMOUS_PROXY\n        ) {\n            this.remote = Role.AUTONMOUS_PROXY;\n            return true;\n        }\n        return false;\n    }\n\n    @Rpc(Role.AUTHORITY, DataType.BOOL)\n    async downgrade() {\n        if (\n            this.local == Role.AUTHORITY &&\n            this.remote != Role.SIMULATED_PROXY\n        ) {\n            this.remote = Role.SIMULATED_PROXY;\n            return true;\n        }\n        return false;\n    }\n\n    init() {\n        const type = this.domain.option.type;\n        this.$local.value =\n            type === RpcType.SERVER ? Role.AUTHORITY : Role.SIMULATED_PROXY;\n        this.$remote.value =\n            type === RpcType.SERVER ? Role.SIMULATED_PROXY : Role.AUTHORITY;\n    }\n}\n","import { RoleComp } from \"./builtin-comp/\";\nimport { ISchema } from \"./comp-schema\";\nimport type { Domain } from \"./domain\";\nimport { compName2ctr } from \"./global-record\";\nimport { IComp } from \"./comp-interface\";\nimport { NULL_NUM } from \"./macro\";\n\nclass ComponentHasNotDecorated extends Error {}\n/**\n * The unit in a network.It can manager some component.\n * It include id and version, plz don't modify then if you are not undersanding!\n * It is sealed, PLZ NOT implement!!!\n * @example\n ```js\n // Must do decoration\n @NetComp\n class ViewComponent {\n     @Param(DataType.bool)\n     active = false\n }\n const ent = new Entity();\n ent.add(ViewComponent);\n ent.has(ViewComponent);\n ent.get(ViewComponent);\n Domain.ref(ent);\n ent.rm(ViewComponent);\n ```\n */\nexport class Entity<ProxyObj extends Object = any> {\n    private _id;\n    get id() {\n        return this._id;\n    }\n    private _version;\n    get version() {\n        return this._version;\n    }\n    private _domain?: Domain;\n    get domain() {\n        return this._domain!;\n    }\n    static Event = {\n        REG_ENTITY: \"reg-entity\",\n        UNREG_ENTITY: \"unreg-entity\",\n    };\n\n    $comps = new Proxy<ProxyObj>(this as any, {\n        get(target: any, p, receiver) {\n            return target.get(compName2ctr[String(p)]);\n        },\n    });\n\n    private readonly _compMap: Map<number, IComp | IComp[]>;\n    private readonly _comps: IComp[];\n    get comps(): readonly IComp[] {\n        return this._comps;\n    }\n\n    readonly role: RoleComp;\n\n    constructor(..._comps: IComp[]) {\n        this._id = NULL_NUM;\n        this._version = NULL_NUM;\n        this._compMap = new Map();\n        this.role = new RoleComp();\n\n        this._comps = [this.role, ..._comps];\n        for (let i = 0, len = this._comps.length; i < len; i++) {\n            this._initComp(this._comps[i] as IComp & ISchema);\n        }\n    }\n\n    static NewWithoutRole(..._comps: IComp[]) {\n        const ent = Object.create(Entity.prototype);\n\n        ent._id = NULL_NUM;\n        ent._version = NULL_NUM;\n        ent.$comps = new Proxy<any>(ent, {\n            get(target: any, p, receiver) {\n                return target.get(compName2ctr[String(p)]);\n            },\n        });\n        ent._compMap = new Map();\n        ent.role = _comps[0];\n\n        ent._comps = _comps;\n        for (let i = 0, len = ent._comps.length; i < len; i++) {\n            ent._initComp(ent._comps[i] as IComp & ISchema);\n        }\n        return ent;\n    }\n\n    protected _initComp(c: ISchema & IComp) {\n        const map = this._compMap;\n        c[\"_entity\"] = this;\n        if (!c.__schema__ || c.__schema__.hash == NULL_NUM) {\n            throw new ComponentHasNotDecorated(\"Component must use @NetComp\");\n        }\n        const hash = c.__schema__.hash;\n        if (map.has(hash)) {\n            map.set(hash, [map.get(hash) as any, c]);\n        } else {\n            map.set(hash, c);\n        }\n    }\n\n    toString() {\n        return `Entity: id=${this._id},version=${this._version}`;\n    }\n\n    get<T extends IComp>(ctr: { new (): T }): T | null {\n        const schema = ctr.prototype.__schema__;\n        if (!(schema && schema.name)) {\n            console.error(\"Componrnt must use @NetComp\");\n            return null;\n        }\n\n        if (!this._compMap.has(schema.hash)) return null;\n        const insOrArr = this._compMap.get(schema.hash)!;\n        if (!Array.isArray(insOrArr)) return insOrArr as T;\n        return insOrArr[insOrArr.length - 1] as T;\n    }\n\n    mget<T extends IComp>(ctr: { new (): T }): T[] {\n        const schema = ctr.prototype.__schema__;\n        if (!(schema && schema.name)) {\n            console.error(\"Componrnt must use @NetComp\");\n            return [];\n        }\n\n        if (!this._compMap.has(schema.hash)) return [];\n        const insOrArr = this._compMap.get(schema.hash)!;\n        if (!Array.isArray(insOrArr)) return [insOrArr as T];\n        return insOrArr as T[];\n    }\n\n    has(ctr: { new (): any }): boolean {\n        const schema = ctr.prototype.__schema__;\n        if (!(schema && schema.name)) {\n            console.error(\"Componrnt must use @NetComp\");\n            return false;\n        }\n        return this._compMap.has(schema.hash);\n    }\n\n    indexOf(ins: IComp) {\n        if (ins == null) return -1;\n        return this._comps.indexOf(ins);\n    }\n\n    private _init() {\n        for (let i = 0, len = this._comps.length; i < len; i++) {\n            const c = this._comps[i];\n            c.init && c.init(i);\n        }\n    }\n\n    private _renderUpdate() {\n        for (let i = 0, len = this._comps.length; i < len; i++) {\n            const c = this._comps[i];\n            c.renderUpdate && c.renderUpdate(i);\n        }\n    }\n\n    private _logicUpdate() {\n        for (let i = 0, len = this._comps.length; i < len; i++) {\n            const c = this._comps[i];\n            c.logicUpdate && c.logicUpdate(i);\n        }\n    }\n\n    private _destroy() {\n        for (let i = 0, len = this._comps.length; i < len; i++) {\n            const c = this._comps[i];\n            c.destroy && c.destroy(i);\n            c[\"_entity\"] = null;\n        }\n        this._comps.length = 0;\n        this._compMap.clear();\n    }\n}\n","import { LogicTimeComp, RenderTimeComp } from \"./builtin-comp\";\nimport {\n    DataTypeVoid,\n    ISchema,\n    RpcType,\n    Role,\n    SCHEME_KEY,\n} from \"./comp-schema\";\nimport { SupportNetDataType } from \"./data/serializable\";\nimport { Entity } from \"./entity\";\nimport { IComp } from \"./comp-interface\";\nimport { NULL_NUM } from \"./macro\";\nimport {\n    MessageEntityInfo,\n    MessageManager,\n    MessageManagerBufferInitializer,\n    MessageRpcCallbackInfo,\n    MessageRpcInfo,\n} from \"./message-manager\";\nimport { asSerable, assert } from \"./misc\";\nimport { ArrayMap } from \"./array-map\";\nimport { compName2ctr, hash2compName, hash2RpcName } from \"./global-record\";\nimport { deserValue, serValue } from \"./comp-fixup\";\nimport { str as hash } from \"./lib/crc-32\";\n\nclass EntityNotValidError extends Error {}\nclass EntityRepeatRegisteredError extends Error {}\nclass EntityGroupOutOfRangeYouCanOpenAutoResize extends Error {}\nclass DomainDuplicated extends Error {}\nclass DomainLengthLimit extends Error {}\nclass DomainCompCountNotMatch extends Error {}\n\nexport type DomainConstructorParamters<TT extends new (...args: any) => any> =\n    TT extends new (_: any, ...args: infer P) => Domain ? P : never;\n\nexport class DomainOption<T extends SupportNetDataType = string> {\n    capacity: number = 50;\n    autoResize: boolean = true;\n    fixedTimeSec: number = 0.2;\n\n    constructor(\n        readonly initializer: MessageManagerBufferInitializer<T>,\n        readonly type: RpcType\n    ) {}\n}\n\nexport class Domain<T extends SupportNetDataType = any> {\n    private static _name2domainMap: ArrayMap<string, Domain> = new ArrayMap();\n    //#region static methods\n    static Create<T extends SupportNetDataType = any>(\n        name: string,\n        option: DomainOption<T>,\n        uuid: number = hash(name)\n    ) {\n        if (this._name2domainMap.has(name)) {\n            throw new DomainDuplicated(name);\n        }\n        const news: Domain<T> = new Domain(name, option, uuid);\n        const domainIndex = this._name2domainMap.set(name, news);\n        news._index = domainIndex;\n        return news;\n    }\n\n    static Get<T extends SupportNetDataType>(name: string = \"main\") {\n        return this._name2domainMap.get(name) as Domain<T>;\n    }\n\n    static GetByEntity(entity: Entity) {\n        const domainIndex = entity.id;\n        const domain = this._name2domainMap.values[domainIndex];\n        if (domain.isValid(entity)) {\n            return domain;\n        }\n        return null;\n    }\n\n    static Clear() {\n        this._name2domainMap.clear();\n    }\n    //#endregion\n\n    //#region member variables\n    get index() {\n        return this._index;\n    }\n    private _index = -1;\n    private _entities: (Entity | null)[];\n    private _entitiesLength = 0;\n    public get entities() {\n        return this._entities;\n    }\n    public get length() {\n        return this._entitiesLength;\n    }\n    private _entityVersion: number[];\n    private _destroyEntityId: number[];\n    private _entityIdCursor = 0;\n    private _internalMsgMng: MessageManager<T>;\n    public readonly readonlyInternalMsgMng!: MessageManager<T>;\n\n    private _fixedSecAccumulator = 0;\n    public readonly time: Entity;\n    public readonly logicTime: LogicTimeComp;\n    public readonly renderTime: RenderTimeComp;\n\n    private readonly _option: DomainOption<T>;\n\n    get option() {\n        return this._option as Required<Readonly<DomainOption<T>>>;\n    }\n    //#endregion\n    protected constructor(\n        readonly name: string,\n        option: DomainOption<T>,\n        readonly uuid: number\n    ) {\n        this._option = option;\n        this._entities = new Array<Entity>(option.capacity);\n        this._entityVersion = new Array<number>(option.capacity);\n        this._entityVersion.fill(0);\n        this._destroyEntityId = new Array<number>();\n        this._internalMsgMng = new MessageManager(option.initializer);\n        this.readonlyInternalMsgMng = this._internalMsgMng;\n\n        this.logicTime = new LogicTimeComp();\n        this.renderTime = new RenderTimeComp();\n        this.time = new Entity(this.logicTime, this.renderTime);\n        this.logicTime.delta = this.option.fixedTimeSec;\n\n        this.reg(this.time);\n    }\n\n    //#region public methods\n    reg(entity: Entity) {\n        if (this.isValid(entity))\n            throw new EntityRepeatRegisteredError(entity.toString());\n        if (this._entityIdCursor == this._option.capacity) {\n            if (this._option.autoResize) {\n                this.resize(Math.ceil(this._option.capacity * 1.5));\n            } else\n                throw new EntityGroupOutOfRangeYouCanOpenAutoResize(\n                    `Domain: capacity: ${this._option.capacity}; ` +\n                        entity.toString()\n                );\n        }\n\n        const id = this._getEntityId();\n        const version = this._entityVersion[id];\n        this._reg(entity, id, version);\n        entity[\"_init\"]();\n    }\n\n    hasReg(entity: Entity) {\n        return this.isValid(entity);\n    }\n\n    unregWithoutValidation(entity: Entity) {\n        const index = entity.id;\n        this._entityVersion[index]++;\n        this._unreg(entity);\n        this._destroyEntityId.push(entity.id);\n        this._entities[index] = null;\n        entity[\"_destroy\"]();\n    }\n\n    unreg(entity: Entity) {\n        if (!this.isValid(entity))\n            throw new EntityNotValidError(entity.toString());\n        this.unregWithoutValidation(entity);\n    }\n\n    get(id: number) {\n        return this._entities[id];\n    }\n\n    resize(newSize: number) {\n        const oldSize = this._option.capacity;\n        this._entities.length = newSize;\n        this._entityVersion.length = newSize;\n        this._entityVersion.fill(0, oldSize, newSize);\n        this._option.capacity = newSize;\n    }\n\n    isValid(entity: Entity) {\n        return (\n            entity.id != NULL_NUM &&\n            entity.version != NULL_NUM &&\n            entity.version == this._entityVersion[entity.id]\n        );\n    }\n\n    asData(): T {\n        const isServer = this._option.type == RpcType.SERVER;\n        const outBuf = this._internalMsgMng.outbufferWriter;\n        const stateBuf = this._internalMsgMng.statebufferWriter;\n        const rpcBuf = this._internalMsgMng.rpcbufferWriter;\n        const rpcCbBuf = this._internalMsgMng.rpcCallbackBufferWriter;\n\n        outBuf.reset();\n        outBuf.writeInt(this.uuid).writeBoolean(isServer);\n\n        if (isServer) {\n            this._internalMsgMng.startSendEntityAndComps();\n            this._internalMsgMng.startSendRpc();\n            this._internalMsgMng.startSendRpcCallback();\n\n            this._serEntityAndComps();\n            const stateLen = stateBuf.writerCursor;\n            const rpcLen = rpcBuf.writerCursor;\n            const rpcCbLen = rpcCbBuf.writerCursor;\n\n            outBuf\n                .writeUlong(stateLen)\n                .writeUlong(rpcLen)\n                .writeUlong(rpcCbLen)\n                .append(stateBuf)\n                .append(rpcBuf)\n                .append(rpcCbBuf);\n\n            this._internalMsgMng.endSendEntityAndComps();\n            this._internalMsgMng.endSendRpc();\n            this._internalMsgMng.endSendRpcCallback();\n        } else {\n            this._internalMsgMng.startSendRpc();\n            this._internalMsgMng.startSendRpcCallback();\n\n            const rpcLen = rpcBuf.writerCursor;\n            const rpcCbLen = rpcCbBuf.writerCursor;\n\n            outBuf\n                .writeUlong(rpcLen)\n                .writeUlong(rpcCbLen)\n                .append(rpcBuf)\n                .append(rpcCbBuf);\n\n            this._internalMsgMng.endSendRpc();\n            this._internalMsgMng.endSendRpcCallback();\n        }\n\n        return outBuf.flush();\n    }\n\n    setData(source: T) {\n        const inBuf = this._internalMsgMng.inbufferReader;\n        const stateBuf = this._internalMsgMng.statebufferReader;\n        const rpcBuf = this._internalMsgMng.rpcbufferReader;\n        const rpcCbBuf = this._internalMsgMng.rpcCallbackBufferReader;\n\n        inBuf.set(source);\n        const uuid = inBuf.readInt();\n        const isServer = inBuf.readBoolean();\n\n        if (isServer) {\n            const stateLen = inBuf.readUlong();\n            const rpcLen = inBuf.readUlong();\n            const rpcCbLen = inBuf.readUlong();\n\n            const stateStart = inBuf.readerCursor;\n            const stateEnd = stateStart + stateLen;\n\n            const rpcStart = stateEnd;\n            const rpcEnd = rpcStart + rpcLen;\n\n            const rpcCbStart = rpcEnd;\n            const rpcCbEnd = rpcCbStart + rpcCbLen;\n\n            stateBuf.set(source, stateStart, stateEnd);\n            rpcBuf.set(source, rpcStart, rpcEnd);\n            rpcCbBuf.set(source, rpcCbStart, rpcCbEnd);\n\n            this._internalMsgMng.startRecvEntityAndComps();\n            this._derEntityAndComps();\n            this._internalMsgMng.endRecvEntityAndComps();\n\n            this._internalMsgMng.startRecvRpc();\n            this._deserRpcs();\n            this._internalMsgMng.endRecvRpc();\n\n            this._internalMsgMng.startRecvRpcCallback();\n            this._deserRpcCallbacks();\n            this._internalMsgMng.endRecvRpcCallback();\n        } else {\n            const rpcLen = inBuf.readUlong();\n            const rpcCbLen = inBuf.readUlong();\n\n            const rpcStart = inBuf.readerCursor;\n            const rpcEnd = rpcStart + rpcLen;\n\n            const rpcCbStart = rpcEnd;\n            const rpcCbEnd = rpcCbStart + rpcCbLen;\n\n            rpcBuf.set(source, rpcStart, rpcEnd);\n            rpcCbBuf.set(source, rpcCbStart, rpcCbEnd);\n\n            this._internalMsgMng.startRecvRpc();\n            this._deserRpcs();\n            this._internalMsgMng.endRecvRpc();\n\n            this._internalMsgMng.startRecvRpcCallback();\n            this._deserRpcCallbacks();\n            this._internalMsgMng.endRecvRpcCallback();\n        }\n    }\n\n    update(dtSec: number) {\n        this._fixedSecAccumulator += dtSec;\n        const fixedDeltaTime = this.logicTime.delta;\n        while (this._fixedSecAccumulator > fixedDeltaTime) {\n            this._fixedSecAccumulator -= fixedDeltaTime;\n            this.logicTime.duration += fixedDeltaTime;\n            for (let i = 0, len = this._entitiesLength; i < len; i++) {\n                const ent = this._entities[i];\n                if (!ent) continue;\n                if (\n                    ent.role.local === Role.AUTHORITY ||\n                    ent.role.local === Role.AUTONMOUS_PROXY\n                ) {\n                    ent[\"_logicUpdate\"]();\n                }\n            }\n        }\n\n        this.renderTime.delta = dtSec;\n        this.renderTime.duration += dtSec;\n        for (let i = 0, len = this._entitiesLength; i < len; i++) {\n            const ent = this._entities[i];\n            if (!ent) continue;\n            ent[\"_renderUpdate\"]();\n        }\n    }\n\n    //#endregion\n\n    //#region protected methods\n    protected _reg(entity: Entity, id: number, version: number) {\n        entity[\"_id\"] = id;\n        entity[\"_version\"] = version;\n        entity[\"_domain\"] = this;\n        const index = entity.id;\n        this._entities[index] = entity;\n        if (index >= this._entitiesLength) {\n            this._entitiesLength = index + 1;\n        }\n    }\n\n    protected _unreg(entity: Entity) {\n        entity[\"_id\"] = NULL_NUM;\n        entity[\"_version\"] = NULL_NUM;\n        entity[\"_domain\"] = undefined;\n    }\n\n    protected _serEntityAndComps() {\n        for (let i = 0, len = this._entitiesLength; i < len; i++) {\n            const ent = this._entities[i];\n            if (!ent) {\n                this._internalMsgMng.sendEntity(\n                    i,\n                    this._entityVersion[i],\n                    0,\n                    true\n                );\n                continue;\n            }\n            this._internalMsgMng.sendEntity(\n                ent.id,\n                ent.version,\n                ent.comps.length,\n                false\n            );\n            const comps = ent.comps;\n            for (\n                let compIdx = 0, len = comps.length;\n                compIdx < len;\n                compIdx++\n            ) {\n                const comp = comps[compIdx] as ISchema & IComp;\n                const serableComp = asSerable(comp);\n                if (!serableComp) {\n                    console.warn(\n                        `[Domain#_ser(compIdx: ${compIdx}, entity: ${ent})]comp is not Serable!`\n                    );\n                    continue;\n                }\n                this._internalMsgMng.sendComp(compIdx, serableComp);\n            }\n        }\n    }\n\n    protected _derEntityAndComps() {\n        let params: MessageEntityInfo | null;\n        while ((params = this._internalMsgMng.recvEntity())) {\n            let ent = this._entities[params.entityId];\n            if (\n                ent &&\n                (ent.version != params.entityVersion || params.destoryed)\n            ) {\n                this.unreg(ent);\n                ent = null;\n            }\n            if (!params.destoryed) {\n                ent = ent\n                    ? this._derEntityAndCompsUnderExisted(params, ent)\n                    : this._derEntityAndCompsUnderUnExsited(params);\n            }\n        }\n    }\n\n    protected _derEntityAndCompsUnderExisted(\n        params: MessageEntityInfo,\n        entity: Entity\n    ) {\n        const entComps = entity.comps;\n        assert(params.compCount == entComps.length, DomainCompCountNotMatch);\n        for (let i = 0, len = params.compCount; i < len; i++) {\n            const compHeaderInfo = this._internalMsgMng.recvCompHeader();\n            const comp = asSerable(entComps[compHeaderInfo.compIdx]);\n            if (!comp) continue;\n            this._internalMsgMng.recvCompBody(comp);\n        }\n        return entity;\n    }\n\n    protected _derEntityAndCompsUnderUnExsited(params: MessageEntityInfo) {\n        const compArr = new Array<IComp>(params.compCount);\n        for (let i = 0, len = params.compCount; i < len; i++) {\n            const compHeaderInfo = this._internalMsgMng.recvCompHeader();\n            const compName = hash2compName[compHeaderInfo.hash];\n            const CompCtr = compName2ctr[compName];\n            const comp = new CompCtr();\n            this._internalMsgMng.recvCompBody(comp);\n            compArr[compHeaderInfo.compIdx] = comp;\n        }\n        const e = Entity.NewWithoutRole(...compArr);\n        this.reg(e);\n        return e;\n    }\n\n    protected _deserRpcs() {\n        let param: MessageRpcInfo | null;\n        while ((param = this._internalMsgMng.recvRpc())) {\n            const ent = this.get(param.entityId);\n            if (!ent) continue;\n            const comp = ent.comps[param.compIdx] as IComp &\n                ISchema &\n                Record<string, Function>;\n            if (!comp) continue;\n            const argus = comp[\"deser\" + param.methodHash](\n                this._internalMsgMng.rpcbufferReader\n            );\n            const methodName = hash2RpcName[param.methodHash];\n            const unknown = comp[methodName].apply(comp, argus);\n\n            const s = comp[SCHEME_KEY];\n            const ms = s.methods[methodName];\n            if (ms.returnType != DataTypeVoid) {\n                const w = param!;\n                unknown?.then((result: any) => {\n                    this._internalMsgMng.sendRpcCallback(w);\n                    serValue(\n                        ms.returnType,\n                        result,\n                        this._internalMsgMng.rpcCallbackBufferWriter\n                    );\n                });\n            }\n        }\n    }\n\n    protected _deserRpcCallbacks() {\n        let param: MessageRpcCallbackInfo | null;\n        while ((param = this._internalMsgMng.recvRpcCallback())) {\n            const ent = this.get(param.entityId);\n            if (!ent) continue;\n            const comp = ent.comps[param.compIdx] as IComp &\n                ISchema &\n                Record<string, Function>;\n            if (!comp) continue;\n            const s = comp[SCHEME_KEY];\n            const methodName = hash2RpcName[param.methodHash];\n            const ms = s.methods[methodName];\n            let result: any;\n            if (ms.returnType != DataTypeVoid) {\n                result = deserValue(\n                    ms.returnType,\n                    this._internalMsgMng.rpcCallbackBufferReader,\n                    undefined,\n                    ms.returnRefCtr\n                );\n            }\n            const callbackRecord =\n                this._internalMsgMng.getRpcCallbackRecord(param);\n            if (!callbackRecord) continue;\n            callbackRecord.deferred.resolve(result);\n        }\n    }\n\n    protected _getEntityId() {\n        return this._destroyEntityId.length > 0\n            ? this._destroyEntityId.unshift()\n            : this._entityIdCursor++;\n    }\n    //#endregion\n}\n","import { IDataBufferReader, IDataBufferWriter } from \"./serializable\";\n\nconst tempTypedBuffer = {\n    int: new Int32Array(1),\n    uint: new Uint32Array(1),\n    short: new Int16Array(1),\n    ushort: new Uint16Array(1),\n    long: new Int32Array(1),\n    ulong: new Uint32Array(1),\n    float: new Float32Array(1),\n    double: new Float64Array(1),\n};\n\nexport class StringDataBufferOutOfRange extends Error {}\n\nexport class StringDataBuffer\n    implements IDataBufferWriter<string>, IDataBufferReader<string>\n{\n    public writeBuffer: any[] = [];\n    public writerCursor = 0;\n\n    public readBuffer: any[] = [];\n    public readerCursor = 0;\n    public readerStart = 0;\n    public readerEnd = 0;\n\n    protected check(increment = 0) {\n        if (\n            this.writerCursor + increment >= this.readBuffer.length &&\n            this.writerCursor + increment >= this.readerEnd\n        ) {\n            throw new StringDataBufferOutOfRange(\n                `Cursor: (${this.writerCursor}), buffer's length: (${this.writeBuffer.length})`\n            );\n        }\n    }\n    reset(): void {\n        this.writerCursor = 0;\n        this.readerCursor = 0;\n        this.readBuffer.length = 0;\n        this.writeBuffer.length = 0;\n    }\n    readInt(): number {\n        this.check();\n        const temp = tempTypedBuffer.int;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readUint(): number {\n        this.check();\n        const temp = tempTypedBuffer.uint;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readShort(): number {\n        this.check();\n        const temp = tempTypedBuffer.short;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readUshort(): number {\n        this.check();\n        const temp = tempTypedBuffer.ushort;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readLong(): number {\n        this.check();\n        const temp = tempTypedBuffer.long;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readUlong(): number {\n        this.check();\n        const temp = tempTypedBuffer.ulong;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readFloat(): number {\n        this.check();\n        const temp = tempTypedBuffer.float;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readDouble(): number {\n        this.check();\n        const temp = tempTypedBuffer.double;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readBoolean(): boolean {\n        this.check();\n        return Boolean(this.readBuffer[this.readerCursor++]);\n    }\n    set(source: string, start = 0, end = -1): void {\n        this.writerCursor = 0;\n        const dst = JSON.parse(source);\n\n        let dstChecked = Array.isArray(dst) ? dst : [];\n        if (end < 0) {\n            end += dstChecked.length;\n        }\n        this.readerStart = this.readerCursor = start;\n        this.readerEnd = end;\n        this.readBuffer = dstChecked;\n    }\n\n    writeInt(source: number): this {\n        const temp = tempTypedBuffer.int;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeUint(source: number): this {\n        const temp = tempTypedBuffer.uint;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeShort(source: number): this {\n        const temp = tempTypedBuffer.short;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeUshort(source: number): this {\n        const temp = tempTypedBuffer.ushort;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeLong(source: number): this {\n        const temp = tempTypedBuffer.long;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeUlong(source: number): this {\n        const temp = tempTypedBuffer.ulong;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeFloat(source: number): this {\n        const temp = tempTypedBuffer.float;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeDouble(source: number): this {\n        const temp = tempTypedBuffer.double;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeBoolean(source: boolean): this {\n        this.writeBuffer[this.writerCursor++] = source ? 1 : 0;\n        return this;\n    }\n\n    flush(): string {\n        this.writeBuffer.length = this.writerCursor;\n        const outValue = JSON.stringify(this.writeBuffer);\n        this.reset();\n        return outValue;\n    }\n\n    hasNext(): boolean {\n        return (\n            this.readerCursor < this.readBuffer.length &&\n            this.readerCursor < this.readerEnd\n        );\n    }\n\n    append(other: this): this {\n        this.writeBuffer.push.apply(this.writeBuffer, other.writeBuffer);\n        this.writerCursor += other.writerCursor;\n        other.reset();\n        return this;\n    }\n}\n","import { RpcType } from \"../comp-schema\";\nimport { DomainOption } from \"../domain\";\nimport {\n    MessageManagerBufferInitializer,\n    MessageManagerBufferType,\n} from \"../message-manager\";\nimport { StringDataBuffer } from \"./string-databuffer\";\n\nconst stringInitializer: MessageManagerBufferInitializer<string> = {\n    newBufferReader(type: MessageManagerBufferType) {\n        return new StringDataBuffer();\n    },\n\n    newBufferWriter(type: MessageManagerBufferType) {\n        return new StringDataBuffer();\n    },\n};\n\nexport class StringDomainOption extends DomainOption<string> {\n    constructor(type: RpcType) {\n        super(stringInitializer, type);\n    }\n}\n","import { Deferred } from \"../src\";\n\nexport interface Receiver {\n    receive(data: any): void;\n}\n\nexport class MockTcp<T> {\n    private _arr: Deferred<T>[] = [];\n    receiver?: Receiver;\n    constructor() {}\n\n    send(defer: Deferred<T>) {\n        this._arr.push(defer);\n    }\n\n    update() {\n        let defer: Deferred<T>;\n        while (this._arr.length >= 1 && (defer = this._arr[0]).isFulfilled()) {\n            this.receiver?.receive(defer.value);\n            this._arr.shift();\n        }\n    }\n}\n\nexport class Net {\n    static delay = 0;\n    static jitter = 0;\n\n    private static _serverTcp = new MockTcp<string | ArrayBuffer>();\n    private static _client1Tcp = new MockTcp<string | ArrayBuffer>();\n    private static _client2Tcp = new MockTcp<string | ArrayBuffer>();\n    static set server(value: Receiver) {\n        this._serverTcp.receiver = value;\n    }\n    static set client1(value: Receiver) {\n        this._client1Tcp.receiver = value;\n    }\n    static set client2(value: Receiver) {\n        this._client2Tcp.receiver = value;\n    }\n\n    static clone(src: string | ArrayBuffer) {\n        return src;\n    }\n\n    static send<T extends string | ArrayBuffer>(obj: T) {\n        return {\n            server: () => {\n                const defer = new Deferred<string | ArrayBuffer>();\n                setTimeout(\n                    () => defer.resolve(this.clone(obj)),\n                    this.delay + Math.random() * this.jitter\n                );\n                this._serverTcp.send(defer);\n            },\n            c1: () => {\n                const defer = new Deferred<string | ArrayBuffer>();\n                setTimeout(\n                    () => defer.resolve(this.clone(obj)),\n                    this.delay + Math.random() * this.jitter\n                );\n                this._client1Tcp.send(defer);\n            },\n            c2: () => {\n                const defer = new Deferred<string | ArrayBuffer>();\n                setTimeout(\n                    () => defer.resolve(this.clone(obj)),\n                    this.delay + Math.random() * this.jitter\n                );\n                this._client2Tcp.send(defer);\n            },\n        };\n    }\n\n    static startUpdate() {\n        setTimeout(() => this.startUpdate());\n        this._serverTcp.update();\n        this._client1Tcp.update();\n        this._client2Tcp.update();\n    }\n}\n","import {\n    DataType,\n    IComp,\n    NetSerable,\n    NetVar,\n    Role,\n    Rpc,\n    RpcType,\n    RpcVar,\n} from \"../src\";\n\n@NetSerable(\"vec\")\nexport class Vector {\n    @NetVar(DataType.INT)\n    x: number = 0;\n    @NetVar(DataType.INT)\n    y: number = 0;\n}\n\n@NetSerable(\"trans\")\nexport class Transform extends IComp {\n    @NetVar(Vector)\n    pos = new Vector();\n\n    @Rpc(Role.AUTHORITY)\n    serverMove(\n        @RpcVar(DataType.FLOAT) x: number,\n        @RpcVar(DataType.FLOAT) y: number\n    ) {\n        if (x != 0 || y != 0) {\n            console.log(`${x} : ${y}`);\n        }\n        this.pos.x += x;\n        this.pos.y += y;\n    }\n}\n\n@NetSerable(\"view\")\nexport class View extends IComp {\n    @NetVar(DataType.INT)\n    color = 0xffffff;\n\n    @Rpc(Role.AUTHORITY)\n    changeColor(@RpcVar(DataType.INT) inColor: number) {\n        this.color = inColor;\n    }\n\n    private _ctx?: CanvasRenderingContext2D;\n\n    bindCanvas(ctx: CanvasRenderingContext2D) {\n        this._ctx = ctx;\n    }\n\n    renderUpdate() {\n        const trs = this.get(Transform);\n        const view = this.get(View);\n        if (!this._ctx || !trs || !view) return;\n        this.drawBall(this._ctx, trs.pos, \"#\" + view.color.toString(16));\n    }\n\n    protected drawBall(\n        ctx: CanvasRenderingContext2D,\n        pos: Vector,\n        color: string\n    ) {\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.arc(pos.x, pos.y, 26, 0, 2 * Math.PI);\n        ctx.fill();\n    }\n}\n\nexport interface ControlKeyboarnMap {\n    left: string;\n    right: string;\n}\n\nexport interface UserInput {\n    isLeft: boolean;\n    isRight: boolean;\n}\n\n@NetSerable(\"controller\")\nexport class Controller extends IComp {\n    private _input: UserInput = { isLeft: false, isRight: false };\n    private _onKeyDownDel: any;\n    private _onKeyUpDel: any;\n    private _enable = false;\n    controlMap!: ControlKeyboarnMap;\n    getEnable() {\n        return this._enable;\n    }\n\n    setEnable(value: false): void;\n    setEnable(value: true, controlMap: ControlKeyboarnMap): void;\n    setEnable(value: boolean, controlMap?: ControlKeyboarnMap): void {\n        if (this._enable == value) return;\n        this.controlMap = controlMap!;\n        if (value) {\n            window.addEventListener(\"keydown\", this._onKeyDownDel);\n            window.addEventListener(\"keyup\", this._onKeyUpDel);\n        } else {\n            window.removeEventListener(\"keydown\", this._onKeyDownDel);\n            window.removeEventListener(\"keyup\", this._onKeyUpDel);\n        }\n        this._enable = value;\n    }\n\n    constructor() {\n        super();\n        this._onKeyDownDel = this.onKeyDown.bind(this);\n        this._onKeyUpDel = this.onKeyUp.bind(this);\n    }\n\n    onKeyDown(ev: KeyboardEvent) {\n        const map = this.controlMap;\n        if (ev.key === map.left) {\n            this._input.isLeft = true;\n        } else if (ev.key === map.right) {\n            this._input.isRight = true;\n        }\n    }\n\n    onKeyUp(ev: KeyboardEvent) {\n        const map = this.controlMap;\n        if (ev.key === map.left) {\n            this._input.isLeft = false;\n        } else if (ev.key === map.right) {\n            this._input.isRight = false;\n        }\n    }\n\n    renderUpdate() {\n        if (!this._enable) return;\n        const input = this._input;\n        const trans = this.get(Transform)!;\n        const dirX = (input.isLeft ? -1 : 0) + (input.isRight ? 1 : 0);\n        trans.serverMove(dirX * this.domain.renderTime.delta * 100, 0);\n    }\n}\n","import {\n    Domain,\n    Entity,\n    Rpc,\n    RpcType,\n    StringDataBuffer,\n    StringDomainOption,\n} from \"../src\";\nimport { Net } from \"./mock-net\";\nimport { Controller, Transform, Vector, View } from \"./net-comp\";\nexport * from \"./net-comp\";\nexport * from \"./mock-net\";\n\nconst COLOR_YELLOW = 0xf7d94c;\nconst COLOR_WHITE = 0xf8c3cd;\nconst CONTROLLER_MAP = {\n    1: { left: \"a\", right: \"d\" },\n    2: { left: \"ArrowLeft\", right: \"ArrowRight\" },\n} as any;\nexport abstract class Base {\n    readonly domain: Domain;\n    protected ctx: CanvasRenderingContext2D;\n    bg = \"#947A6D\";\n    myLoop: FrameRequestCallback;\n\n    isPrediction = false;\n    isInterpolation = false;\n    isRollback = false;\n\n    lastTimeStamp = 0;\n    actorArr: Entity[] = [];\n\n    constructor(\n        name: string,\n        readonly canvas: HTMLCanvasElement,\n        rpcType: RpcType\n    ) {\n        this.domain = Domain.Create(name, new StringDomainOption(rpcType));\n        this.ctx = canvas.getContext(\"2d\")!;\n        this.canvas.width = 950;\n        this.canvas.height = 70;\n        this.ctx.fillStyle = this.bg;\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        this.myLoop = this.loop.bind(this);\n        this.initScene();\n        this.loop(0);\n    }\n\n    loop(timestamp: number) {\n        const dt = this.lastTimeStamp == 0 ? 0 : timestamp - this.lastTimeStamp;\n        this.lastTimeStamp = timestamp;\n        this.renderBg();\n        this.domain.update(dt / 1000);\n    }\n\n    initScene() {\n        const v1 = new View();\n        v1.bindCanvas(this.ctx);\n        const t1 = new Transform();\n        t1.pos.x = 30;\n        t1.pos.y = 35;\n        const c1 = new Entity(v1, t1, new Controller());\n\n        const v2 = new View();\n        v2.bindCanvas(this.ctx);\n        const t2 = new Transform();\n        t2.pos.x = 50;\n        t2.pos.y = 35;\n        const c2 = new Entity(v2, t2, new Controller());\n\n        this.domain.reg(c1);\n        this.domain.reg(c2);\n\n        v1.changeColor(COLOR_YELLOW);\n        v2.changeColor(COLOR_WHITE);\n\n        this.actorArr.push(c1, c2);\n    }\n\n    renderBg() {\n        this.canvas.width = this.canvas.width;\n        const ctx = this.ctx;\n\n        ctx.fillStyle = this.bg;\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    receive(data: any) {\n        if (this.isPrediction) return;\n        this.domain.setData(data);\n    }\n}\n\nexport class Server extends Base {\n    sendAccumulator = 0;\n    constructor(readonly canvas: HTMLCanvasElement) {\n        super(\"server\", canvas, RpcType.SERVER);\n    }\n\n    loop(dt: number) {\n        super.loop(dt);\n        this.sendAccumulator += this.domain.renderTime.delta;\n        if (this.sendAccumulator >= 1 / 20) {\n            const outData = this.domain.asData();\n            Net.send(outData).c1();\n            Net.send(outData).c2();\n            this.sendAccumulator = 0;\n        }\n    }\n}\n\nexport class Client extends Base {\n    constructor(readonly index: number, readonly canvas: HTMLCanvasElement) {\n        super(\"client\" + index, canvas, RpcType.CLIENT);\n        this.actorArr[index - 1]\n            .get(Controller)\n            ?.setEnable(true, CONTROLLER_MAP[index]);\n    }\n\n    loop(dt: number) {\n        super.loop(dt);\n        const outData = this.domain.asData();\n        Net.send(outData).server();\n    }\n}\n"],"names":["RpcType","Role","DataType","Object","IComp","this","_entity","domain","$comps","ctr","get","NULL_NUM","DataTypeObect","genMethodSchema","o","create","hash","name","paramCount","paramTypes","returnType","type","SCHEME_KEY","getOrCreateScheme","prototype","hasOwnProperty","s","count","props","methods","raw","superSchema","getPrototypeOf","push","apply","source","_name2indexRecord","_values","length","i","len","_a","key","value","ArrayMap","idx","getIndex","index","deleted","Array","from","asSerable","obj","ser","deser","state","fate","promise","Promise","resolve","reject","_this","_resolve","_reject","then","res","_value","Deferred","reason","factory","CRC32","version","T","c","table","n","Int32Array","signed_crc_table","bstr","seed","C","L","charCodeAt","buf","crc32_buf_8","str","d","DO_NOT_EXPORT_CRC","exports","Config","eval","Function","hash2compName","compName2ctr","hash2RpcName","serValue","buffer","INT","I32","writeInt","FLOAT","F32","writeFloat","DOUBLE","F64","writeDouble","BOOL","writeBoolean","genSerValueJit","valueStr","bufferStr","genForeachSerValueJit","to","arrStr","outStr","deserValue","ref","refCtr","readInt","readFloat","readDouble","readBoolean","genForeachDeserValueJit","recevierStr","genDeserValueJit","fixupSerable","schema","prop","propertyKey","container","dataType","i_1","j","arr","i_2","fixedupSerableState","fixedupSerableRpc","rpcNames","keys","name_1","ms","args","len_1","len_2","privateName","_i","entity","role","local","readonlyInternalMsgMng","sendRpc","logicTime","duration","fixupSerableJIT","serJitStr","itemSerFuncStr","deserJitStr","fixedupSerableStateJit","fixedupSerableRpcJit","name_2","jitStr","__extends","Error","sortComponentPropertyKey","a","b","akey","bkey","WhyPropertyKeyHasTheSameError","NetSerable","genSerable","target","sort","paramIndex","v","fixupSerableWithoutState","NetVar","t","String","undefined","Rpc","Crc32PropertyKeyHashConflict","returnRefCtr","console","warn","RpcVar","parameterIndex","ADirty","old","dirty","_super","Int","inValue","getsetDirty","__decorate","Float","Long","writeLong","readLong","LONG","Uint","writeUint","readUint","uint","Double","Ulong","writeUlong","readUlong","ulong","Short","writeShort","readShort","SHORT","Ushort","writeUshort","readUshort","ushort","MessageType","LogicTimeComp","$delta","RenderTimeComp","AUTHORITY","SIMULATED_PROXY","RoleComp","$local","$remote","remote","AUTONMOUS_PROXY","option","SERVER","_comps","Proxy","p","receiver","_id","_version","_compMap","Map","_initComp","Entity","_domain","ent","map","__schema__","ComponentHasNotDecorated","has","set","error","insOrArr","isArray","ins","indexOf","init","renderUpdate","logicUpdate","destroy","clear","REG_ENTITY","UNREG_ENTITY","MessageManagerBufferType","initializer","inbufferReader","newBufferReader","IN_OR_OUT","statebufferReader","STATE","rpcbufferReader","RPC","rpcCallbackBufferReader","RPC_CALLBACK","outbufferWriter","newBufferWriter","statebufferWriter","rpcbufferWriter","rpcCallbackBufferWriter","MessageManager","_uuid","reset","entityId","entityVersion","compsLen","toDestroy","num","compIdx","comp","hasNext","destoryed","compCount","methodName","component","params","timestamp","uuid","_getUuid","RpcCallbackUuidOutOfRange","id","deferred","_rpcDeferred","methodHash","info","param","_option","_entities","capacity","_entityVersion","fill","_destroyEntityId","_internalMsgMng","renderTime","time","delta","fixedTimeSec","reg","Domain","_name2domainMap","DomainDuplicated","news","domainIndex","_index","values","isValid","_entitiesLength","EntityRepeatRegisteredError","toString","_entityIdCursor","autoResize","EntityGroupOutOfRangeYouCanOpenAutoResize","resize","Math","ceil","_getEntityId","_reg","_unreg","EntityNotValidError","unregWithoutValidation","newSize","oldSize","isServer","outBuf","stateBuf","rpcBuf","rpcCbBuf","startSendEntityAndComps","startSendRpc","startSendRpcCallback","_serEntityAndComps","stateLen","writerCursor","rpcLen","rpcCbLen","append","endSendEntityAndComps","endSendRpc","endSendRpcCallback","flush","inBuf","stateStart","readerCursor","stateEnd","rpcCbEnd","rpcCbStart","rpcEnd","rpcStart","startRecvEntityAndComps","_derEntityAndComps","endRecvEntityAndComps","startRecvRpc","_deserRpcs","endRecvRpc","startRecvRpcCallback","_deserRpcCallbacks","endRecvRpcCallback","dtSec","_fixedSecAccumulator","fixedDeltaTime","sendEntity","comps","serableComp","sendComp","recvEntity","unreg","_derEntityAndCompsUnderExisted","_derEntityAndCompsUnderUnExsited","entComps","errrorClass","assert","DomainCompCountNotMatch","recvCompHeader","recvCompBody","compArr","compHeaderInfo","compName","CompCtr","e","NewWithoutRole","this_1","argus","unknown","w_1","result","sendRpcCallback","recvRpc","recvRpcCallback","callbackRecord","getRpcCallbackRecord","unshift","tempTypedBuffer","int","Uint32Array","short","Int16Array","Uint16Array","long","float","Float32Array","double","Float64Array","StringDataBuffer","increment","readBuffer","readerEnd","StringDataBufferOutOfRange","writeBuffer","check","temp","Boolean","start","end","dst","JSON","parse","dstChecked","readerStart","outValue","stringify","other","stringInitializer","DomainOption","MockTcp","defer","_arr","isFulfilled","receive","shift","Net","_serverTcp","_client1Tcp","_client2Tcp","src","server","setTimeout","clone","delay","random","jitter","send","c1","c2","startUpdate","update","Vector","Transform","x","y","log","pos","__param","View","inColor","color","ctx","_ctx","trs","view","View_1","drawBall","fillStyle","beginPath","arc","PI","isLeft","isRight","_onKeyDownDel","onKeyDown","bind","_onKeyUpDel","onKeyUp","Controller","_enable","controlMap","window","addEventListener","removeEventListener","ev","left","_input","right","input","trans","dirX","serverMove","CONTROLLER_MAP","canvas","rpcType","Create","StringDomainOption","getContext","width","height","bg","fillRect","myLoop","loop","initScene","Base","dt","lastTimeStamp","renderBg","v1","bindCanvas","t1","v2","t2","changeColor","actorArr","data","isPrediction","setData","Server","sendAccumulator","outData","asData","CLIENT","setEnable","Client"],"mappings":"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"}