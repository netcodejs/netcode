{"version":3,"file":"bundle.js","sources":["../src/comp-interface.ts","../src/comp-schema.ts","../src/builtin.ts","../src/array-map.ts","../src/misc.ts","../src/lib/crc-32/index.ts","../src/config.ts","../src/global-record.ts","../src/comp-fixup.ts","../src/comp-decorator.ts","../src/base-dirty-data.ts","../src/message-manager.ts","../src/builtin-comp/time.ts","../src/builtin-comp/role.ts","../src/entity.ts","../src/domain.ts","../src/data/string-databuffer.ts","../src/data/string-domain-option.ts","mock-net.ts","net-comp.ts","index.ts"],"sourcesContent":["import { Entity } from \"./entity\";\n\nexport abstract class IComp {\n    private _entity?: Entity | null;\n    get entity() {\n        return this._entity!;\n    }\n    get domain() {\n        return this._entity!.domain;\n    }\n    get $comps() {\n        return this._entity!.$comps;\n    }\n\n    get<T extends IComp>(ctr: { new (): T }): T | null {\n        return this._entity!.get(ctr);\n    }\n\n    init?(compIdx: number): void;\n    renderUpdate?(compIdx: number): void;\n    logicUpdate?(compIdx: number): void;\n    destroy?(compIdx: number): void;\n}\n","import { NULL_NUM, NULL_STR } from \"./builtin\";\n\nexport interface PropSchema {\n    paramIndex: number;\n    propertyKey: string;\n    type: NetFiledType;\n}\n\nexport interface Schema {\n    name: string;\n    hash: number;\n    count: number;\n    props: Record<string, PropSchema>;\n    methods: Record<string, MethodSchema>;\n    raw: PropSchema[];\n}\n\nexport interface NetFiledType {\n    container: number;\n    dataType: DataType;\n    refCtr?: { new (): any };\n}\n\nexport interface MethodSchema {\n    name: string;\n    hash: number;\n    paramTypes: DataType[];\n    paramCount: number;\n    returnType: DataType;\n    returnRefCtr?: any;\n    type: Role;\n}\n\nexport enum RpcType {\n    SERVER,\n    CLIENT,\n}\n\nexport enum Role {\n    AUTHORITY = 1,\n    SIMULATED_PROXY,\n    AUTONMOUS_PROXY,\n}\n\n// prettier-ignore\nexport enum DataType {\n    NONE, I8 = 1, U8, I16, U16, I32, U32, F32, F64,\n    SHORT, ushort, INT, uint, LONG, ulong, FLOAT, DOUBLE, STRING, BOOL\n}\nexport const DataTypeObect = 99 as DataType;\nexport const DataTypeVoid = 98 as DataType;\n\nexport type ComponentConstructor<T = any> = { new (): T } & {\n    __schema__: Schema;\n};\n\nexport function genSchema(o = Object.create(null)): Schema {\n    o.hash = NULL_NUM;\n    o.name = NULL_STR;\n    o.count = 0;\n    o.props = Object.create(null);\n    o.methods = Object.create(null);\n    o.raw = [];\n    return o;\n}\n\nexport function genMethodSchema(o = Object.create(null)): MethodSchema {\n    o.hash = NULL_NUM;\n    o.name = NULL_STR;\n    o.paramCount = 0;\n    o.paramTypes = [];\n    o.returnType = DataTypeVoid;\n    o.type = -1;\n    return o;\n}\n\nexport const SCHEME_KEY = \"__schema__\";\nexport type ISchema = { [SCHEME_KEY]: Schema };\n\nexport function getSchemaByPrototype(prototype: any): Schema | null {\n    if (prototype.hasOwnProperty(SCHEME_KEY)) {\n        return (prototype as any)[SCHEME_KEY];\n    }\n    return null;\n}\n\nexport function getOrCreateScheme(prototype: any): Schema {\n    if (prototype.hasOwnProperty(SCHEME_KEY)) {\n        return (prototype as any)[SCHEME_KEY];\n    }\n\n    const s = genSchema() as Schema;\n    (prototype as any)[SCHEME_KEY] = s;\n    const superCtr = Object.getPrototypeOf(prototype);\n\n    const superSchema = superCtr[SCHEME_KEY] as Schema;\n    if (superSchema) {\n        s.raw.push.apply(s.raw, superSchema.raw);\n    }\n    return s;\n}\n","export const NULL_NUM = -1;\nexport const NULL_STR = \"\";\nexport const NONE_CONTAINER = 0;\nexport const ARR_CONTAINER = 1;\nexport const NULL_FUNC = () => {};\nexport const RPC_MAX_UUID = (1 << 8) - 1;\n","export class ArrayMap<k extends string | number, v> {\n    private _name2indexRecord: Record<k, number>;\n    private _values: (v | null)[];\n\n    constructor(source?: [k, v][]) {\n        this._name2indexRecord = Object.create(null) as Record<k, number>;\n        this._values = [];\n        if (source != null) {\n            this._values.length = source.length;\n            for (let i = 0, len = source.length; i < len; i++) {\n                let [key, value] = source[i];\n                this._name2indexRecord[key] = i;\n                this._values[i] = value;\n            }\n        }\n    }\n\n    get(key: k): v | null {\n        const idx = this.getIndex(key);\n        if (idx > -1) {\n            return this._values[idx];\n        }\n        return null;\n    }\n\n    getIndex(key: k): number {\n        return this._name2indexRecord[key] ?? -1;\n    }\n\n    getByIndex(index: number): v | null {\n        return this._values[index];\n    }\n\n    has(key: k): boolean {\n        return (this._name2indexRecord[key] ?? -1) > -1;\n    }\n\n    set(key: k, value: v) {\n        let index = this._name2indexRecord[key];\n        if (index == null) {\n            index = this._values.length;\n            this._name2indexRecord[key] = index;\n        }\n        this._values[index] = value;\n        return index;\n    }\n\n    delete(key: k): [v | null, number] {\n        const index = this.getIndex(key);\n        if (index < 0) {\n            return [null, -1];\n        }\n        const deleted = [this._values[index], index] as [v | null, number];\n        this._values[index] = null;\n        delete this._name2indexRecord[key];\n\n        return deleted;\n    }\n\n    clear() {\n        this._name2indexRecord = Object.create(null);\n        this._values.length = 0;\n    }\n\n    get values(): v[] {\n        return Array.from(this._values) as v[];\n    }\n\n    get readonlyValues(): readonly v[] {\n        return this._values as readonly v[];\n    }\n}\n","import { ISerable } from \"./data/serializable\";\n\nconst MAX_VERSION = (1 << 30) - 1;\nexport function composeVersion(num: number, destoryed: boolean | 0 | 1) {\n    num = num % MAX_VERSION;\n    return destoryed ? -num : num;\n}\n\nexport function decomposeVersion(version: number): [number, boolean] {\n    return [version > 0 ? version : -version, version < 0];\n}\n\nexport function isPrimitive(test: any) {\n    return test !== Object(test);\n}\n\nexport function asSerable<T extends {}>(obj: T): (ISerable & T) | null {\n    if (!obj) return null;\n    // @ts-ignore\n    return typeof obj.ser === \"function\" && typeof obj.deser === \"function\"\n        ? (obj as ISerable & T)\n        : null;\n}\n\nexport function assert(\n    b: boolean | Object | null,\n    errrorClass: new (...args: any[]) => Error\n) {\n    if (!b) {\n        throw new errrorClass();\n    }\n}\n\nexport type ProtoOf<T> = Pick<T, keyof T>;\n\nexport class Deferred<T = unknown> {\n    public promise: Promise<T>;\n\n    private fate: \"resolved\" | \"unresolved\";\n    private state: \"pending\" | \"fulfilled\" | \"rejected\";\n\n    private _resolve!: (value: T | PromiseLike<T>) => void;\n    private _reject!: (reason?: any) => void;\n    private _value: any;\n    public get value() {\n        return this._value;\n    }\n\n    constructor() {\n        this.state = \"pending\";\n        this.fate = \"unresolved\";\n        this.promise = new Promise((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n        });\n        this.promise.then(\n            (res) => {\n                this.state = \"fulfilled\";\n                this._value = res;\n            },\n            () => (this.state = \"rejected\")\n        );\n    }\n\n    resolve(value: T | PromiseLike<T>) {\n        if (this.fate === \"resolved\") {\n            throw \"Deferred cannot be resolved twice\";\n        }\n        this.fate = \"resolved\";\n        this._resolve(value);\n    }\n\n    reject(reason?: any) {\n        if (this.fate === \"resolved\") {\n            throw \"Deferred cannot be resolved twice\";\n        }\n        this.fate = \"resolved\";\n        this._reject(reason);\n    }\n\n    isResolved() {\n        return this.fate === \"resolved\";\n    }\n\n    isPending() {\n        return this.state === \"pending\";\n    }\n\n    isFulfilled() {\n        return this.state === \"fulfilled\";\n    }\n\n    isRejected() {\n        return this.state === \"rejected\";\n    }\n}\n","/* exports.js (C) 2014-present SheetJS -- http://sheetjs.com */\n/* last edit: mooooooi<emwings@outlook.com> */\n/* see perf/exportstable.js */\n/*global Int32Array */\nfunction signed_crc_table() {\n    let c = 0,\n        table = new Array(256);\n\n    for (let n = 0; n != 256; ++n) {\n        c = n;\n        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n        table[n] = c;\n    }\n\n    return typeof Int32Array !== \"undefined\" ? new Int32Array(table) : table;\n}\n\nconst T = signed_crc_table();\nexport function bstr(bstr: string, seed = 0) {\n    let C = seed ^ -1,\n        L = bstr.length - 1;\n    for (var i = 0; i < L; ) {\n        C = (C >>> 8) ^ T[(C ^ bstr.charCodeAt(i++)) & 0xff];\n        C = (C >>> 8) ^ T[(C ^ bstr.charCodeAt(i++)) & 0xff];\n    }\n    if (i === L) C = (C >>> 8) ^ T[(C ^ bstr.charCodeAt(i)) & 0xff];\n    return C ^ -1;\n}\n\nexport function buf(buf: number[] | Uint8Array, seed: number = 0) {\n    if (buf.length > 10000) return exports_buf_8(buf, seed);\n    let C = seed ^ -1,\n        L = buf.length - 3;\n    for (var i = 0; i < L; ) {\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n    }\n    while (i < L + 3) C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n    return C ^ -1;\n}\n\nfunction exports_buf_8(buf: number[] | Uint8Array, seed: number = 0) {\n    let C = seed ^ -1,\n        L = buf.length - 7;\n    for (var i = 0; i < L; ) {\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n    }\n    while (i < L + 7) C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n    return C ^ -1;\n}\n\nexport function str(str: string, seed = 0) {\n    let C = seed ^ -1;\n    for (let i = 0, L = str.length, c, d; i < L; ) {\n        c = str.charCodeAt(i++);\n        if (c < 0x80) {\n            C = (C >>> 8) ^ T[(C ^ c) & 0xff];\n        } else if (c < 0x800) {\n            C = (C >>> 8) ^ T[(C ^ (192 | ((c >> 6) & 31))) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ (128 | (c & 63))) & 0xff];\n        } else if (c >= 0xd800 && c < 0xe000) {\n            c = (c & 1023) + 64;\n            d = str.charCodeAt(i++) & 1023;\n            C = (C >>> 8) ^ T[(C ^ (240 | ((c >> 8) & 7))) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ (128 | ((c >> 2) & 63))) & 0xff];\n            C =\n                (C >>> 8) ^\n                T[(C ^ (128 | ((d >> 6) & 15) | ((c & 3) << 4))) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ (128 | (d & 63))) & 0xff];\n        } else {\n            C = (C >>> 8) ^ T[(C ^ (224 | ((c >> 12) & 15))) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ (128 | ((c >> 6) & 63))) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ (128 | (c & 63))) & 0xff];\n        }\n    }\n    return C ^ -1;\n}\n\nexport const version = \"1.2.0\";\nexport const table = T;\n","export const Config = {\n    // Attention! Rollup config dependents the code format!\n    JIT: typeof eval !== \"undefined\" && typeof Function !== \"undefined\",\n};\n","export const hash2compName: Record<number, string> = Object.create(null);\nexport const compName2ctr: Record<string, { new (): any }> =\n    Object.create(null);\nexport const hash2RpcName = {} as Record<number, string>;\n","import { IComp } from \"./comp-interface\";\nimport {\n    DataType,\n    DataTypeObect,\n    ISchema,\n    Schema,\n    SCHEME_KEY,\n} from \"./comp-schema\";\nimport { IDataBufferWriter, IDataBufferReader } from \"./data/serializable\";\nimport { NONE_CONTAINER } from \"./builtin\";\n\nexport function serValue(\n    type: DataType,\n    value: any,\n    buffer: IDataBufferWriter\n) {\n    switch (type) {\n        case DataType.INT:\n        case DataType.I32:\n            buffer.writeInt(value);\n            break;\n        case DataType.FLOAT:\n        case DataType.F32:\n            buffer.writeFloat(value);\n            break;\n        case DataType.DOUBLE:\n        case DataType.F64:\n            buffer.writeDouble(value);\n            break;\n        case DataType.BOOL:\n            buffer.writeBoolean(value);\n            break;\n        case DataTypeObect:\n            value.ser(buffer);\n            break;\n    }\n}\n\nexport function genSerValueJit(\n    type: DataType,\n    valueStr: string,\n    bufferStr: string\n) {\n    switch (type) {\n        case DataType.INT:\n        case DataType.I32:\n            return `${bufferStr}.writeInt(${valueStr});`;\n        case DataType.FLOAT:\n        case DataType.F32:\n            return `${bufferStr}.writeFloat(${valueStr});`;\n        case DataType.DOUBLE:\n        case DataType.F64:\n            return `${bufferStr}.writeDouble(${valueStr});`;\n        case DataType.BOOL:\n            return `${bufferStr}.writeBoolean(${valueStr});`;\n        case DataTypeObect:\n            return `${valueStr}.ser(${bufferStr});`;\n        default:\n            return \"\";\n    }\n}\n\nexport function genForeachSerValueJit(\n    type: DataType[],\n    from: number,\n    to: number,\n    arrStr: string,\n    bufferStr: string\n) {\n    let outStr = \"\";\n    for (let i = from; i < to; i++) {\n        outStr += genSerValueJit(type[i], `${arrStr}[${i}]`, bufferStr);\n    }\n    return outStr;\n}\n\nexport function deserValue(\n    type: DataType,\n    buffer: IDataBufferReader,\n    ref?: any,\n    refCtr?: any\n) {\n    switch (type) {\n        case DataType.INT:\n        case DataType.I32:\n            return buffer.readInt();\n        case DataType.FLOAT:\n        case DataType.F32:\n            return buffer.readFloat();\n        case DataType.DOUBLE:\n        case DataType.F64:\n            return buffer.readDouble();\n        case DataType.BOOL:\n            return buffer.readBoolean();\n        case DataTypeObect:\n            if (!ref) ref = new refCtr!();\n            ref.deser(buffer);\n            return ref;\n    }\n}\n\nfunction genForeachDeserValueJit(\n    type: DataType[],\n    from: number,\n    to: number,\n    recevierStr: string,\n    bufferStr: string\n) {\n    let outStr = \"\";\n    for (let i = from; i < to; i++) {\n        outStr += genDeserValueJit(type[i], bufferStr, `${recevierStr}[${i}]`);\n    }\n    return outStr;\n}\n\nexport function genDeserValueJit(\n    type: DataType,\n    bufferStr: string,\n    recevierStr: string\n) {\n    switch (type) {\n        case DataType.INT:\n        case DataType.I32:\n            return `${recevierStr} = ${bufferStr}.readInt();`;\n        case DataType.FLOAT:\n        case DataType.F32:\n            return `${recevierStr} = ${bufferStr}.readFloat();`;\n        case DataType.DOUBLE:\n        case DataType.F64:\n            return `${recevierStr} = ${bufferStr}.readDouble();`;\n        case DataType.BOOL:\n            return `${recevierStr} = ${bufferStr}.readBoolean();`;\n        case DataTypeObect:\n            return `\n${recevierStr}.deser(${bufferStr})\n            `;\n        default:\n            return \"\";\n    }\n}\n\nexport function fixupSerable(prototype: any) {\n    const schema = prototype[SCHEME_KEY] as Schema;\n    fixedupSerableState(prototype, schema);\n    fixedupSerableRpc(prototype, schema);\n}\n\nexport function fixupSerableWithoutState(prototype: any) {\n    const schema = prototype[SCHEME_KEY] as Schema;\n    fixedupSerableRpc(prototype, schema);\n}\n\nexport function fixedupSerableState(prototype: any, schema: Schema) {\n    prototype.ser = function (\n        this: ISchema & Record<string, any>,\n        buffer: IDataBufferWriter\n    ) {\n        for (let i = 0, count = schema.count; i < count; i++) {\n            const prop = schema.props[i];\n            const type = prop.type;\n            const key = prop.propertyKey;\n            const value = this[key];\n            if (type.container === NONE_CONTAINER) {\n                serValue(type.dataType, value, buffer);\n            } else {\n                buffer.writeInt(value.length);\n                for (let i = 0, j = value.length; i < j; i++) {\n                    serValue(type.dataType, value[i], buffer);\n                }\n            }\n        }\n    };\n    prototype.deser = function (\n        this: ISchema & Record<string, any>,\n        buffer: IDataBufferReader\n    ) {\n        for (let i = 0, count = schema.count; i < count; i++) {\n            const prop = schema.props[i];\n            const type = prop.type;\n            const key = prop.propertyKey;\n            if (type.container === NONE_CONTAINER) {\n                this[key] = deserValue(\n                    type.dataType,\n                    buffer,\n                    this[key],\n                    prop.type.refCtr\n                );\n            } else {\n                if (!(this as any)[key]) {\n                    (this as any)[key] = [];\n                }\n                const arr = (this as any)[key] as any[];\n                arr.length = buffer.readInt();\n                for (let i = 0, j = arr.length; i < j; i++) {\n                    arr[i] = deserValue(\n                        type.dataType,\n                        buffer,\n                        arr[i],\n                        prop.type.refCtr\n                    );\n                }\n            }\n        }\n    };\n}\n\nexport function fixedupSerableRpc(prototype: any, schema: Schema) {\n    const rpcNames = Object.keys(schema.methods);\n    for (let i = 0, len = rpcNames.length; i < len; i++) {\n        const name = rpcNames[i];\n        const ms = schema.methods[name];\n        prototype[\"ser\" + ms.hash] = function (\n            buffer: IDataBufferWriter,\n            args: any[]\n        ) {\n            for (let j = 0, len = ms.paramCount; j < len; j++) {\n                const value = args[j];\n                serValue(ms.paramTypes[j], value, buffer);\n            }\n        };\n        prototype[\"deser\" + ms.hash] = function (buffer: IDataBufferReader) {\n            const args = new Array(ms.paramCount);\n            for (let j = 0, len = ms.paramCount; j < len; j++) {\n                args[j] = deserValue(\n                    ms.paramTypes[j],\n                    buffer,\n                    args[j],\n                    ms.paramTypes[j]\n                );\n            }\n            return args;\n        };\n\n        const privateName = \"__\" + name + \"__\";\n        prototype[privateName] = prototype[name];\n        prototype[name] = function (\n            this: IComp & ISchema & Record<string, Function>,\n            ...args: any[]\n        ) {\n            if (this.entity.role.local == ms.type) {\n                return this[privateName](...args);\n            } else {\n                const domain = this.domain;\n                if (domain == null) {\n                    return Promise.reject(\"Domain is not valid!\");\n                }\n                return domain.readonlyInternalMsgMng.sendRpc(\n                    name,\n                    this,\n                    args,\n                    domain.logicTime.duration\n                );\n            }\n        };\n    }\n}\n\nexport function fixupSerableJIT(prototype: any) {\n    const schema = prototype[SCHEME_KEY] as Schema;\n    fixedupSerableStateJit(prototype, schema);\n    fixedupSerableRpcJit(prototype, schema);\n}\n\nexport function fixupSerableJITWithoutState(prototype: any) {\n    const schema = prototype[SCHEME_KEY] as Schema;\n    fixedupSerableRpcJit(prototype, schema);\n}\n\nexport function fixedupSerableStateJit(prototype: any, schema: Schema) {\n    let serJitStr = \"\";\n    for (let i = 0, count = schema.count; i < count; i++) {\n        const prop = schema.props[i];\n        const type = prop.type;\n        const key = prop.propertyKey;\n        if (type.container === NONE_CONTAINER) {\n            switch (type.dataType) {\n                case DataType.INT:\n                case DataType.I32:\n                    serJitStr += `buffer.writeInt(this.${key});`;\n                    break;\n                case DataType.FLOAT:\n                case DataType.F32:\n                    serJitStr += `buffer.writeFloat(this.${key});`;\n                    break;\n                case DataType.DOUBLE:\n                case DataType.F64:\n                    serJitStr += `buffer.writeDouble(this.${key});`;\n                    break;\n                case DataType.BOOL:\n                    serJitStr += `buffer.writeBoolean(this.${key});`;\n                    break;\n                case DataTypeObect:\n                    serJitStr += `this.${key}.ser(buffer);`;\n                    break;\n            }\n        } else {\n            serJitStr += `buffer.writeInt(this.${key}.length);`;\n            let itemSerFuncStr = \"\";\n            switch (type.dataType) {\n                case DataType.INT:\n                case DataType.I32:\n                    itemSerFuncStr = `buffer.writeInt(arr[i]);`;\n                    break;\n                case DataType.FLOAT:\n                case DataType.F32:\n                    itemSerFuncStr = `buffer.writeFloat(arr[i]);`;\n                    break;\n                case DataType.DOUBLE:\n                case DataType.F64:\n                    itemSerFuncStr = `buffer.writeDouble(arr[i]);`;\n                    break;\n                case DataType.BOOL:\n                    serJitStr += `buffer.writeBoolean(this.${key});`;\n                    break;\n                case DataTypeObect:\n                    itemSerFuncStr = `arr[i].ser(buffer);`;\n                    break;\n            }\n            serJitStr += `\n            var arr = this.${key}\n            for (let i = 0, j = arr.length; i < j; i++) {\n                ${itemSerFuncStr}\n            }\n            `;\n        }\n    }\n    prototype.ser = Function(\"buffer\", serJitStr);\n    let deserJitStr = \"\";\n    for (let i = 0, count = schema.count; i < count; i++) {\n        const prop = schema.props[i];\n        const type = prop.type;\n        const key = prop.propertyKey;\n        if (type.container === NONE_CONTAINER) {\n            switch (type.dataType) {\n                case DataType.INT:\n                case DataType.I32:\n                    deserJitStr += `this.${key}=buffer.readInt();`;\n                    break;\n                case DataType.FLOAT:\n                case DataType.F32:\n                    deserJitStr += `this.${key}=buffer.readFloat();`;\n                    break;\n                case DataType.DOUBLE:\n                case DataType.F64:\n                    deserJitStr += `this.${key}=buffer.readDouble();`;\n                    break;\n                case DataType.BOOL:\n                    deserJitStr += `this.${key}=buffer.readBoolean();`;\n                    break;\n                case DataTypeObect:\n                    deserJitStr += `this.${key}.deser(buffer);`;\n                    break;\n            }\n        } else {\n            deserJitStr += `\n            if(!this.${key})this.${key}=[];\n            var arr=this.${key};\n            arr.length=buffer.readInt();`;\n            let itemSerFuncStr = \"\";\n            switch (type.dataType) {\n                case DataType.INT:\n                case DataType.I32:\n                    itemSerFuncStr = `arr[i]=buffer.readInt();`;\n                    break;\n                case DataType.FLOAT:\n                case DataType.F32:\n                    itemSerFuncStr = `arr[i]=buffer.readFloat();`;\n                    break;\n                case DataType.DOUBLE:\n                case DataType.F64:\n                    itemSerFuncStr = `arr[i]=buffer.readDouble();`;\n                    break;\n                case DataType.BOOL:\n                    deserJitStr += `arr[i]=buffer.readBoolean();`;\n                    break;\n                case DataTypeObect:\n                    itemSerFuncStr = `arr[i].deser(buffer);`;\n                    break;\n            }\n            deserJitStr += `\n            for (let i = 0, j = arr.length; i < j; i++) {\n                ${itemSerFuncStr}\n            }\n            `;\n        }\n    }\n    prototype.deser = Function(\"buffer\", deserJitStr);\n}\n\nexport function fixedupSerableRpcJit(prototype: any, schema: Schema) {\n    const rpcNames = Object.keys(schema.methods);\n    for (let i = 0, len = rpcNames.length; i < len; i++) {\n        const name = rpcNames[i];\n        const ms = schema.methods[name];\n\n        let serJitStr = `\n${genForeachSerValueJit(ms.paramTypes, 0, ms.paramCount, \"args\", \"buffer\")}\n        `;\n        prototype[\"ser\" + ms.hash] = Function(\"buffer\", \"args\", serJitStr);\n\n        let deserJitStr = `\nconst args = new Array(${ms.paramCount});\n${genForeachDeserValueJit(ms.paramTypes, 0, ms.paramCount, \"args\", \"buffer\")}\nreturn args;\n        `;\n        prototype[\"deser\" + ms.hash] = Function(\"buffer\", deserJitStr);\n\n        const privateName = \"__\" + name + \"__\";\n        prototype[privateName] = prototype[name];\n        let jitStr = `\nif (this.entity.role.local == ${ms.type}) {\n    return this[\"${privateName}\"](...args);\n} else {\n    const domain = this.domain;\n    if (domain == null) {\n        return Promise.reject(\"Domain is not valid!\")\n    }\n    return domain.readonlyInternalMsgMng.sendRpc(\n        \"${name}\",\n        this,\n        args,\n        domain.logicTime.duration\n    );\n}\n        `;\n        prototype[name] = Function(\"...args\", jitStr);\n    }\n}\n","import { ProtoOf } from \"./misc\";\nimport { str as hash } from \"./lib/crc-32\";\nimport { Config } from \"./config\";\nimport {\n    PropSchema,\n    DataType,\n    DataTypeObect,\n    getOrCreateScheme,\n    DataTypeVoid,\n    genMethodSchema,\n    Role,\n} from \"./comp-schema\";\nimport { hash2compName, compName2ctr, hash2RpcName } from \"./global-record\";\nimport { ARR_CONTAINER, NONE_CONTAINER } from \"./builtin\";\nimport {\n    fixupSerable,\n    fixupSerableJIT,\n    fixupSerableJITWithoutState,\n    fixupSerableWithoutState,\n} from \"./comp-fixup\";\nimport { IComp } from \"./comp-interface\";\n\nclass WhyPropertyKeyHasTheSameError extends Error {}\nfunction sortComponentPropertyKey(a: PropSchema, b: PropSchema): number {\n    const akey = a.propertyKey;\n    const bkey = b.propertyKey;\n    if (akey == bkey) throw new WhyPropertyKeyHasTheSameError();\n    return akey > bkey ? 1 : -1;\n}\n\nexport function NetSerable(name: string, genSerable = true) {\n    return function <T>(target: { new (): T }) {\n        const s = getOrCreateScheme(target.prototype);\n        s.name = name;\n        s.hash = hash(name);\n        hash2compName[s.hash] = s.name;\n        compName2ctr[s.name] = target;\n\n        s.count = s.raw.length;\n        if (s.count > 0) {\n            s.raw.sort(sortComponentPropertyKey);\n            for (let paramIndex = 0; paramIndex < s.count; paramIndex++) {\n                const v = s.raw[paramIndex];\n                v.paramIndex = paramIndex;\n                s.props[paramIndex] = v;\n                s.props[v.propertyKey as string] = v;\n            }\n        }\n\n        if (genSerable) {\n            if (Config.JIT) {\n                fixupSerableJIT(target.prototype);\n            } else {\n                fixupSerable(target.prototype);\n            }\n        } else {\n            if (Config.JIT) {\n                fixupSerableJITWithoutState(target.prototype);\n            } else {\n                fixupSerableWithoutState(target.prototype);\n            }\n        }\n    };\n}\n\nexport type DataTypeMappingPrimitive = {\n    [DataType.NONE]: never;\n    [DataType.INT]: number;\n    [DataType.LONG]: number;\n    [DataType.FLOAT]: number;\n    [DataType.DOUBLE]: number;\n    [DataType.SHORT]: number;\n    [DataType.I8]: number;\n    [DataType.U8]: number;\n    [DataType.I16]: number;\n    [DataType.U16]: number;\n    [DataType.I32]: number;\n    [DataType.U32]: number;\n    [DataType.F32]: number;\n    [DataType.F64]: number;\n    [DataType.STRING]: string;\n    [DataType.BOOL]: boolean;\n};\n\nexport function NetVar<DT extends number, R>(type: DT | { new (): R }) {\n    return function <PK extends string | symbol>(\n        t: ProtoOf<Record<PK, DataTypeMappingPrimitive[DT] & R>>,\n        propertyKey: PK\n    ) {\n        const s = getOrCreateScheme(t as any);\n        s.raw.push({\n            paramIndex: -1,\n            propertyKey: String(propertyKey),\n            type: {\n                container: NONE_CONTAINER,\n                dataType: typeof type === \"number\" ? type : DataTypeObect,\n                refCtr: typeof type === \"number\" ? undefined : type,\n            },\n        });\n    };\n}\n\nexport function NetArr<DT extends number, R>(type: DT | { new (): R }) {\n    return function <PK extends string | symbol>(\n        t: ProtoOf<Record<PK, Array<DataTypeMappingPrimitive[DT] & R>>>,\n        propertyKey: PK\n    ) {\n        const s = getOrCreateScheme(t as any);\n        s.raw.push({\n            paramIndex: -1,\n            propertyKey: String(propertyKey),\n            type: {\n                container: ARR_CONTAINER,\n                dataType: typeof type === \"number\" ? type : DataTypeObect,\n                refCtr: typeof type === \"number\" ? undefined : type,\n            },\n        });\n    };\n}\n\ntype RpcReturnTypeMapping<T extends undefined | number, R> = T extends number\n    ? DataTypeMappingPrimitive[T] & R\n    : void;\nexport class Crc32PropertyKeyHashConflict extends Error {}\n\nexport function Rpc<R, RpcReturnType extends undefined | number = undefined>(\n    type: Role,\n    returnType?: RpcReturnType | { new (): R }\n) {\n    return function <PropKey extends string>(\n        t: IComp &\n            ProtoOf<\n                Record<\n                    PropKey,\n                    (\n                        ...args: any[]\n                    ) => void | Promise<RpcReturnTypeMapping<RpcReturnType, R>>\n                >\n            >,\n        propertyKey: PropKey\n    ): void {\n        // gen schema\n        const s = getOrCreateScheme(t);\n        if (!s.methods[propertyKey]) {\n            s.methods[propertyKey] = genMethodSchema();\n        }\n        const ms = s.methods[propertyKey];\n        ms.hash = hash(propertyKey);\n        ms.name = propertyKey;\n        ms.type = type;\n        if (hash2RpcName[ms.hash] && hash2RpcName[ms.hash] != ms.name) {\n            throw new Crc32PropertyKeyHashConflict();\n        }\n        hash2RpcName[ms.hash] = ms.name;\n        if (typeof returnType === \"undefined\") {\n            ms.returnType = DataTypeVoid;\n        } else {\n            ms.returnType =\n                typeof returnType === \"number\" ? returnType : DataTypeObect;\n            ms.returnRefCtr =\n                typeof returnType === \"number\" ? undefined : returnType;\n        }\n\n        ms.paramCount = ms.paramTypes.length;\n        for (let i = 0, len = ms.paramCount; i < len; i++) {\n            if (!ms.paramTypes[i]) {\n                console.warn(\n                    `[Netcode]Rpc function ${propertyKey} at paramIndex(${i}) set the default type DataType.double`\n                );\n                ms.paramTypes[i] = DataType.DOUBLE;\n            }\n        }\n    };\n}\n\nexport function RpcVar(type: DataType) {\n    return function (\n        t: IComp,\n        propertyKey: string,\n        parameterIndex: number\n    ): void {\n        const s = getOrCreateScheme(t);\n        if (!s.methods[propertyKey]) {\n            s.methods[propertyKey] = genMethodSchema();\n        }\n        const ms = s.methods[propertyKey];\n        ms.paramTypes[parameterIndex] = type;\n    };\n}\n","import { DataType } from \"./comp-schema\";\nimport { NetSerable, NetVar } from \"./comp-decorator\";\nimport {\n    IDataBufferReader,\n    IDataBufferWriter,\n    ISerable,\n} from \"./data/serializable\";\n\nexport abstract class ADirty<T> {\n    abstract get value(): T;\n    abstract set value(inValue: T);\n    abstract dirty: boolean;\n\n    getsetDirty(): boolean {\n        const old = this.dirty;\n        this.dirty = false;\n        return old;\n    }\n}\n\n@NetSerable(\"Int\", false)\nexport class Int extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n    private _value: number = 0;\n    @NetVar(DataType.INT)\n    get value() {\n        return this._value;\n    }\n\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeInt(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readInt();\n        }\n    }\n}\n\n@NetSerable(\"Float\", false)\nexport class Float extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.FLOAT)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeFloat(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readFloat();\n        }\n    }\n}\n\n@NetSerable(\"Long\", false)\nexport class Long extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.LONG)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeLong(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readLong();\n        }\n    }\n}\n\n@NetSerable(\"Uint\", false)\nexport class Uint extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n    private _value: number = 0;\n    @NetVar(DataType.uint)\n    get value() {\n        return this._value;\n    }\n\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeUint(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readUint();\n        }\n    }\n}\n\n@NetSerable(\"Double\", false)\nexport class Double extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.DOUBLE)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeDouble(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readDouble();\n        }\n    }\n}\n\n@NetSerable(\"Ulong\", false)\nexport class Ulong extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.ulong)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeUlong(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readUlong();\n        }\n    }\n}\n\n@NetSerable(\"Short\", false)\nexport class Short extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.SHORT)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeShort(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readShort();\n        }\n    }\n}\n\n@NetSerable(\"Ulong\", false)\nexport class Ushort extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.ushort)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDataBufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeUshort(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readUshort();\n        }\n    }\n}\n","import { composeVersion, decomposeVersion, Deferred } from \"./misc\";\nimport {\n    IDataBufferReader,\n    IDataBufferWriter,\n    ISerable,\n    SupportNetDataType,\n} from \"./data/serializable\";\nimport { DataTypeVoid, ISchema } from \"./comp-schema\";\nimport { RPC_MAX_UUID } from \"./builtin\";\nimport { IComp } from \"./comp-interface\";\n\nexport enum MessageType {\n    UPDATE_COMPONENT,\n    RPC,\n}\n\nexport interface RpcCall {\n    methodName: number;\n    component: any;\n    args: any[];\n}\n\nexport interface MessageEntityInfo {\n    entityId: number;\n    entityVersion: number;\n    destoryed: boolean;\n    compCount: number;\n}\n\nexport interface MessageRpcInfo {\n    entityId: number;\n    compIdx: number;\n    methodHash: number;\n    timestamp: number;\n    uuid: number;\n}\n\nexport interface MessageRpcCallbackInfo {\n    entityId: number;\n    compIdx: number;\n    methodHash: number;\n    uuid: number;\n}\n\nexport interface MessageRpcCallbackRecord {\n    deferred: Deferred;\n    timestamp: number;\n}\nexport class RpcCallbackUuidOutOfRange extends Error {}\n\nexport enum MessageManagerBufferType {\n    // The real net package on sending or receiving.\n    IN_OR_OUT,\n    STATE,\n    RPC,\n    RPC_CALLBACK,\n}\n\nexport interface MessageManagerBufferInitializer<T extends SupportNetDataType> {\n    newBufferReader(bufferType: MessageManagerBufferType): IDataBufferReader<T>;\n    newBufferWriter(bufferType: MessageManagerBufferType): IDataBufferWriter<T>;\n}\n\nexport class MessageManager<T extends SupportNetDataType> {\n    protected _rpcCalls: RpcCall[] = [];\n    protected _rpcDeferred: Map<string, MessageRpcCallbackRecord> = new Map();\n    protected _uuid = 0;\n\n    readonly inbufferReader: IDataBufferReader<T>;\n    readonly statebufferReader: IDataBufferReader<T>;\n    readonly rpcbufferReader: IDataBufferReader<T>;\n    readonly rpcCallbackBufferReader: IDataBufferReader<T>;\n\n    readonly outbufferWriter: IDataBufferWriter<T>;\n    readonly statebufferWriter: IDataBufferWriter<T>;\n    readonly rpcbufferWriter: IDataBufferWriter<T>;\n    readonly rpcCallbackBufferWriter: IDataBufferWriter<T>;\n\n    constructor(initializer: MessageManagerBufferInitializer<T>) {\n        this.inbufferReader = initializer.newBufferReader(\n            MessageManagerBufferType.IN_OR_OUT\n        );\n        this.statebufferReader = initializer.newBufferReader(\n            MessageManagerBufferType.STATE\n        );\n        this.rpcbufferReader = initializer.newBufferReader(\n            MessageManagerBufferType.RPC\n        );\n        this.rpcCallbackBufferReader = initializer.newBufferReader(\n            MessageManagerBufferType.RPC_CALLBACK\n        );\n\n        this.outbufferWriter = initializer.newBufferWriter(\n            MessageManagerBufferType.IN_OR_OUT\n        );\n        this.statebufferWriter = initializer.newBufferWriter(\n            MessageManagerBufferType.STATE\n        );\n        this.rpcbufferWriter = initializer.newBufferWriter(\n            MessageManagerBufferType.RPC\n        );\n        this.rpcCallbackBufferWriter = initializer.newBufferWriter(\n            MessageManagerBufferType.RPC_CALLBACK\n        );\n    }\n\n    private _getUuid() {\n        if (this._uuid >= RPC_MAX_UUID) {\n            console.warn(\n                \"[MessageManager#_getUuid]UUID is great than \" + RPC_MAX_UUID\n            );\n            return 0;\n        }\n        return ++this._uuid;\n    }\n\n    startSendEntityAndComps() {\n        this.statebufferWriter.reset();\n    }\n\n    sendEntity(\n        entityId: number,\n        entityVersion: number,\n        compsLen: number,\n        toDestroy: boolean\n    ) {\n        const buf = this.statebufferWriter;\n        // entity id\n        buf.writeInt(entityId);\n        // entity compuse version\n        buf.writeInt(composeVersion(entityVersion, toDestroy));\n        // component count\n        buf.writeInt(compsLen);\n    }\n\n    sendComp(compIdx: number, comp: ISerable & IComp & ISchema): boolean {\n        const buf = this.statebufferWriter;\n        // msg type -> compoent\n\n        // comp index\n        buf.writeInt(compIdx);\n        // comp hash\n        buf.writeLong(comp.__schema__.hash);\n        // ser comp\n        comp.ser(buf);\n\n        return true;\n    }\n\n    endSendEntityAndComps() {\n        this.statebufferWriter.reset();\n    }\n\n    startRecvEntityAndComps() {}\n\n    recvEntity(): MessageEntityInfo | null {\n        const buf = this.statebufferReader;\n        if (!buf.hasNext()) return null;\n        // entity id\n        const entityId = buf.readInt();\n        // entity compuse version\n        const [entityVersion, toDestory] = decomposeVersion(buf.readInt());\n        // component length\n        const compCount = buf.readInt();\n        return {\n            entityId,\n            entityVersion,\n            destoryed: toDestory,\n            compCount,\n        };\n    }\n\n    recvCompHeader() {\n        const buf = this.statebufferReader;\n\n        // comp index\n        const compIdx = buf.readInt();\n        // comp hash\n        const hash = buf.readLong();\n        // deser comp\n        return {\n            compIdx,\n            hash,\n        };\n    }\n\n    recvCompBody(comp: ISerable & IComp) {\n        const buf = this.statebufferReader;\n        comp.deser(buf);\n    }\n\n    endRecvEntityAndComps() {}\n\n    // callRpc(methodName: number, component: any, ...args: any) {\n    //     this._rpcCalls.push({ methodName, component, args });\n    // }\n\n    startSendRpc() {\n        // this.rpcbuffer.reset();\n    }\n\n    sendRpc(\n        methodName: string,\n        component: IComp & ISchema & Record<string, Function>,\n        params: any[],\n        timestamp: number\n    ) {\n        const uuid = this._getUuid();\n        if (uuid < 0) {\n            return Promise.reject(new RpcCallbackUuidOutOfRange());\n        }\n\n        const comp = component;\n        const entity = comp.entity;\n        const compIdx = entity.indexOf(component);\n        const buf = this.rpcbufferWriter;\n        // schema\n        const s = comp.__schema__;\n        // method schema\n        const ms = s.methods[methodName];\n        // entity id\n        buf.writeInt(entity.id);\n        // comp index\n        buf.writeUshort(compIdx);\n        // method hash\n        buf.writeLong(ms.hash);\n        // timestamp\n        buf.writeLong(timestamp);\n        // uuid\n        buf.writeUint(uuid);\n        // param\n        component[\"ser\" + ms.hash](buf, params);\n        if (ms.returnType == DataTypeVoid) {\n            return;\n        } else {\n            const deferred = new Deferred();\n            this._rpcDeferred.set(\n                `${entity.id}|${compIdx}|${ms.hash}|${uuid}`,\n                {\n                    deferred,\n                    timestamp,\n                }\n            );\n            return deferred.promise;\n        }\n    }\n\n    endSendRpc() {\n        this.rpcbufferWriter.reset();\n        this._uuid = 0;\n    }\n\n    startRecvRpc() {}\n\n    recvRpc(): MessageRpcInfo | null {\n        if (!this.rpcbufferReader.hasNext()) return null;\n        const buf = this.rpcbufferReader;\n        // entity id\n        const entityId = buf.readInt();\n        // comp index\n        const compIdx = buf.readUshort();\n        // method hash\n        const methodHash = buf.readLong();\n        // timestamp\n        const timestamp = buf.readLong();\n        // uuid\n        const uuid = buf.readUint();\n        return { entityId, compIdx, methodHash, timestamp, uuid };\n    }\n\n    endRecvRpc() {}\n\n    startSendRpcCallback() {}\n\n    sendRpcCallback(info: MessageRpcInfo) {\n        const buf = this.rpcCallbackBufferWriter;\n        buf.writeInt(info.entityId);\n        buf.writeUshort(info.compIdx);\n        buf.writeLong(info.methodHash);\n        buf.writeUint(info.uuid);\n    }\n\n    endSendRpcCallback() {\n        this.rpcCallbackBufferWriter.reset();\n    }\n\n    startRecvRpcCallback() {}\n\n    recvRpcCallback(): MessageRpcCallbackInfo | null {\n        if (!this.rpcCallbackBufferReader.hasNext()) return null;\n        const buf = this.rpcCallbackBufferReader;\n        const entityId = buf.readInt();\n        const compIdx = buf.readUshort();\n        const methodHash = buf.readLong();\n        const uuid = buf.readUint();\n        return { entityId, compIdx, methodHash, uuid };\n    }\n\n    endRecvRpcCallback() {}\n\n    getRpcCallbackRecord(param: MessageRpcCallbackInfo) {\n        return this._rpcDeferred.get(\n            `${param.entityId}|${param.compIdx}|${param.methodHash}|${param.uuid}`\n        );\n    }\n}\n","import { IComp } from \"../comp-interface\";\nimport { DataType } from \"../comp-schema\";\nimport { NetSerable, NetVar } from \"../comp-decorator\";\nimport { Float } from \"../base-dirty-data\";\n\nexport interface ITime {\n    readonly delta: number;\n    readonly duration: number;\n}\n\n@NetSerable(\"logic_time\")\nexport class LogicTimeComp extends IComp implements ITime {\n    @NetVar(Float)\n    $delta = new Float(0);\n\n    get delta() {\n        return this.$delta.value;\n    }\n    set delta(value: number) {\n        this.$delta.value = value;\n    }\n\n    @NetVar(DataType.DOUBLE)\n    duration: number = 0;\n}\n\n@NetSerable(\"render_time\")\nexport class RenderTimeComp extends IComp implements ITime {\n    delta: number = 0;\n    duration: number = 0;\n}\n","import { IComp } from \"../comp-interface\";\nimport { Short } from \"../base-dirty-data\";\nimport { NetSerable, NetVar, Rpc } from \"../comp-decorator\";\nimport {\n    IDataBufferReader,\n    IDataBufferWriter,\n    ISerable,\n} from \"../data/serializable\";\nimport { DataType, Role, RpcType } from \"../comp-schema\";\n\n@NetSerable(\"role\", false)\nexport class RoleComp extends IComp implements ISerable {\n    //#region property\n    @NetVar(Short)\n    $local = new Short(Role.AUTHORITY);\n    get local(): Role {\n        return this.$local.value;\n    }\n    // set local(value: Role) {\n    //     this.$local.value = value;\n    // }\n\n    @NetVar(Short)\n    $remote = new Short(Role.SIMULATED_PROXY);\n    get remote(): Role {\n        return this.$remote.value;\n    }\n    set remote(value: Role) {\n        this.$remote.value = value;\n    }\n    //#endregion\n\n    //#region interface ISerable implement\n    ser(buffer: IDataBufferWriter<any>): void {\n        this.$local.ser(buffer);\n        this.$remote.ser(buffer);\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.$remote.deser(buffer);\n        this.$local.deser(buffer);\n    }\n    //#endregion\n\n    @Rpc(Role.AUTHORITY, DataType.BOOL)\n    async upgrade() {\n        if (\n            this.local == Role.AUTHORITY &&\n            this.remote != Role.AUTONMOUS_PROXY\n        ) {\n            this.remote = Role.AUTONMOUS_PROXY;\n            return true;\n        }\n        return false;\n    }\n\n    @Rpc(Role.AUTHORITY, DataType.BOOL)\n    async downgrade() {\n        if (\n            this.local == Role.AUTHORITY &&\n            this.remote != Role.SIMULATED_PROXY\n        ) {\n            this.remote = Role.SIMULATED_PROXY;\n            return true;\n        }\n        return false;\n    }\n\n    init() {\n        const type = this.domain.option.type;\n        this.$local.value =\n            type === RpcType.SERVER ? Role.AUTHORITY : Role.SIMULATED_PROXY;\n        this.$remote.value =\n            type === RpcType.SERVER ? Role.SIMULATED_PROXY : Role.AUTHORITY;\n    }\n}\n","import { RoleComp } from \"./builtin-comp/\";\nimport { ISchema } from \"./comp-schema\";\nimport type { Domain } from \"./domain\";\nimport { compName2ctr } from \"./global-record\";\nimport { IComp } from \"./comp-interface\";\nimport { NULL_NUM } from \"./builtin\";\n\nclass ComponentHasNotDecorated extends Error {}\n/**\n * The unit in a network.It can manager some component.\n * It include id and version, plz don't modify then if you are not undersanding!\n * It is sealed, PLZ NOT implement!!!\n * @example\n ```js\n // Must do decoration\n @NetComp\n class ViewComponent {\n     @Param(DataType.bool)\n     active = false\n }\n const ent = new Entity();\n ent.add(ViewComponent);\n ent.has(ViewComponent);\n ent.get(ViewComponent);\n Domain.ref(ent);\n ent.rm(ViewComponent);\n ```\n */\nexport class Entity<ProxyObj extends Object = any> {\n    private _id: number;\n    get id() {\n        return this._id;\n    }\n    private _version: number;\n    get version() {\n        return this._version;\n    }\n    private _domain?: Domain;\n    get domain() {\n        return this._domain!;\n    }\n    static Event = {\n        REG_ENTITY: \"reg-entity\",\n        UNREG_ENTITY: \"unreg-entity\",\n    };\n\n    $comps = new Proxy<ProxyObj>(this as any, {\n        get(target: any, p, _receiver) {\n            return target.get(compName2ctr[String(p)]);\n        },\n    });\n\n    private readonly _compMap: Map<number, IComp | IComp[]>;\n    private readonly _comps: IComp[];\n    get comps(): readonly IComp[] {\n        return this._comps;\n    }\n\n    readonly role: RoleComp;\n\n    constructor(..._comps: IComp[]) {\n        this._id = NULL_NUM;\n        this._version = NULL_NUM;\n        this._compMap = new Map();\n        this.role = new RoleComp();\n\n        this._comps = [this.role, ..._comps];\n        for (let i = 0, len = this._comps.length; i < len; i++) {\n            this._initComp(this._comps[i] as IComp & ISchema);\n        }\n    }\n\n    static NewWithoutRole(..._comps: IComp[]) {\n        const ent = Object.create(Entity.prototype);\n\n        ent._id = NULL_NUM;\n        ent._version = NULL_NUM;\n        ent.$comps = new Proxy<any>(ent, {\n            get(target: any, p, _receiver) {\n                return target.get(compName2ctr[String(p)]);\n            },\n        });\n        ent._compMap = new Map();\n        ent.role = _comps[0];\n\n        ent._comps = _comps;\n        for (let i = 0, len = ent._comps.length; i < len; i++) {\n            ent._initComp(ent._comps[i] as IComp & ISchema);\n        }\n        return ent;\n    }\n\n    protected _initComp(c: ISchema & IComp) {\n        const map = this._compMap;\n        c[\"_entity\"] = this;\n        if (!c.__schema__ || c.__schema__.hash == NULL_NUM) {\n            throw new ComponentHasNotDecorated(\"Component must use @NetComp\");\n        }\n        const hash = c.__schema__.hash;\n        if (map.has(hash)) {\n            map.set(hash, [map.get(hash) as any, c]);\n        } else {\n            map.set(hash, c);\n        }\n    }\n\n    toString() {\n        return `Entity: id=${this._id},version=${this._version}`;\n    }\n\n    get<T extends IComp>(ctr: { new (): T }): T | null {\n        const schema = ctr.prototype.__schema__;\n        if (!(schema && schema.name)) {\n            console.error(\"Componrnt must use @NetComp\");\n            return null;\n        }\n\n        if (!this._compMap.has(schema.hash)) return null;\n        const insOrArr = this._compMap.get(schema.hash)!;\n        if (!Array.isArray(insOrArr)) return insOrArr as T;\n        return insOrArr[insOrArr.length - 1] as T;\n    }\n\n    mget<T extends IComp>(ctr: { new (): T }): T[] {\n        const schema = ctr.prototype.__schema__;\n        if (!(schema && schema.name)) {\n            console.error(\"Componrnt must use @NetComp\");\n            return [];\n        }\n\n        if (!this._compMap.has(schema.hash)) return [];\n        const insOrArr = this._compMap.get(schema.hash)!;\n        if (!Array.isArray(insOrArr)) return [insOrArr as T];\n        return insOrArr as T[];\n    }\n\n    has(ctr: { new (): any }): boolean {\n        const schema = ctr.prototype.__schema__;\n        if (!(schema && schema.name)) {\n            console.error(\"Componrnt must use @NetComp\");\n            return false;\n        }\n        return this._compMap.has(schema.hash);\n    }\n\n    indexOf(ins: IComp) {\n        if (ins == null) return -1;\n        return this._comps.indexOf(ins);\n    }\n\n    protected _init() {\n        for (let i = 0, len = this._comps.length; i < len; i++) {\n            const c = this._comps[i];\n            c.init && c.init(i);\n        }\n    }\n\n    protected _renderUpdate() {\n        for (let i = 0, len = this._comps.length; i < len; i++) {\n            const c = this._comps[i];\n            c.renderUpdate && c.renderUpdate(i);\n        }\n    }\n\n    protected _logicUpdate() {\n        for (let i = 0, len = this._comps.length; i < len; i++) {\n            const c = this._comps[i];\n            c.logicUpdate && c.logicUpdate(i);\n        }\n    }\n\n    protected _destroy() {\n        for (let i = 0, len = this._comps.length; i < len; i++) {\n            const c = this._comps[i];\n            c.destroy && c.destroy(i);\n            c[\"_entity\"] = null;\n        }\n        this._comps.length = 0;\n        this._compMap.clear();\n    }\n}\n","import { LogicTimeComp, RenderTimeComp } from \"./builtin-comp\";\nimport {\n    DataTypeVoid,\n    ISchema,\n    RpcType,\n    Role,\n    SCHEME_KEY,\n} from \"./comp-schema\";\nimport { SupportNetDataType } from \"./data/serializable\";\nimport { Entity } from \"./entity\";\nimport { IComp } from \"./comp-interface\";\nimport { NULL_NUM } from \"./builtin\";\nimport {\n    MessageEntityInfo,\n    MessageManager,\n    MessageManagerBufferInitializer,\n    MessageRpcCallbackInfo,\n    MessageRpcInfo,\n} from \"./message-manager\";\nimport { asSerable, assert } from \"./misc\";\nimport { ArrayMap } from \"./array-map\";\nimport { compName2ctr, hash2compName, hash2RpcName } from \"./global-record\";\nimport { deserValue, serValue } from \"./comp-fixup\";\nimport { str as hash } from \"./lib/crc-32\";\n\nclass EntityNotValidError extends Error {}\nclass EntityRepeatRegisteredError extends Error {}\nclass EntityGroupOutOfRangeYouCanOpenAutoResize extends Error {}\nclass DomainDuplicated extends Error {}\nclass DomainCompCountNotMatch extends Error {}\n\nexport type DomainConstructorParamters<TT extends new (...args: any) => any> =\n    TT extends new (_: any, ...args: infer P) => Domain ? P : never;\n\nexport class DomainOption<T extends SupportNetDataType = string> {\n    capacity: number = 50;\n    autoResize: boolean = true;\n    fixedTimeSec: number = 0.2;\n\n    constructor(\n        readonly initializer: MessageManagerBufferInitializer<T>,\n        readonly type: RpcType\n    ) {}\n}\n\nexport class Domain<T extends SupportNetDataType = any> {\n    private static _name2domainMap: ArrayMap<string, Domain> = new ArrayMap();\n    //#region static methods\n    static Create<T extends SupportNetDataType = any>(\n        name: string,\n        option: DomainOption<T>,\n        uuid: number = hash(name)\n    ) {\n        if (this._name2domainMap.has(name)) {\n            throw new DomainDuplicated(name);\n        }\n        const news: Domain<T> = new Domain(name, option, uuid);\n        const domainIndex = this._name2domainMap.set(name, news);\n        news._index = domainIndex;\n        return news;\n    }\n\n    static Get<T extends SupportNetDataType>(name: string = \"main\") {\n        return this._name2domainMap.get(name) as Domain<T>;\n    }\n\n    static GetByEntity(entity: Entity) {\n        const domainIndex = entity.id;\n        const domain = this._name2domainMap.values[domainIndex];\n        if (domain.isValid(entity)) {\n            return domain;\n        }\n        return null;\n    }\n\n    static Clear() {\n        this._name2domainMap.clear();\n    }\n    //#endregion\n\n    //#region member variables\n    get index() {\n        return this._index;\n    }\n    private _index = -1;\n    private _entities: (Entity | null)[];\n    private _entitiesLength = 0;\n    public get entities() {\n        return this._entities;\n    }\n    public get length() {\n        return this._entitiesLength;\n    }\n    private _entityVersion: number[];\n    private _destroyEntityId: number[];\n    private _entityIdCursor = 0;\n    private _internalMsgMng: MessageManager<T>;\n    public readonly readonlyInternalMsgMng!: MessageManager<T>;\n\n    private _fixedSecAccumulator = 0;\n    public readonly time: Entity;\n    public readonly logicTime: LogicTimeComp;\n    public readonly renderTime: RenderTimeComp;\n\n    private readonly _option: DomainOption<T>;\n\n    get option() {\n        return this._option as Required<Readonly<DomainOption<T>>>;\n    }\n    //#endregion\n    protected constructor(\n        readonly name: string,\n        option: DomainOption<T>,\n        readonly uuid: number\n    ) {\n        this._option = option;\n        this._entities = new Array<Entity>(option.capacity);\n        this._entityVersion = new Array<number>(option.capacity);\n        this._entityVersion.fill(0);\n        this._destroyEntityId = new Array<number>();\n        this._internalMsgMng = new MessageManager(option.initializer);\n        this.readonlyInternalMsgMng = this._internalMsgMng;\n\n        this.logicTime = new LogicTimeComp();\n        this.renderTime = new RenderTimeComp();\n        this.time = new Entity(this.logicTime, this.renderTime);\n        this.logicTime.delta = this.option.fixedTimeSec;\n\n        this.reg(this.time);\n    }\n\n    //#region public methods\n    reg(entity: Entity) {\n        if (this.isValid(entity))\n            throw new EntityRepeatRegisteredError(entity.toString());\n        if (this._entityIdCursor == this._option.capacity) {\n            if (this._option.autoResize) {\n                this.resize(Math.ceil(this._option.capacity * 1.5));\n            } else\n                throw new EntityGroupOutOfRangeYouCanOpenAutoResize(\n                    `Domain: capacity: ${this._option.capacity}; ` +\n                        entity.toString()\n                );\n        }\n\n        const id = this._getEntityId();\n        const version = this._entityVersion[id];\n        this._reg(entity, id, version);\n        entity[\"_init\"]();\n    }\n\n    hasReg(entity: Entity) {\n        return this.isValid(entity);\n    }\n\n    unregWithoutValidation(entity: Entity) {\n        const index = entity.id;\n        this._entityVersion[index]++;\n        this._unreg(entity);\n        this._destroyEntityId.push(entity.id);\n        this._entities[index] = null;\n        entity[\"_destroy\"]();\n    }\n\n    unreg(entity: Entity) {\n        if (!this.isValid(entity))\n            throw new EntityNotValidError(entity.toString());\n        this.unregWithoutValidation(entity);\n    }\n\n    get(id: number) {\n        return this._entities[id];\n    }\n\n    resize(newSize: number) {\n        const oldSize = this._option.capacity;\n        this._entities.length = newSize;\n        this._entityVersion.length = newSize;\n        this._entityVersion.fill(0, oldSize, newSize);\n        this._option.capacity = newSize;\n    }\n\n    isValid(entity: Entity) {\n        return (\n            entity.id != NULL_NUM &&\n            entity.version != NULL_NUM &&\n            entity.version == this._entityVersion[entity.id]\n        );\n    }\n\n    asData(): T {\n        const isServer = this._option.type == RpcType.SERVER;\n        const outBuf = this._internalMsgMng.outbufferWriter;\n        const stateBuf = this._internalMsgMng.statebufferWriter;\n        const rpcBuf = this._internalMsgMng.rpcbufferWriter;\n        const rpcCbBuf = this._internalMsgMng.rpcCallbackBufferWriter;\n\n        outBuf.reset();\n        outBuf.writeInt(this.uuid).writeBoolean(isServer);\n\n        if (isServer) {\n            this._internalMsgMng.startSendEntityAndComps();\n            this._internalMsgMng.startSendRpc();\n            this._internalMsgMng.startSendRpcCallback();\n\n            this._serEntityAndComps();\n            const stateLen = stateBuf.writerCursor;\n            const rpcLen = rpcBuf.writerCursor;\n            const rpcCbLen = rpcCbBuf.writerCursor;\n\n            outBuf\n                .writeUlong(stateLen)\n                .writeUlong(rpcLen)\n                .writeUlong(rpcCbLen)\n                .append(stateBuf)\n                .append(rpcBuf)\n                .append(rpcCbBuf);\n\n            this._internalMsgMng.endSendEntityAndComps();\n            this._internalMsgMng.endSendRpc();\n            this._internalMsgMng.endSendRpcCallback();\n        } else {\n            this._internalMsgMng.startSendRpc();\n            this._internalMsgMng.startSendRpcCallback();\n\n            const rpcLen = rpcBuf.writerCursor;\n            const rpcCbLen = rpcCbBuf.writerCursor;\n\n            outBuf\n                .writeUlong(rpcLen)\n                .writeUlong(rpcCbLen)\n                .append(rpcBuf)\n                .append(rpcCbBuf);\n\n            this._internalMsgMng.endSendRpc();\n            this._internalMsgMng.endSendRpcCallback();\n        }\n\n        return outBuf.flush();\n    }\n\n    setData(source: T) {\n        const inBuf = this._internalMsgMng.inbufferReader;\n        const stateBuf = this._internalMsgMng.statebufferReader;\n        const rpcBuf = this._internalMsgMng.rpcbufferReader;\n        const rpcCbBuf = this._internalMsgMng.rpcCallbackBufferReader;\n\n        inBuf.set(source);\n        /* const uuid =  */ inBuf.readInt();\n        const isServer = inBuf.readBoolean();\n\n        if (isServer) {\n            const stateLen = inBuf.readUlong();\n            const rpcLen = inBuf.readUlong();\n            const rpcCbLen = inBuf.readUlong();\n\n            const stateStart = inBuf.readerCursor;\n            const stateEnd = stateStart + stateLen;\n\n            const rpcStart = stateEnd;\n            const rpcEnd = rpcStart + rpcLen;\n\n            const rpcCbStart = rpcEnd;\n            const rpcCbEnd = rpcCbStart + rpcCbLen;\n\n            stateBuf.set(source, stateStart, stateEnd);\n            rpcBuf.set(source, rpcStart, rpcEnd);\n            rpcCbBuf.set(source, rpcCbStart, rpcCbEnd);\n\n            this._internalMsgMng.startRecvEntityAndComps();\n            this._derEntityAndComps();\n            this._internalMsgMng.endRecvEntityAndComps();\n\n            this._internalMsgMng.startRecvRpc();\n            this._deserRpcs();\n            this._internalMsgMng.endRecvRpc();\n\n            this._internalMsgMng.startRecvRpcCallback();\n            this._deserRpcCallbacks();\n            this._internalMsgMng.endRecvRpcCallback();\n        } else {\n            const rpcLen = inBuf.readUlong();\n            const rpcCbLen = inBuf.readUlong();\n\n            const rpcStart = inBuf.readerCursor;\n            const rpcEnd = rpcStart + rpcLen;\n\n            const rpcCbStart = rpcEnd;\n            const rpcCbEnd = rpcCbStart + rpcCbLen;\n\n            rpcBuf.set(source, rpcStart, rpcEnd);\n            rpcCbBuf.set(source, rpcCbStart, rpcCbEnd);\n\n            this._internalMsgMng.startRecvRpc();\n            this._deserRpcs();\n            this._internalMsgMng.endRecvRpc();\n\n            this._internalMsgMng.startRecvRpcCallback();\n            this._deserRpcCallbacks();\n            this._internalMsgMng.endRecvRpcCallback();\n        }\n    }\n\n    update(dtSec: number) {\n        this._fixedSecAccumulator += dtSec;\n        const fixedDeltaTime = this.logicTime.delta;\n        while (this._fixedSecAccumulator > fixedDeltaTime) {\n            this._fixedSecAccumulator -= fixedDeltaTime;\n            this.logicTime.duration += fixedDeltaTime;\n            for (let i = 0, len = this._entitiesLength; i < len; i++) {\n                const ent = this._entities[i];\n                if (!ent) continue;\n                if (\n                    ent.role.local === Role.AUTHORITY ||\n                    ent.role.local === Role.AUTONMOUS_PROXY\n                ) {\n                    ent[\"_logicUpdate\"]();\n                }\n            }\n        }\n\n        this.renderTime.delta = dtSec;\n        this.renderTime.duration += dtSec;\n        for (let i = 0, len = this._entitiesLength; i < len; i++) {\n            const ent = this._entities[i];\n            if (!ent) continue;\n            ent[\"_renderUpdate\"]();\n        }\n    }\n\n    //#endregion\n\n    //#region protected methods\n    protected _reg(entity: Entity, id: number, version: number) {\n        entity[\"_id\"] = id;\n        entity[\"_version\"] = version;\n        entity[\"_domain\"] = this;\n        const index = entity.id;\n        this._entities[index] = entity;\n        if (index >= this._entitiesLength) {\n            this._entitiesLength = index + 1;\n        }\n    }\n\n    protected _unreg(entity: Entity) {\n        entity[\"_id\"] = NULL_NUM;\n        entity[\"_version\"] = NULL_NUM;\n        entity[\"_domain\"] = undefined;\n    }\n\n    protected _serEntityAndComps() {\n        for (let i = 0, len = this._entitiesLength; i < len; i++) {\n            const ent = this._entities[i];\n            if (!ent) {\n                this._internalMsgMng.sendEntity(\n                    i,\n                    this._entityVersion[i],\n                    0,\n                    true\n                );\n                continue;\n            }\n            this._internalMsgMng.sendEntity(\n                ent.id,\n                ent.version,\n                ent.comps.length,\n                false\n            );\n            const comps = ent.comps;\n            for (\n                let compIdx = 0, len = comps.length;\n                compIdx < len;\n                compIdx++\n            ) {\n                const comp = comps[compIdx] as ISchema & IComp;\n                const serableComp = asSerable(comp);\n                if (!serableComp) {\n                    console.warn(\n                        `[Domain#_ser(compIdx: ${compIdx}, entity: ${ent})]comp is not Serable!`\n                    );\n                    continue;\n                }\n                this._internalMsgMng.sendComp(compIdx, serableComp);\n            }\n        }\n    }\n\n    protected _derEntityAndComps() {\n        let params: MessageEntityInfo | null;\n        while ((params = this._internalMsgMng.recvEntity())) {\n            let ent = this._entities[params.entityId];\n            if (\n                ent &&\n                (ent.version != params.entityVersion || params.destoryed)\n            ) {\n                this.unreg(ent);\n                ent = null;\n            }\n            if (!params.destoryed) {\n                ent = ent\n                    ? this._derEntityAndCompsUnderExisted(params, ent)\n                    : this._derEntityAndCompsUnderUnExsited(params);\n            }\n        }\n    }\n\n    protected _derEntityAndCompsUnderExisted(\n        params: MessageEntityInfo,\n        entity: Entity\n    ) {\n        const entComps = entity.comps;\n        assert(params.compCount == entComps.length, DomainCompCountNotMatch);\n        for (let i = 0, len = params.compCount; i < len; i++) {\n            const compHeaderInfo = this._internalMsgMng.recvCompHeader();\n            const comp = asSerable(entComps[compHeaderInfo.compIdx]);\n            if (!comp) continue;\n            this._internalMsgMng.recvCompBody(comp);\n        }\n        return entity;\n    }\n\n    protected _derEntityAndCompsUnderUnExsited(params: MessageEntityInfo) {\n        const compArr = new Array<IComp>(params.compCount);\n        for (let i = 0, len = params.compCount; i < len; i++) {\n            const compHeaderInfo = this._internalMsgMng.recvCompHeader();\n            const compName = hash2compName[compHeaderInfo.hash];\n            const CompCtr = compName2ctr[compName];\n            const comp = new CompCtr();\n            this._internalMsgMng.recvCompBody(comp);\n            compArr[compHeaderInfo.compIdx] = comp;\n        }\n        const e = Entity.NewWithoutRole(...compArr);\n        this.reg(e);\n        return e;\n    }\n\n    protected _deserRpcs() {\n        let param: MessageRpcInfo | null;\n        while ((param = this._internalMsgMng.recvRpc())) {\n            const ent = this.get(param.entityId);\n            if (!ent) continue;\n            const comp = ent.comps[param.compIdx] as IComp &\n                ISchema &\n                Record<string, Function>;\n            if (!comp) continue;\n            const argus = comp[\"deser\" + param.methodHash](\n                this._internalMsgMng.rpcbufferReader\n            );\n            const methodName = hash2RpcName[param.methodHash];\n            const unknown = comp[methodName].apply(comp, argus);\n\n            const s = comp[SCHEME_KEY];\n            const ms = s.methods[methodName];\n            if (ms.returnType != DataTypeVoid) {\n                const w = param!;\n                unknown?.then((result: any) => {\n                    this._internalMsgMng.sendRpcCallback(w);\n                    serValue(\n                        ms.returnType,\n                        result,\n                        this._internalMsgMng.rpcCallbackBufferWriter\n                    );\n                });\n            }\n        }\n    }\n\n    protected _deserRpcCallbacks() {\n        let param: MessageRpcCallbackInfo | null;\n        while ((param = this._internalMsgMng.recvRpcCallback())) {\n            const ent = this.get(param.entityId);\n            if (!ent) continue;\n            const comp = ent.comps[param.compIdx] as IComp &\n                ISchema &\n                Record<string, Function>;\n            if (!comp) continue;\n            const s = comp[SCHEME_KEY];\n            const methodName = hash2RpcName[param.methodHash];\n            const ms = s.methods[methodName];\n            let result: any;\n            if (ms.returnType != DataTypeVoid) {\n                result = deserValue(\n                    ms.returnType,\n                    this._internalMsgMng.rpcCallbackBufferReader,\n                    undefined,\n                    ms.returnRefCtr\n                );\n            }\n            const callbackRecord =\n                this._internalMsgMng.getRpcCallbackRecord(param);\n            if (!callbackRecord) continue;\n            callbackRecord.deferred.resolve(result);\n        }\n    }\n\n    protected _getEntityId() {\n        return this._destroyEntityId.length > 0\n            ? this._destroyEntityId.unshift()\n            : this._entityIdCursor++;\n    }\n    //#endregion\n}\n","import { IDataBufferReader, IDataBufferWriter } from \"./serializable\";\n\nconst tempTypedBuffer = {\n    int: new Int32Array(1),\n    uint: new Uint32Array(1),\n    short: new Int16Array(1),\n    ushort: new Uint16Array(1),\n    long: new Int32Array(1),\n    ulong: new Uint32Array(1),\n    float: new Float32Array(1),\n    double: new Float64Array(1),\n};\n\nexport class StringDataBufferOutOfRange extends Error {}\n\nexport class StringDataBuffer\n    implements IDataBufferWriter<string>, IDataBufferReader<string>\n{\n    public writeBuffer: any[] = [];\n    public writerCursor = 0;\n\n    public readBuffer: any[] = [];\n    public readerCursor = 0;\n    public readerStart = 0;\n    public readerEnd = 0;\n\n    protected check(increment = 0) {\n        if (\n            this.writerCursor + increment >= this.readBuffer.length &&\n            this.writerCursor + increment >= this.readerEnd\n        ) {\n            throw new StringDataBufferOutOfRange(\n                `Cursor: (${this.writerCursor}), buffer's length: (${this.writeBuffer.length})`\n            );\n        }\n    }\n    reset(): void {\n        this.writerCursor = 0;\n        this.readerCursor = 0;\n        this.readBuffer.length = 0;\n        this.writeBuffer.length = 0;\n    }\n    readInt(): number {\n        this.check();\n        const temp = tempTypedBuffer.int;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readUint(): number {\n        this.check();\n        const temp = tempTypedBuffer.uint;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readShort(): number {\n        this.check();\n        const temp = tempTypedBuffer.short;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readUshort(): number {\n        this.check();\n        const temp = tempTypedBuffer.ushort;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readLong(): number {\n        this.check();\n        const temp = tempTypedBuffer.long;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readUlong(): number {\n        this.check();\n        const temp = tempTypedBuffer.ulong;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readFloat(): number {\n        this.check();\n        const temp = tempTypedBuffer.float;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readDouble(): number {\n        this.check();\n        const temp = tempTypedBuffer.double;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readBoolean(): boolean {\n        this.check();\n        return Boolean(this.readBuffer[this.readerCursor++]);\n    }\n    set(source: string, start = 0, end = -1): void {\n        this.writerCursor = 0;\n        const dst = JSON.parse(source);\n\n        let dstChecked = Array.isArray(dst) ? dst : [];\n        if (end < 0) {\n            end += dstChecked.length;\n        }\n        this.readerStart = this.readerCursor = start;\n        this.readerEnd = end;\n        this.readBuffer = dstChecked;\n    }\n\n    writeInt(source: number): this {\n        const temp = tempTypedBuffer.int;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeUint(source: number): this {\n        const temp = tempTypedBuffer.uint;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeShort(source: number): this {\n        const temp = tempTypedBuffer.short;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeUshort(source: number): this {\n        const temp = tempTypedBuffer.ushort;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeLong(source: number): this {\n        const temp = tempTypedBuffer.long;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeUlong(source: number): this {\n        const temp = tempTypedBuffer.ulong;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeFloat(source: number): this {\n        const temp = tempTypedBuffer.float;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeDouble(source: number): this {\n        const temp = tempTypedBuffer.double;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeBoolean(source: boolean): this {\n        this.writeBuffer[this.writerCursor++] = source ? 1 : 0;\n        return this;\n    }\n\n    flush(): string {\n        this.writeBuffer.length = this.writerCursor;\n        const outValue = JSON.stringify(this.writeBuffer);\n        this.reset();\n        return outValue;\n    }\n\n    hasNext(): boolean {\n        return (\n            this.readerCursor < this.readBuffer.length &&\n            this.readerCursor < this.readerEnd\n        );\n    }\n\n    append(other: this): this {\n        this.writeBuffer.push.apply(this.writeBuffer, other.writeBuffer);\n        this.writerCursor += other.writerCursor;\n        other.reset();\n        return this;\n    }\n}\n","import { RpcType } from \"../comp-schema\";\nimport { DomainOption } from \"../domain\";\nimport {\n    MessageManagerBufferInitializer,\n    MessageManagerBufferType,\n} from \"../message-manager\";\nimport { StringDataBuffer } from \"./string-databuffer\";\n\nconst stringInitializer: MessageManagerBufferInitializer<string> = {\n    newBufferReader(_type: MessageManagerBufferType) {\n        return new StringDataBuffer();\n    },\n\n    newBufferWriter(_type: MessageManagerBufferType) {\n        return new StringDataBuffer();\n    },\n};\n\nexport class StringDomainOption extends DomainOption<string> {\n    constructor(type: RpcType) {\n        super(stringInitializer, type);\n    }\n}\n","import { Deferred } from \"../src\";\n\nexport interface Receiver {\n    receive(data: any): void;\n}\n\nexport class MockTcp<T> {\n    private _arr: Deferred<T>[] = [];\n    receiver?: Receiver;\n    constructor() {}\n\n    send(defer: Deferred<T>) {\n        this._arr.push(defer);\n    }\n\n    update() {\n        let defer: Deferred<T>;\n        while (this._arr.length >= 1 && (defer = this._arr[0]).isFulfilled()) {\n            this.receiver?.receive(defer.value);\n            this._arr.shift();\n        }\n    }\n}\n\nexport class Net {\n    static delay = 0;\n    static jitter = 0;\n\n    private static _serverTcp = new MockTcp<string | ArrayBuffer>();\n    private static _client1Tcp = new MockTcp<string | ArrayBuffer>();\n    private static _client2Tcp = new MockTcp<string | ArrayBuffer>();\n    static set server(value: Receiver) {\n        this._serverTcp.receiver = value;\n    }\n    static set client1(value: Receiver) {\n        this._client1Tcp.receiver = value;\n    }\n    static set client2(value: Receiver) {\n        this._client2Tcp.receiver = value;\n    }\n\n    static clone(src: string | ArrayBuffer) {\n        return src;\n    }\n\n    static send<T extends string | ArrayBuffer>(obj: T) {\n        return {\n            server: () => {\n                const defer = new Deferred<string | ArrayBuffer>();\n                setTimeout(\n                    () => defer.resolve(this.clone(obj)),\n                    this.delay + Math.random() * this.jitter\n                );\n                this._serverTcp.send(defer);\n            },\n            c1: () => {\n                const defer = new Deferred<string | ArrayBuffer>();\n                setTimeout(\n                    () => defer.resolve(this.clone(obj)),\n                    this.delay + Math.random() * this.jitter\n                );\n                this._client1Tcp.send(defer);\n            },\n            c2: () => {\n                const defer = new Deferred<string | ArrayBuffer>();\n                setTimeout(\n                    () => defer.resolve(this.clone(obj)),\n                    this.delay + Math.random() * this.jitter\n                );\n                this._client2Tcp.send(defer);\n            },\n        };\n    }\n\n    static startUpdate() {\n        setTimeout(() => this.startUpdate());\n        this._serverTcp.update();\n        this._client1Tcp.update();\n        this._client2Tcp.update();\n    }\n}\n","import {\n    DataType,\n    IComp,\n    NetSerable,\n    NetVar,\n    Role,\n    Rpc,\n    RpcType,\n    RpcVar,\n} from \"../src\";\n\n@NetSerable(\"vec\")\nexport class Vector {\n    @NetVar(DataType.INT)\n    x: number = 0;\n    @NetVar(DataType.INT)\n    y: number = 0;\n}\n\n@NetSerable(\"trans\")\nexport class Transform extends IComp {\n    @NetVar(Vector)\n    pos = new Vector();\n\n    @Rpc(Role.AUTHORITY)\n    serverMove(\n        @RpcVar(DataType.FLOAT) x: number,\n        @RpcVar(DataType.FLOAT) y: number\n    ) {\n        if (x != 0 || y != 0) {\n            console.log(`${x} : ${y}`);\n        }\n        this.pos.x += x;\n        this.pos.y += y;\n    }\n}\n\n@NetSerable(\"view\")\nexport class View extends IComp {\n    @NetVar(DataType.INT)\n    color = 0xffffff;\n\n    @Rpc(Role.AUTHORITY)\n    changeColor(@RpcVar(DataType.INT) inColor: number) {\n        this.color = inColor;\n    }\n\n    private _ctx?: CanvasRenderingContext2D;\n\n    bindCanvas(ctx: CanvasRenderingContext2D) {\n        this._ctx = ctx;\n    }\n\n    renderUpdate() {\n        const trs = this.get(Transform);\n        const view = this.get(View);\n        if (!this._ctx || !trs || !view) return;\n        this.drawBall(this._ctx, trs.pos, \"#\" + view.color.toString(16));\n    }\n\n    protected drawBall(\n        ctx: CanvasRenderingContext2D,\n        pos: Vector,\n        color: string\n    ) {\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.arc(pos.x, pos.y, 26, 0, 2 * Math.PI);\n        ctx.fill();\n    }\n}\n\nexport interface ControlKeyboarnMap {\n    left: string;\n    right: string;\n}\n\nexport interface UserInput {\n    isLeft: boolean;\n    isRight: boolean;\n}\n\n@NetSerable(\"controller\")\nexport class Controller extends IComp {\n    private _input: UserInput = { isLeft: false, isRight: false };\n    private _onKeyDownDel: any;\n    private _onKeyUpDel: any;\n    private _enable = false;\n    controlMap!: ControlKeyboarnMap;\n    getEnable() {\n        return this._enable;\n    }\n\n    setEnable(value: false): void;\n    setEnable(value: true, controlMap: ControlKeyboarnMap): void;\n    setEnable(value: boolean, controlMap?: ControlKeyboarnMap): void {\n        if (this._enable == value) return;\n        this.controlMap = controlMap!;\n        if (value) {\n            window.addEventListener(\"keydown\", this._onKeyDownDel);\n            window.addEventListener(\"keyup\", this._onKeyUpDel);\n        } else {\n            window.removeEventListener(\"keydown\", this._onKeyDownDel);\n            window.removeEventListener(\"keyup\", this._onKeyUpDel);\n        }\n        this._enable = value;\n    }\n\n    constructor() {\n        super();\n        this._onKeyDownDel = this.onKeyDown.bind(this);\n        this._onKeyUpDel = this.onKeyUp.bind(this);\n    }\n\n    onKeyDown(ev: KeyboardEvent) {\n        const map = this.controlMap;\n        if (ev.key === map.left) {\n            this._input.isLeft = true;\n        } else if (ev.key === map.right) {\n            this._input.isRight = true;\n        }\n    }\n\n    onKeyUp(ev: KeyboardEvent) {\n        const map = this.controlMap;\n        if (ev.key === map.left) {\n            this._input.isLeft = false;\n        } else if (ev.key === map.right) {\n            this._input.isRight = false;\n        }\n    }\n\n    renderUpdate() {\n        if (!this._enable) return;\n        const input = this._input;\n        const trans = this.get(Transform)!;\n        const dirX = (input.isLeft ? -1 : 0) + (input.isRight ? 1 : 0);\n        trans.serverMove(dirX * this.domain.renderTime.delta * 100, 0);\n    }\n}\n","import {\n    Domain,\n    Entity,\n    Rpc,\n    RpcType,\n    StringDataBuffer,\n    StringDomainOption,\n} from \"../src\";\nimport { Net } from \"./mock-net\";\nimport { Controller, Transform, Vector, View } from \"./net-comp\";\nexport * from \"./net-comp\";\nexport * from \"./mock-net\";\n\nconst COLOR_YELLOW = 0xf7d94c;\nconst COLOR_WHITE = 0xf8c3cd;\nconst CONTROLLER_MAP = {\n    1: { left: \"a\", right: \"d\" },\n    2: { left: \"ArrowLeft\", right: \"ArrowRight\" },\n} as any;\nexport abstract class Base {\n    readonly domain: Domain;\n    protected ctx: CanvasRenderingContext2D;\n    bg = \"#947A6D\";\n    myLoop: FrameRequestCallback;\n\n    isPrediction = false;\n    isInterpolation = false;\n    isRollback = false;\n\n    lastTimeStamp = 0;\n    actorArr: Entity[] = [];\n\n    constructor(\n        name: string,\n        readonly canvas: HTMLCanvasElement,\n        rpcType: RpcType\n    ) {\n        this.domain = Domain.Create(name, new StringDomainOption(rpcType));\n        this.ctx = canvas.getContext(\"2d\")!;\n        this.canvas.width = 950;\n        this.canvas.height = 70;\n        this.ctx.fillStyle = this.bg;\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        this.myLoop = this.loop.bind(this);\n        this.initScene();\n        this.loop(0);\n    }\n\n    loop(timestamp: number) {\n        const dt = this.lastTimeStamp == 0 ? 0 : timestamp - this.lastTimeStamp;\n        this.lastTimeStamp = timestamp;\n        this.renderBg();\n        this.domain.update(dt / 1000);\n    }\n\n    initScene() {\n        const v1 = new View();\n        v1.bindCanvas(this.ctx);\n        const t1 = new Transform();\n        t1.pos.x = 30;\n        t1.pos.y = 35;\n        const c1 = new Entity(v1, t1, new Controller());\n\n        const v2 = new View();\n        v2.bindCanvas(this.ctx);\n        const t2 = new Transform();\n        t2.pos.x = 50;\n        t2.pos.y = 35;\n        const c2 = new Entity(v2, t2, new Controller());\n\n        this.domain.reg(c1);\n        this.domain.reg(c2);\n\n        v1.changeColor(COLOR_YELLOW);\n        v2.changeColor(COLOR_WHITE);\n\n        this.actorArr.push(c1, c2);\n    }\n\n    renderBg() {\n        this.canvas.width = this.canvas.width;\n        const ctx = this.ctx;\n\n        ctx.fillStyle = this.bg;\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    receive(data: any) {\n        if (this.isPrediction) return;\n        this.domain.setData(data);\n    }\n}\n\nexport class Server extends Base {\n    sendAccumulator = 0;\n    constructor(readonly canvas: HTMLCanvasElement) {\n        super(\"server\", canvas, RpcType.SERVER);\n    }\n\n    loop(dt: number) {\n        super.loop(dt);\n        this.sendAccumulator += this.domain.renderTime.delta;\n        if (this.sendAccumulator >= 1 / 20) {\n            const outData = this.domain.asData();\n            Net.send(outData).c1();\n            Net.send(outData).c2();\n            this.sendAccumulator = 0;\n        }\n    }\n}\n\nexport class Client extends Base {\n    constructor(readonly index: number, readonly canvas: HTMLCanvasElement) {\n        super(\"client\" + index, canvas, RpcType.CLIENT);\n        this.actorArr[index - 1]\n            .get(Controller)\n            ?.setEnable(true, CONTROLLER_MAP[index]);\n    }\n\n    loop(dt: number) {\n        super.loop(dt);\n        const outData = this.domain.asData();\n        Net.send(outData).server();\n    }\n}\n"],"names":["RpcType","Role","DataType","Object","IComp","this","_entity","domain","$comps","ctr","get","genMethodSchema","o","create","hash","name","paramCount","paramTypes","returnType","type","getOrCreateScheme","prototype","hasOwnProperty","s","count","props","methods","raw","superSchema","getPrototypeOf","push","apply","source","_name2indexRecord","_values","length","i","len","_a","key","value","ArrayMap","idx","getIndex","index","deleted","Array","from","asSerable","obj","ser","deser","state","fate","promise","Promise","resolve","reject","_this","_resolve","_reject","then","res","_value","Deferred","reason","T","c","table","n","Int32Array","signed_crc_table","str","seed","C","L","d","charCodeAt","Config","eval","Function","hash2compName","compName2ctr","hash2RpcName","serValue","buffer","INT","I32","writeInt","FLOAT","F32","writeFloat","DOUBLE","F64","writeDouble","BOOL","writeBoolean","genSerValueJit","valueStr","bufferStr","genForeachSerValueJit","to","arrStr","outStr","deserValue","ref","refCtr","readInt","readFloat","readDouble","readBoolean","genForeachDeserValueJit","recevierStr","genDeserValueJit","fixupSerable","schema","prop","propertyKey","container","dataType","i_1","j","arr","i_2","fixedupSerableState","fixedupSerableRpc","rpcNames","keys","name_1","ms","args","len_1","len_2","privateName","_i","entity","role","local","readonlyInternalMsgMng","sendRpc","logicTime","duration","fixupSerableJIT","serJitStr","itemSerFuncStr","deserJitStr","fixedupSerableStateJit","fixedupSerableRpcJit","name_2","jitStr","__extends","Error","sortComponentPropertyKey","a","b","akey","bkey","WhyPropertyKeyHasTheSameError","NetSerable","genSerable","target","sort","paramIndex","v","fixupSerableWithoutState","NetVar","t","String","undefined","Rpc","Crc32PropertyKeyHashConflict","returnRefCtr","console","warn","RpcVar","parameterIndex","MessageType","ADirty","old","dirty","_super","Int","inValue","getsetDirty","__decorate","Float","Long","writeLong","readLong","LONG","Uint","writeUint","readUint","uint","Double","Ulong","writeUlong","readUlong","ulong","Short","writeShort","readShort","SHORT","Ushort","writeUshort","readUshort","ushort","LogicTimeComp","$delta","RenderTimeComp","AUTHORITY","SIMULATED_PROXY","RoleComp","$local","$remote","remote","AUTONMOUS_PROXY","option","SERVER","_comps","Proxy","p","_receiver","_id","_version","_compMap","Map","_initComp","Entity","_domain","ent","map","__schema__","ComponentHasNotDecorated","has","set","error","insOrArr","isArray","ins","indexOf","init","renderUpdate","logicUpdate","destroy","clear","REG_ENTITY","UNREG_ENTITY","MessageManagerBufferType","initializer","inbufferReader","newBufferReader","IN_OR_OUT","statebufferReader","STATE","rpcbufferReader","RPC","rpcCallbackBufferReader","RPC_CALLBACK","outbufferWriter","newBufferWriter","statebufferWriter","rpcbufferWriter","rpcCallbackBufferWriter","MessageManager","_uuid","reset","entityId","entityVersion","compsLen","toDestroy","num","buf","compIdx","comp","hasNext","version","destoryed","compCount","methodName","component","params","timestamp","uuid","_getUuid","RpcCallbackUuidOutOfRange","id","deferred","_rpcDeferred","methodHash","info","param","_option","_entities","capacity","_entityVersion","fill","_destroyEntityId","_internalMsgMng","renderTime","time","delta","fixedTimeSec","reg","Domain","_name2domainMap","DomainDuplicated","news","domainIndex","_index","values","isValid","_entitiesLength","EntityRepeatRegisteredError","toString","_entityIdCursor","autoResize","EntityGroupOutOfRangeYouCanOpenAutoResize","resize","Math","ceil","_getEntityId","_reg","_unreg","EntityNotValidError","unregWithoutValidation","newSize","oldSize","isServer","outBuf","stateBuf","rpcBuf","rpcCbBuf","startSendEntityAndComps","startSendRpc","startSendRpcCallback","_serEntityAndComps","stateLen","writerCursor","rpcLen","rpcCbLen","append","endSendEntityAndComps","endSendRpc","endSendRpcCallback","flush","inBuf","stateStart","readerCursor","stateEnd","rpcCbEnd","rpcCbStart","rpcEnd","rpcStart","startRecvEntityAndComps","_derEntityAndComps","endRecvEntityAndComps","startRecvRpc","_deserRpcs","endRecvRpc","startRecvRpcCallback","_deserRpcCallbacks","endRecvRpcCallback","dtSec","_fixedSecAccumulator","fixedDeltaTime","sendEntity","comps","serableComp","sendComp","recvEntity","unreg","_derEntityAndCompsUnderExisted","_derEntityAndCompsUnderUnExsited","entComps","errrorClass","assert","DomainCompCountNotMatch","recvCompHeader","recvCompBody","compArr","compHeaderInfo","compName","CompCtr","e","NewWithoutRole","this_1","argus","unknown","w_1","result","sendRpcCallback","recvRpc","recvRpcCallback","callbackRecord","getRpcCallbackRecord","unshift","tempTypedBuffer","int","Uint32Array","short","Int16Array","Uint16Array","long","float","Float32Array","double","Float64Array","StringDataBuffer","increment","readBuffer","readerEnd","StringDataBufferOutOfRange","writeBuffer","check","temp","Boolean","start","end","dst","JSON","parse","dstChecked","readerStart","outValue","stringify","other","stringInitializer","_type","DomainOption","MockTcp","defer","_arr","isFulfilled","receiver","receive","shift","Net","_serverTcp","_client1Tcp","_client2Tcp","src","server","setTimeout","clone","delay","random","jitter","send","c1","c2","startUpdate","update","Vector","Transform","x","y","log","pos","__param","View","inColor","color","ctx","_ctx","trs","view","View_1","drawBall","fillStyle","beginPath","arc","PI","isLeft","isRight","_onKeyDownDel","onKeyDown","bind","_onKeyUpDel","onKeyUp","Controller","_enable","controlMap","window","addEventListener","removeEventListener","ev","left","_input","right","input","trans","dirX","serverMove","CONTROLLER_MAP","1","2","canvas","rpcType","Create","StringDomainOption","getContext","width","height","bg","fillRect","myLoop","loop","initScene","Base","dt","lastTimeStamp","renderBg","v1","bindCanvas","t1","v2","t2","changeColor","actorArr","data","isPrediction","setData","Server","sendAccumulator","outData","asData","CLIENT","setEnable","Client"],"mappings":"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"}