{"version":3,"file":"bundle.js","sources":["../src/comp-interface.ts","../src/comp-schema.ts","../src/macro.ts","../src/array-map.ts","../src/misc.ts","../src/lib/crc-32/index.js","../src/config.ts","../src/global-record.ts","../src/comp-fixup.ts","../src/comp-decorator.ts","../src/base-dirty-data.ts","../src/builtin-comp/time.ts","../src/message-manager.ts","../src/builtin-comp/role.ts","../src/entity.ts","../src/data/string-databuffer.ts","../src/domain.ts","mock-net.ts","net-comp.ts","index.ts"],"sourcesContent":["import { Entity } from \"./entity\";\n\nexport abstract class IComp {\n    private _entity?: Entity | null;\n    get entity() {\n        return this._entity!;\n    }\n    get domain() {\n        return this._entity!.domain;\n    }\n    get $comps() {\n        return this._entity!.$comps;\n    }\n\n    get<T extends IComp>(ctr: { new (): T }): T | null {\n        return this._entity!.get(ctr);\n    }\n\n    init?(compIdx: number): void;\n    renderUpdate?(compIdx: number): void;\n    logicUpdate?(compIdx: number): void;\n    destroy?(compIdx: number): void;\n}\n","import { NULL_NUM, NULL_STR } from \"./macro\";\n\nexport interface PropSchema {\n    paramIndex: number;\n    propertyKey: string;\n    type: NetFiledType;\n}\n\nexport interface Schema {\n    name: string;\n    hash: number;\n    count: number;\n    props: Record<string, PropSchema>;\n    methods: Record<string, MethodSchema>;\n    raw: PropSchema[];\n}\n\nexport interface NetFiledType {\n    container: number;\n    dataType: DataType;\n    refCtr?: { new (): any };\n}\n\nexport interface MethodSchema {\n    name: string;\n    hash: number;\n    paramTypes: DataType[];\n    paramCount: number;\n    returnType: DataType;\n    returnRefCtr?: any;\n    type: Role;\n}\n\nexport enum RpcType {\n    SERVER,\n    CLIENT,\n}\n\nexport enum Role {\n    AUTHORITY = 1,\n    SIMULATED_PROXY,\n    AUTONMOUS_PROXY,\n}\n\n// prettier-ignore\nexport enum DataType {\n    NONE, I8 = 1, U8, I16, U16, I32, U32, F32, F64,\n    SHORT, ushort, INT, uint, LONG, ulong, FLOAT, DOUBLE, STRING, BOOL\n}\nexport const DataTypeObect = 99 as DataType;\nexport const DataTypeVoid = 98 as DataType;\n\nexport type ComponentConstructor<T = any> = { new (): T } & {\n    __schema__: Schema;\n};\n\nexport function genSchema(o = Object.create(null)): Schema {\n    o.hash = NULL_NUM;\n    o.name = NULL_STR;\n    o.count = 0;\n    o.props = Object.create(null);\n    o.methods = Object.create(null);\n    o.raw = [];\n    return o;\n}\n\nexport function genMethodSchema(o = Object.create(null)): MethodSchema {\n    o.hash = NULL_NUM;\n    o.name = NULL_STR;\n    o.paramCount = 0;\n    o.paramTypes = [];\n    o.returnType = DataTypeVoid;\n    o.type = -1;\n    return o;\n}\n\nexport const SCHEME_KEY = \"__schema__\";\nexport type ISchema = { [SCHEME_KEY]: Schema };\n\nexport function getSchemaByPrototype(prototype: any): Schema | null {\n    if (prototype.hasOwnProperty(SCHEME_KEY)) {\n        return (prototype as any)[SCHEME_KEY];\n    }\n    return null;\n}\n\nexport function getOrCreateScheme(prototype: any): Schema {\n    if (prototype.hasOwnProperty(SCHEME_KEY)) {\n        return (prototype as any)[SCHEME_KEY];\n    }\n\n    const s = genSchema() as Schema;\n    (prototype as any)[SCHEME_KEY] = s;\n    const superCtr = Object.getPrototypeOf(prototype);\n\n    const superSchema = superCtr[SCHEME_KEY] as Schema;\n    if (superSchema) {\n        s.raw.push.apply(s.raw, superSchema.raw);\n    }\n    return s;\n}\n","export const NULL_NUM = -1;\nexport const NULL_STR = \"\";\nexport const NONE_CONTAINER = 0;\nexport const ARR_CONTAINER = 1;\nexport const NULL_FUNC = () => {};\nexport const RPC_MAX_UUID = (1 << 8) - 1;\n","export class ArrayMap<k extends string | number, v> {\n    private _name2indexRecord: Record<k, number>;\n    private _values: v[];\n\n    constructor(source?: [k, v][]) {\n        this._name2indexRecord = Object.create(null) as Record<k, number>;\n        this._values = [];\n        if (source != null) {\n            this._values.length = source.length;\n            for (let i = 0, len = source.length; i < len; i++) {\n                let [key, value] = source[i];\n                this._name2indexRecord[key] = i;\n                this._values[i] = value;\n            }\n        }\n    }\n\n    get(key: k): v | null {\n        const idx = this.getIndex(key);\n        if (idx > -1) {\n            return this._values[idx];\n        }\n        return null;\n    }\n\n    getIndex(key: k): number {\n        return this._name2indexRecord[key] ?? -1;\n    }\n\n    getByIndex(index: number): v | null {\n        return this._values[index];\n    }\n\n    has(key: k): boolean {\n        return (this._name2indexRecord[key] ?? -1) > -1;\n    }\n\n    set(key: k, value: v) {\n        let index = this._name2indexRecord[key];\n        if (index == null) {\n            index = this._values.length;\n            this._name2indexRecord[key] = index;\n        }\n        this._values[index] = value;\n        return index;\n    }\n\n    delete(key: k): [v | null, number] {\n        const index = this.getIndex(key);\n        if (index < 0) {\n            return [null, -1];\n        }\n        return [this._values[index], index];\n    }\n\n    clear() {\n        this._name2indexRecord = Object.create(null);\n        this._values.length = 0;\n    }\n\n    get values(): v[] {\n        return Array.from(this._values);\n    }\n\n    get readonlyValues(): readonly v[] {\n        return this._values;\n    }\n}\n","import { DataType } from \"./comp-schema\";\nimport { ISerable } from \"./data/serializable\";\n\nexport function fastRemove(arr: any[], index: number) {\n    arr[index] = arr[arr.length - 1];\n    arr.length--;\n}\n\nexport function getDataTypeByteLength<\n    T extends Exclude<DataType, DataType.STRING>\n>(type?: T) {\n    if (type) {\n        switch (type) {\n            case DataType.I8:\n            case DataType.U8:\n            case DataType.BOOL:\n                return 1;\n            case DataType.SHORT:\n            case DataType.ushort:\n            case DataType.I16:\n            case DataType.U16:\n                return 2;\n            case DataType.uint:\n            case DataType.INT:\n            case DataType.I32:\n            case DataType.U32:\n            case DataType.F32:\n            case DataType.FLOAT:\n                return 4;\n            case DataType.LONG:\n            case DataType.ulong:\n            case DataType.F64:\n            case DataType.DOUBLE:\n                return 8;\n        }\n    }\n    return 0;\n}\n\nconst MAX_VERSION = (1 << 30) - 1;\nexport function composeVersion(num: number, destoryed: boolean | 0 | 1) {\n    num = num % MAX_VERSION;\n    return destoryed ? -num : num;\n}\n\nexport function decomposeVersion(version: number): [number, boolean] {\n    return [version > 0 ? version : -version, version < 0];\n}\n\nexport function isPrimitive(test: any) {\n    return test !== Object(test);\n}\n\nexport function asSerable<T extends {}>(obj: T): (ISerable & T) | null {\n    if (!obj) return null;\n    // @ts-ignore\n    return typeof obj.ser === \"function\" && typeof obj.deser === \"function\"\n        ? (obj as ISerable & T)\n        : null;\n}\n\nexport function assert(\n    b: boolean | Object | null,\n    errrorClass: new (...args: any[]) => Error\n) {\n    if (!b) {\n        throw new errrorClass();\n    }\n}\n\nexport type ProtoOf<T> = Pick<T, keyof T>;\n\nexport class Deferred<T = unknown> {\n    public promise: Promise<T>;\n\n    private fate: \"resolved\" | \"unresolved\";\n    private state: \"pending\" | \"fulfilled\" | \"rejected\";\n\n    private _resolve!: (value: T | PromiseLike<T>) => void;\n    private _reject!: (reason?: any) => void;\n    private _value: any;\n    public get value() {\n        return this._value;\n    }\n\n    constructor() {\n        this.state = \"pending\";\n        this.fate = \"unresolved\";\n        this.promise = new Promise((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n        });\n        this.promise.then(\n            (res) => {\n                this.state = \"fulfilled\";\n                this._value = res;\n            },\n            () => (this.state = \"rejected\")\n        );\n    }\n\n    resolve(value: T | PromiseLike<T>) {\n        if (this.fate === \"resolved\") {\n            throw \"Deferred cannot be resolved twice\";\n        }\n        this.fate = \"resolved\";\n        this._resolve(value);\n    }\n\n    reject(reason?: any) {\n        if (this.fate === \"resolved\") {\n            throw \"Deferred cannot be resolved twice\";\n        }\n        this.fate = \"resolved\";\n        this._reject(reason);\n    }\n\n    isResolved() {\n        return this.fate === \"resolved\";\n    }\n\n    isPending() {\n        return this.state === \"pending\";\n    }\n\n    isFulfilled() {\n        return this.state === \"fulfilled\";\n    }\n\n    isRejected() {\n        return this.state === \"rejected\";\n    }\n}\n","/* crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*exported CRC32 */\nvar CRC32;\n(function (factory) {\n    /*jshint ignore:start */\n    /*eslint-disable */\n    if (typeof DO_NOT_EXPORT_CRC === \"undefined\") {\n        if (\"object\" === typeof exports) {\n            factory(exports);\n        } else if (\"function\" === typeof define && define.amd) {\n            define(function () {\n                var module = {};\n                factory(module);\n                return module;\n            });\n        } else {\n            factory((CRC32 = {}));\n        }\n    } else {\n        factory((CRC32 = {}));\n    }\n    /*eslint-enable */\n    /*jshint ignore:end */\n})(function (CRC32) {\n    CRC32.version = \"1.2.0\";\n    /* see perf/crc32table.js */\n    /*global Int32Array */\n    function signed_crc_table() {\n        var c = 0,\n            table = new Array(256);\n\n        for (var n = 0; n != 256; ++n) {\n            c = n;\n            c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n            c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n            c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n            c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n            c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n            c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n            c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n            c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;\n            table[n] = c;\n        }\n\n        return typeof Int32Array !== \"undefined\"\n            ? new Int32Array(table)\n            : table;\n    }\n\n    var T = signed_crc_table();\n    function crc32_bstr(bstr, seed) {\n        var C = seed ^ -1,\n            L = bstr.length - 1;\n        for (var i = 0; i < L; ) {\n            C = (C >>> 8) ^ T[(C ^ bstr.charCodeAt(i++)) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ bstr.charCodeAt(i++)) & 0xff];\n        }\n        if (i === L) C = (C >>> 8) ^ T[(C ^ bstr.charCodeAt(i)) & 0xff];\n        return C ^ -1;\n    }\n\n    function crc32_buf(buf, seed) {\n        if (buf.length > 10000) return crc32_buf_8(buf, seed);\n        var C = seed ^ -1,\n            L = buf.length - 3;\n        for (var i = 0; i < L; ) {\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        }\n        while (i < L + 3) C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        return C ^ -1;\n    }\n\n    function crc32_buf_8(buf, seed) {\n        var C = seed ^ -1,\n            L = buf.length - 7;\n        for (var i = 0; i < L; ) {\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n            C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        }\n        while (i < L + 7) C = (C >>> 8) ^ T[(C ^ buf[i++]) & 0xff];\n        return C ^ -1;\n    }\n\n    function crc32_str(str, seed) {\n        var C = seed ^ -1;\n        for (var i = 0, L = str.length, c, d; i < L; ) {\n            c = str.charCodeAt(i++);\n            if (c < 0x80) {\n                C = (C >>> 8) ^ T[(C ^ c) & 0xff];\n            } else if (c < 0x800) {\n                C = (C >>> 8) ^ T[(C ^ (192 | ((c >> 6) & 31))) & 0xff];\n                C = (C >>> 8) ^ T[(C ^ (128 | (c & 63))) & 0xff];\n            } else if (c >= 0xd800 && c < 0xe000) {\n                c = (c & 1023) + 64;\n                d = str.charCodeAt(i++) & 1023;\n                C = (C >>> 8) ^ T[(C ^ (240 | ((c >> 8) & 7))) & 0xff];\n                C = (C >>> 8) ^ T[(C ^ (128 | ((c >> 2) & 63))) & 0xff];\n                C =\n                    (C >>> 8) ^\n                    T[(C ^ (128 | ((d >> 6) & 15) | ((c & 3) << 4))) & 0xff];\n                C = (C >>> 8) ^ T[(C ^ (128 | (d & 63))) & 0xff];\n            } else {\n                C = (C >>> 8) ^ T[(C ^ (224 | ((c >> 12) & 15))) & 0xff];\n                C = (C >>> 8) ^ T[(C ^ (128 | ((c >> 6) & 63))) & 0xff];\n                C = (C >>> 8) ^ T[(C ^ (128 | (c & 63))) & 0xff];\n            }\n        }\n        return C ^ -1;\n    }\n    CRC32.table = T;\n    // $FlowIgnore\n    CRC32.bstr = crc32_bstr;\n    // $FlowIgnore\n    CRC32.buf = crc32_buf;\n    // $FlowIgnore\n    CRC32.str = crc32_str;\n});\n","export const Config = {\n    JIT: typeof eval && typeof Function,\n};\n","export const hash2compName: Record<number, string> = Object.create(null);\nexport const compName2ctr: Record<string, { new (): any }> =\n    Object.create(null);\nexport const hash2RpcName = {} as Record<number, string>;\n","import { IComp } from \"./comp-interface\";\nimport {\n    DataType,\n    DataTypeObect,\n    ISchema,\n    Schema,\n    SCHEME_KEY,\n} from \"./comp-schema\";\nimport { IDatabufferWriter, IDataBufferReader } from \"./data/serializable\";\nimport { NONE_CONTAINER } from \"./macro\";\n\nexport function serValue(\n    type: DataType,\n    value: any,\n    buffer: IDatabufferWriter\n) {\n    switch (type) {\n        case DataType.INT:\n        case DataType.I32:\n            buffer.writeInt(value);\n            break;\n        case DataType.FLOAT:\n        case DataType.F32:\n            buffer.writeFloat(value);\n            break;\n        case DataType.DOUBLE:\n        case DataType.F64:\n            buffer.writeDouble(value);\n            break;\n        case DataType.BOOL:\n            buffer.writeBoolean(value);\n            break;\n        case DataTypeObect:\n            value.ser(buffer);\n            break;\n    }\n}\n\nexport function genSerValueJit(\n    type: DataType,\n    valueStr: string,\n    bufferStr: string\n) {\n    switch (type) {\n        case DataType.INT:\n        case DataType.I32:\n            return `${bufferStr}.writeInt(${valueStr});`;\n        case DataType.FLOAT:\n        case DataType.F32:\n            return `${bufferStr}.writeFloat(${valueStr});`;\n        case DataType.DOUBLE:\n        case DataType.F64:\n            return `${bufferStr}.writeDouble(${valueStr});`;\n        case DataType.BOOL:\n            return `${bufferStr}.writeBoolean(${valueStr});`;\n        case DataTypeObect:\n            return `${valueStr}.ser(${bufferStr});`;\n    }\n}\n\nexport function genForeachSerValueJit(\n    type: DataType[],\n    from: number,\n    to: number,\n    arrStr: string,\n    bufferStr: string\n) {\n    let outStr = \"\";\n    for (let i = from; i < to; i++) {\n        outStr += genSerValueJit(type[i], `${arrStr}[${i}]`, bufferStr);\n    }\n    return outStr;\n}\n\nexport function deserValue(\n    type: DataType,\n    buffer: IDataBufferReader,\n    ref?: any,\n    refCtr?: any\n) {\n    switch (type) {\n        case DataType.INT:\n        case DataType.I32:\n            return buffer.readInt();\n        case DataType.FLOAT:\n        case DataType.F32:\n            return buffer.readFloat();\n        case DataType.DOUBLE:\n        case DataType.F64:\n            return buffer.readDouble();\n        case DataType.BOOL:\n            return buffer.readBoolean();\n        case DataTypeObect:\n            if (!ref) ref = new refCtr!();\n            ref.deser(buffer);\n            return ref;\n    }\n}\n\nfunction genForeachDeserValueJit(\n    type: DataType[],\n    from: number,\n    to: number,\n    recevierStr: string,\n    bufferStr: string\n) {\n    let outStr = \"\";\n    for (let i = from; i < to; i++) {\n        outStr += genDeserValueJit(type[i], bufferStr, `${recevierStr}[${i}]`);\n    }\n    return outStr;\n}\n\nexport function genDeserValueJit(\n    type: DataType,\n    bufferStr: string,\n    recevierStr: string\n) {\n    switch (type) {\n        case DataType.INT:\n        case DataType.I32:\n            return `${recevierStr} = ${bufferStr}.readInt();`;\n        case DataType.FLOAT:\n        case DataType.F32:\n            return `${recevierStr} = ${bufferStr}.readFloat();`;\n        case DataType.DOUBLE:\n        case DataType.F64:\n            return `${recevierStr} = ${bufferStr}.readDouble();`;\n        case DataType.BOOL:\n            return `${recevierStr} = ${bufferStr}.readBoolean();`;\n        case DataTypeObect:\n            return `\n${recevierStr}.deser(${bufferStr})\n            `;\n    }\n}\n\nexport function fixupSerable(prototype: any) {\n    const schema = prototype[SCHEME_KEY] as Schema;\n    fixedupSerableState(prototype, schema);\n    fixedupSerableRpc(prototype, schema);\n}\n\nexport function fixedupSerableState(prototype: any, schema: Schema) {\n    prototype.ser = function (\n        this: ISchema & Record<string, any>,\n        buffer: IDatabufferWriter\n    ) {\n        for (let i = 0, count = schema.count; i < count; i++) {\n            const prop = schema.props[i];\n            const type = prop.type;\n            const key = prop.propertyKey;\n            const value = this[key];\n            if (type.container === NONE_CONTAINER) {\n                serValue(type.dataType, value, buffer);\n            } else {\n                buffer.writeInt(value.length);\n                for (let i = 0, j = value.length; i < j; i++) {\n                    serValue(type.dataType, value[i], buffer);\n                }\n            }\n        }\n    };\n    prototype.deser = function (\n        this: ISchema & Record<string, any>,\n        buffer: IDataBufferReader\n    ) {\n        for (let i = 0, count = schema.count; i < count; i++) {\n            const prop = schema.props[i];\n            const type = prop.type;\n            const key = prop.propertyKey;\n            if (type.container === NONE_CONTAINER) {\n                this[key] = deserValue(\n                    type.dataType,\n                    buffer,\n                    this[key],\n                    prop.type.refCtr\n                );\n            } else {\n                if (!(this as any)[key]) {\n                    (this as any)[key] = [];\n                }\n                const arr = (this as any)[key] as any[];\n                arr.length = buffer.readInt();\n                for (let i = 0, j = arr.length; i < j; i++) {\n                    arr[i] = deserValue(\n                        type.dataType,\n                        buffer,\n                        arr[i],\n                        prop.type.refCtr\n                    );\n                }\n            }\n        }\n    };\n}\n\nexport function fixedupSerableRpc(prototype: any, schema: Schema) {\n    const rpcNames = Object.keys(schema.methods);\n    for (let i = 0, len = rpcNames.length; i < len; i++) {\n        const name = rpcNames[i];\n        const ms = schema.methods[name];\n        prototype[\"ser\" + ms.hash] = function (\n            buffer: IDatabufferWriter,\n            args: any[]\n        ) {\n            for (let j = 0, len = ms.paramCount; j < len; j++) {\n                const value = args[j];\n                serValue(ms.paramTypes[j], value, buffer);\n            }\n        };\n        prototype[\"deser\" + ms.hash] = function (buffer: IDataBufferReader) {\n            const args = new Array(ms.paramCount);\n            for (let j = 0, len = ms.paramCount; j < len; j++) {\n                args[j] = deserValue(\n                    ms.paramTypes[j],\n                    buffer,\n                    args[j],\n                    ms.paramTypes[j]\n                );\n            }\n            return args;\n        };\n\n        const privateName = \"__\" + name + \"__\";\n        prototype[privateName] = prototype[name];\n        prototype[name] = function (\n            this: IComp & ISchema & Record<string, Function>,\n            ...args: any[]\n        ) {\n            if (this.entity.role.local == ms.type) {\n                return this[privateName](...args);\n            } else {\n                const domain = this.domain;\n                if (domain == null) {\n                    return Promise.reject(\"Domain is not valid!\");\n                }\n                return domain.readonlyInternalMsgMng.sendRpc(\n                    name,\n                    this,\n                    args,\n                    domain.logicTime.duration\n                );\n            }\n        };\n    }\n}\n\nexport function fixupSerableJIT(prototype: any) {\n    const schema = prototype[SCHEME_KEY] as Schema;\n    fixedupSerableStateJit(prototype, schema);\n    fixedupSerableRpcJit(prototype, schema);\n}\n\nexport function fixedupSerableStateJit(prototype: any, schema: Schema) {\n    let serJitStr = \"\";\n    for (let i = 0, count = schema.count; i < count; i++) {\n        const prop = schema.props[i];\n        const type = prop.type;\n        const key = prop.propertyKey;\n        if (type.container === NONE_CONTAINER) {\n            switch (type.dataType) {\n                case DataType.INT:\n                case DataType.I32:\n                    serJitStr += `buffer.writeInt(this.${key});`;\n                    break;\n                case DataType.FLOAT:\n                case DataType.F32:\n                    serJitStr += `buffer.writeFloat(this.${key});`;\n                    break;\n                case DataType.DOUBLE:\n                case DataType.F64:\n                    serJitStr += `buffer.writeDouble(this.${key});`;\n                    break;\n                case DataType.BOOL:\n                    serJitStr += `buffer.writeBoolean(this.${key});`;\n                    break;\n                case DataTypeObect:\n                    serJitStr += `this.${key}.ser(buffer);`;\n                    break;\n            }\n        } else {\n            serJitStr += `buffer.writeInt(this.${key}.length);`;\n            let itemSerFuncStr = \"\";\n            switch (type.dataType) {\n                case DataType.INT:\n                case DataType.I32:\n                    itemSerFuncStr = `buffer.writeInt(arr[i]);`;\n                    break;\n                case DataType.FLOAT:\n                case DataType.F32:\n                    itemSerFuncStr = `buffer.writeFloat(arr[i]);`;\n                    break;\n                case DataType.DOUBLE:\n                case DataType.F64:\n                    itemSerFuncStr = `buffer.writeDouble(arr[i]);`;\n                    break;\n                case DataType.BOOL:\n                    serJitStr += `buffer.writeBoolean(this.${key});`;\n                    break;\n                case DataTypeObect:\n                    itemSerFuncStr = `arr[i].ser(buffer);`;\n                    break;\n            }\n            serJitStr += `\n            var arr = this.${key}\n            for (let i = 0, j = arr.length; i < j; i++) {\n                ${itemSerFuncStr}\n            }\n            `;\n        }\n    }\n    prototype.ser = Function(\"buffer\", serJitStr);\n    let deserJitStr = \"\";\n    for (let i = 0, count = schema.count; i < count; i++) {\n        const prop = schema.props[i];\n        const type = prop.type;\n        const key = prop.propertyKey;\n        if (type.container === NONE_CONTAINER) {\n            switch (type.dataType) {\n                case DataType.INT:\n                case DataType.I32:\n                    deserJitStr += `this.${key}=buffer.readInt();`;\n                    break;\n                case DataType.FLOAT:\n                case DataType.F32:\n                    deserJitStr += `this.${key}=buffer.readFloat();`;\n                    break;\n                case DataType.DOUBLE:\n                case DataType.F64:\n                    deserJitStr += `this.${key}=buffer.readDouble();`;\n                    break;\n                case DataType.BOOL:\n                    deserJitStr += `this.${key}=buffer.readBoolean();`;\n                    break;\n                case DataTypeObect:\n                    deserJitStr += `this.${key}.deser(buffer);`;\n                    break;\n            }\n        } else {\n            deserJitStr += `\n            if(!this.${key})this.${key}=[];\n            var arr=this.${key};\n            arr.length=buffer.readInt();`;\n            let itemSerFuncStr = \"\";\n            switch (type.dataType) {\n                case DataType.INT:\n                case DataType.I32:\n                    itemSerFuncStr = `arr[i]=buffer.readInt();`;\n                    break;\n                case DataType.FLOAT:\n                case DataType.F32:\n                    itemSerFuncStr = `arr[i]=buffer.readFloat();`;\n                    break;\n                case DataType.DOUBLE:\n                case DataType.F64:\n                    itemSerFuncStr = `arr[i]=buffer.readDouble();`;\n                    break;\n                case DataType.BOOL:\n                    deserJitStr += `arr[i]=buffer.readBoolean();`;\n                    break;\n                case DataTypeObect:\n                    itemSerFuncStr = `arr[i].deser(buffer);`;\n                    break;\n            }\n            deserJitStr += `\n            for (let i = 0, j = arr.length; i < j; i++) {\n                ${itemSerFuncStr}\n            }\n            `;\n        }\n    }\n    prototype.deser = Function(\"buffer\", deserJitStr);\n}\n\nexport function fixedupSerableRpcJit(prototype: any, schema: Schema) {\n    const rpcNames = Object.keys(schema.methods);\n    for (let i = 0, len = rpcNames.length; i < len; i++) {\n        const name = rpcNames[i];\n        const ms = schema.methods[name];\n\n        let serJitStr = `\n${genForeachSerValueJit(ms.paramTypes, 0, ms.paramCount, \"args\", \"buffer\")}\n        `;\n        prototype[\"ser\" + ms.hash] = Function(\"buffer\", \"args\", serJitStr);\n\n        let deserJitStr = `\nconst args = new Array(${ms.paramCount});\n${genForeachDeserValueJit(ms.paramTypes, 0, ms.paramCount, \"args\", \"buffer\")}\nreturn args;\n        `;\n        prototype[\"deser\" + ms.hash] = Function(\"buffer\", deserJitStr);\n\n        const privateName = \"__\" + name + \"__\";\n        prototype[privateName] = prototype[name];\n        let jitStr = `\nif (this.entity.role.local == ${ms.type}) {\n    return this[\"${privateName}\"](...args);\n} else {\n    const domain = this.domain;\n    if (domain == null) {\n        return Promise.reject(\"Domain is not valid!\")\n    }\n    return domain.readonlyInternalMsgMng.sendRpc(\n        \"${name}\",\n        this,\n        args,\n        domain.logicTime.duration\n    );\n}\n        `;\n        prototype[name] = Function(\"...args\", jitStr);\n    }\n}\n","import { ProtoOf } from \"./misc\";\nimport { str as hash } from \"./lib/crc-32\";\nimport { Config } from \"./config\";\nimport {\n    PropSchema,\n    DataType,\n    DataTypeObect,\n    getOrCreateScheme,\n    DataTypeVoid,\n    genMethodSchema,\n    Role,\n} from \"./comp-schema\";\nimport { hash2compName, compName2ctr, hash2RpcName } from \"./global-record\";\nimport { ARR_CONTAINER, NONE_CONTAINER } from \"./macro\";\nimport { fixupSerable, fixupSerableJIT } from \"./comp-fixup\";\nimport { IComp } from \"./comp-interface\";\n\nclass WhyPropertyKeyHasTheSameError extends Error {}\nfunction sortComponentPropertyKey(a: PropSchema, b: PropSchema): number {\n    const akey = a.propertyKey;\n    const bkey = b.propertyKey;\n    if (akey == bkey) throw new WhyPropertyKeyHasTheSameError();\n    return akey > bkey ? 1 : -1;\n}\n\nexport function NetSerable(name: string, genSerable = true) {\n    return function <T>(target: { new (): T }) {\n        const s = getOrCreateScheme(target.prototype);\n        s.name = name;\n        s.hash = hash(name);\n        hash2compName[s.hash] = s.name;\n        compName2ctr[s.name] = target;\n\n        s.count = s.raw.length;\n        if (s.count > 0) {\n            s.raw.sort(sortComponentPropertyKey);\n            for (let paramIndex = 0; paramIndex < s.count; paramIndex++) {\n                const v = s.raw[paramIndex];\n                v.paramIndex = paramIndex;\n                s.props[paramIndex] = v;\n                s.props[v.propertyKey as string] = v;\n            }\n        }\n\n        if (genSerable) {\n            if (Config.JIT) {\n                fixupSerableJIT(target.prototype);\n            } else {\n                fixupSerable(target.prototype);\n            }\n        }\n    };\n}\n\nexport type DataTypeMappingPrimitive = {\n    [DataType.NONE]: never;\n    [DataType.INT]: number;\n    [DataType.LONG]: number;\n    [DataType.FLOAT]: number;\n    [DataType.DOUBLE]: number;\n    [DataType.SHORT]: number;\n    [DataType.I8]: number;\n    [DataType.U8]: number;\n    [DataType.I16]: number;\n    [DataType.U16]: number;\n    [DataType.I32]: number;\n    [DataType.U32]: number;\n    [DataType.F32]: number;\n    [DataType.F64]: number;\n    [DataType.STRING]: string;\n    [DataType.BOOL]: boolean;\n};\n\nexport function NetVar<DT extends number, R>(type: DT | { new (): R }) {\n    return function <PK extends string | symbol>(\n        t: ProtoOf<Record<PK, DataTypeMappingPrimitive[DT] & R>>,\n        propertyKey: PK\n    ) {\n        const s = getOrCreateScheme(t as any);\n        s.raw.push({\n            paramIndex: -1,\n            propertyKey: String(propertyKey),\n            type: {\n                container: NONE_CONTAINER,\n                dataType: typeof type === \"number\" ? type : DataTypeObect,\n                refCtr: typeof type === \"number\" ? undefined : type,\n            },\n        });\n    };\n}\n\nexport function NetArr<DT extends number, R>(type: DT | { new (): R }) {\n    return function <PK extends string | symbol>(\n        t: ProtoOf<Record<PK, Array<DataTypeMappingPrimitive[DT] & R>>>,\n        propertyKey: PK\n    ) {\n        const s = getOrCreateScheme(t as any);\n        s.raw.push({\n            paramIndex: -1,\n            propertyKey: String(propertyKey),\n            type: {\n                container: ARR_CONTAINER,\n                dataType: typeof type === \"number\" ? type : DataTypeObect,\n                refCtr: typeof type === \"number\" ? undefined : type,\n            },\n        });\n    };\n}\n\ntype RpcReturnTypeMapping<T extends undefined | number, R> = T extends number\n    ? DataTypeMappingPrimitive[T] & R\n    : void;\nexport class Crc32PropertyKeyHashConflict extends Error {}\n\nexport function Rpc<R, RpcReturnType extends undefined | number = undefined>(\n    type: Role,\n    returnType?: RpcReturnType | { new (): R }\n) {\n    return function <PropKey extends string>(\n        t: IComp &\n            ProtoOf<\n                Record<\n                    PropKey,\n                    (\n                        ...args: any[]\n                    ) => void | Promise<RpcReturnTypeMapping<RpcReturnType, R>>\n                >\n            >,\n        propertyKey: PropKey\n    ): void {\n        // gen schema\n        const s = getOrCreateScheme(t);\n        if (!s.methods[propertyKey]) {\n            s.methods[propertyKey] = genMethodSchema();\n        }\n        const ms = s.methods[propertyKey];\n        ms.hash = hash(propertyKey);\n        ms.name = propertyKey;\n        ms.type = type;\n        if (hash2RpcName[ms.hash] && hash2RpcName[ms.hash] != ms.name) {\n            throw new Crc32PropertyKeyHashConflict();\n        }\n        hash2RpcName[ms.hash] = ms.name;\n        if (typeof returnType === \"undefined\") {\n            ms.returnType = DataTypeVoid;\n        } else {\n            ms.returnType =\n                typeof returnType === \"number\" ? returnType : DataTypeObect;\n            ms.returnRefCtr =\n                typeof returnType === \"number\" ? undefined : returnType;\n        }\n\n        ms.paramCount = ms.paramTypes.length;\n        for (let i = 0, len = ms.paramCount; i < len; i++) {\n            if (!ms.paramTypes[i]) {\n                console.warn(\n                    `[Netcode]Rpc function ${propertyKey} at paramIndex(${i}) set the default type DataType.double`\n                );\n                ms.paramTypes[i] = DataType.DOUBLE;\n            }\n        }\n    };\n}\n\nexport function RpcVar(type: DataType) {\n    return function (\n        t: IComp,\n        propertyKey: string,\n        parameterIndex: number\n    ): void {\n        const s = getOrCreateScheme(t);\n        if (!s.methods[propertyKey]) {\n            s.methods[propertyKey] = genMethodSchema();\n        }\n        const ms = s.methods[propertyKey];\n        ms.paramTypes[parameterIndex] = type;\n    };\n}\n","import { DataType } from \"./comp-schema\";\nimport { NetSerable, NetVar } from \"./comp-decorator\";\nimport {\n    IDataBufferReader,\n    IDatabufferWriter,\n    ISerable,\n} from \"./data/serializable\";\n\nexport abstract class ADirty<T> {\n    abstract get value(): T;\n    abstract set value(inValue: T);\n    abstract dirty: boolean;\n\n    getsetDirty(): boolean {\n        const old = this.dirty;\n        this.dirty = false;\n        return old;\n    }\n}\n\n@NetSerable(\"Int\", false)\nexport class Int extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n    private _value: number = 0;\n    @NetVar(DataType.INT)\n    get value() {\n        return this._value;\n    }\n\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDatabufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeInt(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readInt();\n        }\n    }\n}\n\n@NetSerable(\"Float\", false)\nexport class Float extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.FLOAT)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDatabufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeFloat(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readFloat();\n        }\n    }\n}\n\n@NetSerable(\"Long\", false)\nexport class Long extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.LONG)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDatabufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeLong(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readLong();\n        }\n    }\n}\n\n@NetSerable(\"Uint\", false)\nexport class Uint extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n    private _value: number = 0;\n    @NetVar(DataType.uint)\n    get value() {\n        return this._value;\n    }\n\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDatabufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeUint(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readUint();\n        }\n    }\n}\n\n@NetSerable(\"Double\", false)\nexport class Double extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.DOUBLE)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDatabufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeDouble(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readDouble();\n        }\n    }\n}\n\n@NetSerable(\"Ulong\", false)\nexport class Ulong extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.ulong)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDatabufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeUlong(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readUlong();\n        }\n    }\n}\n\n@NetSerable(\"Short\", false)\nexport class Short extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.SHORT)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDatabufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeShort(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readShort();\n        }\n    }\n}\n\n@NetSerable(\"Ulong\", false)\nexport class Ushort extends ADirty<number> implements ISerable {\n    @NetVar(DataType.BOOL)\n    dirty: boolean = true;\n\n    private _value: number = 0;\n    @NetVar(DataType.ushort)\n    get value() {\n        return this._value;\n    }\n    set value(inValue) {\n        if (this._value !== inValue) {\n            this._value = inValue;\n            this.dirty = true;\n        }\n    }\n\n    constructor(value = 0) {\n        super();\n        this._value = value;\n    }\n\n    ser(buffer: IDatabufferWriter<any>): void {\n        const dirty = this.getsetDirty();\n        buffer.writeBoolean(dirty);\n        if (dirty) {\n            buffer.writeUshort(this._value);\n        }\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.dirty = buffer.readBoolean();\n        if (this.dirty) {\n            this._value = buffer.readUshort();\n        }\n    }\n}\n","import { IComp } from \"../comp-interface\";\nimport { DataType } from \"../comp-schema\";\nimport { NetSerable, NetVar } from \"../comp-decorator\";\nimport { Float } from \"../base-dirty-data\";\n\nexport interface ITime {\n    readonly delta: number;\n    readonly duration: number;\n}\n\n@NetSerable(\"logic_time\")\nexport class LogicTimeComp extends IComp implements ITime {\n    @NetVar(Float)\n    $delta = new Float(0);\n\n    get delta() {\n        return this.$delta.value;\n    }\n    set delta(value: number) {\n        this.$delta.value = value;\n    }\n\n    @NetVar(DataType.DOUBLE)\n    duration: number = 0;\n}\n\n@NetSerable(\"render_time\")\nexport class RenderTimeComp extends IComp implements ITime {\n    delta: number = 0;\n    duration: number = 0;\n}\n","import { composeVersion, decomposeVersion, Deferred } from \"./misc\";\nimport { IDataBuffer, ISerable, SupportNetDataType } from \"./data/serializable\";\nimport { DataTypeVoid, ISchema } from \"./comp-schema\";\nimport { RPC_MAX_UUID } from \"./macro\";\nimport { IComp } from \"./comp-interface\";\n\nexport enum MessageType {\n    UPDATE_COMPONENT,\n    RPC,\n}\n\nexport interface RpcCall {\n    methodName: number;\n    component: any;\n    args: any[];\n}\n\nexport interface MessageEntityInfo {\n    entityId: number;\n    entityVersion: number;\n    destoryed: boolean;\n    compCount: number;\n}\n\nexport interface MessageRpcInfo {\n    entityId: number;\n    compIdx: number;\n    methodHash: number;\n    timestamp: number;\n    uuid: number;\n}\n\nexport interface MessageRpcCallbackInfo {\n    entityId: number;\n    compIdx: number;\n    methodHash: number;\n    uuid: number;\n}\n\nexport interface MessageRpcCallbackRecord {\n    deferred: Deferred;\n    timestamp: number;\n}\nexport class RpcCallbackUuidOutOfRange extends Error {}\n\nexport class MessageManager<T extends SupportNetDataType> {\n    protected _rpcCalls: RpcCall[] = [];\n    protected _rpcDeferred: Map<string, MessageRpcCallbackRecord> = new Map();\n    protected _uuid = 0;\n\n    readonly inoutbuffer: IDataBuffer<T>;\n    readonly statebuffer: IDataBuffer<T>;\n    readonly rpcbuffer: IDataBuffer<T>;\n    readonly rpcCallbackBuffer: IDataBuffer<T>;\n\n    constructor(BufferCtr: new () => IDataBuffer<T>) {\n        this.inoutbuffer = new BufferCtr();\n        this.statebuffer = new BufferCtr();\n        this.rpcbuffer = new BufferCtr();\n        this.rpcCallbackBuffer = new BufferCtr();\n    }\n\n    private _getUuid() {\n        if (this._uuid >= RPC_MAX_UUID) {\n            console.warn(\n                \"[MessageManager#_getUuid]UUID is great than \" + RPC_MAX_UUID\n            );\n            return 0;\n        }\n        return ++this._uuid;\n    }\n\n    startSendEntityAndComps() {\n        this.statebuffer.reset();\n    }\n\n    sendEntity(\n        entityId: number,\n        entityVersion: number,\n        compsLen: number,\n        toDestroy: boolean\n    ) {\n        const buf = this.statebuffer;\n        // entity id\n        buf.writeInt(entityId);\n        // entity compuse version\n        buf.writeInt(composeVersion(entityVersion, toDestroy));\n        // component count\n        buf.writeInt(compsLen);\n    }\n\n    sendComp(compIdx: number, comp: ISerable & IComp & ISchema): boolean {\n        const buf = this.statebuffer;\n        // msg type -> compoent\n\n        // comp index\n        buf.writeInt(compIdx);\n        // comp hash\n        buf.writeLong(comp.__schema__.hash);\n        // ser comp\n        comp.ser(buf);\n\n        return true;\n    }\n\n    endSendEntityAndComps() {\n        this.statebuffer.reset();\n    }\n\n    startRecvEntityAndComps() {}\n\n    recvEntity(): MessageEntityInfo | null {\n        const buf = this.statebuffer;\n        if (!buf.hasNext()) return null;\n        // entity id\n        const entityId = buf.readInt();\n        // entity compuse version\n        const [entityVersion, toDestory] = decomposeVersion(buf.readInt());\n        // component length\n        const compCount = buf.readInt();\n        return {\n            entityId,\n            entityVersion,\n            destoryed: toDestory,\n            compCount,\n        };\n    }\n\n    recvCompHeader() {\n        const buf = this.statebuffer;\n\n        // comp index\n        const compIdx = buf.readInt();\n        // comp hash\n        const hash = buf.readLong();\n        // deser comp\n        return {\n            compIdx,\n            hash,\n        };\n    }\n\n    recvCompBody(comp: ISerable & IComp) {\n        const buf = this.statebuffer;\n        comp.deser(buf);\n    }\n\n    endRecvEntityAndComps() {}\n\n    // callRpc(methodName: number, component: any, ...args: any) {\n    //     this._rpcCalls.push({ methodName, component, args });\n    // }\n\n    startSendRpc() {\n        // this.rpcbuffer.reset();\n    }\n\n    sendRpc(\n        methodName: string,\n        component: IComp & ISchema & Record<string, Function>,\n        params: any[],\n        timestamp: number\n    ) {\n        const uuid = this._getUuid();\n        if (uuid < 0) {\n            return Promise.reject(new RpcCallbackUuidOutOfRange());\n        }\n\n        const comp = component;\n        const entity = comp.entity;\n        const compIdx = entity.indexOf(component);\n        const buf = this.rpcbuffer;\n        // schema\n        const s = comp.__schema__;\n        // method schema\n        const ms = s.methods[methodName];\n        // entity id\n        buf.writeInt(entity.id);\n        // comp index\n        buf.writeUshort(compIdx);\n        // method hash\n        buf.writeLong(ms.hash);\n        // timestamp\n        buf.writeLong(timestamp);\n        // uuid\n        buf.writeUint(uuid);\n        // param\n        component[\"ser\" + ms.hash](buf, params);\n        if (ms.returnType == DataTypeVoid) {\n            return;\n        } else {\n            const deferred = new Deferred();\n            this._rpcDeferred.set(\n                `${entity.id}|${compIdx}|${ms.hash}|${uuid}`,\n                {\n                    deferred,\n                    timestamp,\n                }\n            );\n            return deferred.promise;\n        }\n    }\n\n    endSendRpc() {\n        this.rpcbuffer.reset();\n        this._uuid = 0;\n    }\n\n    startRecvRpc() {}\n\n    recvRpc(): MessageRpcInfo | null {\n        if (!this.rpcbuffer.hasNext()) return null;\n        const buf = this.rpcbuffer;\n        // entity id\n        const entityId = buf.readInt();\n        // comp index\n        const compIdx = buf.readUshort();\n        // method hash\n        const methodHash = buf.readLong();\n        // timestamp\n        const timestamp = buf.readLong();\n        // uuid\n        const uuid = buf.readUint();\n        return { entityId, compIdx, methodHash, timestamp, uuid };\n    }\n\n    endRecvRpc() {}\n\n    startSendRpcCallback() {}\n\n    sendRpcCallback(info: MessageRpcInfo) {\n        const buf = this.rpcCallbackBuffer;\n        buf.writeInt(info.entityId);\n        buf.writeUshort(info.compIdx);\n        buf.writeLong(info.methodHash);\n        buf.writeUint(info.uuid);\n    }\n\n    endSendRpcCallback() {\n        this.rpcCallbackBuffer.reset();\n    }\n\n    startRecvRpcCallback() {}\n\n    recvRpcCallback(): MessageRpcCallbackInfo | null {\n        if (!this.rpcCallbackBuffer.hasNext()) return null;\n        const buf = this.rpcCallbackBuffer;\n        const entityId = buf.readInt();\n        const compIdx = buf.readUshort();\n        const methodHash = buf.readLong();\n        const uuid = buf.readUint();\n        return { entityId, compIdx, methodHash, uuid };\n    }\n\n    endRecvRpcCallback() {}\n\n    getRpcCallbackRecord(param: MessageRpcCallbackInfo) {\n        return this._rpcDeferred.get(\n            `${param.entityId}|${param.compIdx}|${param.methodHash}|${param.uuid}`\n        );\n    }\n}\n","import { IComp } from \"../comp-interface\";\nimport { Short } from \"../base-dirty-data\";\nimport { NetSerable, NetVar, Rpc } from \"../comp-decorator\";\nimport {\n    IDataBufferReader,\n    IDatabufferWriter,\n    ISerable,\n} from \"../data/serializable\";\nimport { DataType, Role, RpcType } from \"../comp-schema\";\n\n@NetSerable(\"role\", false)\nexport class RoleComp extends IComp implements ISerable {\n    //#region property\n    @NetVar(Short)\n    $local = new Short(Role.AUTHORITY);\n    get local(): Role {\n        return this.$local.value;\n    }\n    set local(value: Role) {\n        this.$local.value = value;\n    }\n\n    @NetVar(Short)\n    $remote = new Short(Role.SIMULATED_PROXY);\n    get remote(): Role {\n        return this.$remote.value;\n    }\n    set remote(value: Role) {\n        this.$remote.value = value;\n    }\n    //#endregion\n\n    //#region interface ISerable implement\n    ser(buffer: IDatabufferWriter<any>): void {\n        this.$local.ser(buffer);\n        this.$remote.ser(buffer);\n    }\n\n    deser(buffer: IDataBufferReader<any>): void {\n        this.$remote.deser(buffer);\n        this.$local.deser(buffer);\n    }\n    //#endregion\n\n    @Rpc(Role.AUTHORITY, DataType.BOOL)\n    async upgrade() {\n        if (\n            this.local != Role.AUTHORITY &&\n            this.remote != Role.AUTONMOUS_PROXY\n        ) {\n            this.remote = Role.AUTONMOUS_PROXY;\n            return true;\n        }\n        return false;\n    }\n\n    @Rpc(Role.AUTHORITY, DataType.BOOL)\n    async downgrade() {\n        if (\n            this.local != Role.AUTHORITY &&\n            this.remote != Role.SIMULATED_PROXY\n        ) {\n            this.remote = Role.SIMULATED_PROXY;\n            return true;\n        }\n        return false;\n    }\n\n    init() {\n        const type = this.domain.option.type;\n        this.$local.value =\n            type === RpcType.SERVER ? Role.AUTHORITY : Role.SIMULATED_PROXY;\n        this.$remote.value =\n            type === RpcType.SERVER ? Role.SIMULATED_PROXY : Role.AUTHORITY;\n    }\n}\n","import { RoleComp } from \"./builtin-comp/\";\nimport { ISchema } from \"./comp-schema\";\nimport type { Domain } from \"./domain\";\nimport { compName2ctr } from \"./global-record\";\nimport { IComp } from \"./comp-interface\";\nimport { NULL_NUM } from \"./macro\";\n\nclass ComponentHasNotDecorated extends Error {}\n/**\n * The unit in a network.It can manager some component.\n * It include id and version, plz don't modify then if you are not undersanding!\n * It is sealed, PLZ NOT implement!!!\n * @example\n ```js\n // Must do decoration\n @NetComp\n class ViewComponent {\n     @Param(DataType.bool)\n     active = false\n }\n const ent = new Entity();\n ent.add(ViewComponent);\n ent.has(ViewComponent);\n ent.get(ViewComponent);\n Domain.ref(ent);\n ent.rm(ViewComponent);\n ```\n */\nexport class Entity<ProxyObj extends Object = any> {\n    private _id = NULL_NUM;\n    get id() {\n        return this._id;\n    }\n    private _version = NULL_NUM;\n    get version() {\n        return this._version;\n    }\n    private _domain?: Domain;\n    get domain() {\n        return this._domain!;\n    }\n    static Event = {\n        REG_ENTITY: \"reg-entity\",\n        UNREG_ENTITY: \"unreg-entity\",\n    };\n\n    $comps = new Proxy<ProxyObj>(this as any, {\n        get(target: any, p, receiver) {\n            return target.get(compName2ctr[String(p)]);\n        },\n    });\n\n    private readonly _compMap: Map<number, IComp | IComp[]>;\n    private readonly _comps: IComp[];\n    get comps(): readonly IComp[] {\n        return this._comps;\n    }\n\n    readonly role: RoleComp;\n\n    constructor(..._comps: IComp[]) {\n        this.role = new RoleComp();\n        this._compMap = new Map();\n        this._initComp(this.role as any);\n\n        this._comps = _comps;\n        for (let i = 0, len = this._comps.length; i < len; i++) {\n            this._initComp(this._comps[i] as IComp & ISchema);\n        }\n    }\n\n    protected _initComp(c: ISchema & IComp) {\n        const map = this._compMap;\n        c[\"_entity\"] = this;\n        if (!c.__schema__ || c.__schema__.hash == NULL_NUM) {\n            throw new ComponentHasNotDecorated(\"Component must use @NetComp\");\n        }\n        const hash = c.__schema__.hash;\n        if (map.has(hash)) {\n            map.set(hash, [map.get(hash) as any, c]);\n        } else {\n            map.set(hash, c);\n        }\n    }\n\n    toString() {\n        return `Entity: id=${this._id},version=${this._version}`;\n    }\n\n    get<T extends IComp>(ctr: { new (): T }): T | null {\n        const schema = ctr.prototype.__schema__;\n        if (!(schema && schema.name)) {\n            console.error(\"Componrnt must use @NetComp\");\n            return null;\n        }\n\n        if (!this._compMap.has(schema.hash)) return null;\n        const insOrArr = this._compMap.get(schema.hash)!;\n        if (!Array.isArray(insOrArr)) return insOrArr as T;\n        return insOrArr[insOrArr.length - 1] as T;\n    }\n\n    mget<T extends IComp>(ctr: { new (): T }): T[] {\n        const schema = ctr.prototype.__schema__;\n        if (!(schema && schema.name)) {\n            console.error(\"Componrnt must use @NetComp\");\n            return [];\n        }\n\n        return (this._compMap.get(schema.hash) as T[]) ?? [];\n    }\n\n    has(ctr: { new (): any }): boolean {\n        const schema = ctr.prototype.__schema__;\n        if (!(schema && schema.name)) {\n            console.error(\"Componrnt must use @NetComp\");\n            return false;\n        }\n        return this._compMap.has(schema.hash);\n    }\n\n    indexOf(ins: IComp) {\n        if (ins == null) return -1;\n        return this._comps.indexOf(ins);\n    }\n\n    private _init() {\n        for (let i = 0, len = this._comps.length; i < len; i++) {\n            const c = this._comps[i];\n            c.init && c.init(i);\n        }\n    }\n\n    private _renderUpdate() {\n        for (let i = 0, len = this._comps.length; i < len; i++) {\n            const c = this._comps[i];\n            c.renderUpdate && c.renderUpdate(i);\n        }\n    }\n\n    private _logicUpdate() {\n        for (let i = 0, len = this._comps.length; i < len; i++) {\n            const c = this._comps[i];\n            c.logicUpdate && c.logicUpdate(i);\n        }\n    }\n\n    private _destroy() {\n        for (let i = 0, len = this._comps.length; i < len; i++) {\n            const c = this._comps[i];\n            c.destroy && c.destroy(i);\n            c[\"_entity\"] = null;\n        }\n        this._comps.length = 0;\n        this._compMap.clear();\n    }\n}\n","import { IDataBuffer, IDatabufferWriter } from \"./serializable\";\n\nconst tempTypedBuffer = {\n    int: new Int32Array(1),\n    uint: new Uint32Array(1),\n    short: new Int16Array(1),\n    ushort: new Uint16Array(1),\n    long: new Int32Array(1),\n    ulong: new Uint32Array(1),\n    float: new Float32Array(1),\n    double: new Float64Array(1),\n};\n\nexport class StringDataBufferOutOfRange extends Error {}\n\nexport class StringDataBuffer implements IDataBuffer<string> {\n    public writeBuffer: any[] = [];\n    public writerCursor = 0;\n    public readBuffer: any[] = [];\n    public readerCursor = 0;\n    public readerStart = 0;\n    public readerEnd = 0;\n\n    protected check(increment = 0) {\n        if (\n            this.writerCursor + increment >= this.readBuffer.length &&\n            this.writerCursor + increment >= this.readerEnd\n        ) {\n            throw new StringDataBufferOutOfRange(\n                `Cursor: (${this.writerCursor}), buffer's length: (${this.writeBuffer.length})`\n            );\n        }\n    }\n    reset(): void {\n        this.writerCursor = 0;\n        this.readerCursor = 0;\n        this.readBuffer.length = 0;\n        this.writeBuffer.length = 0;\n    }\n    readInt(): number {\n        this.check();\n        const temp = tempTypedBuffer.int;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readUint(): number {\n        this.check();\n        const temp = tempTypedBuffer.uint;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readShort(): number {\n        this.check();\n        const temp = tempTypedBuffer.short;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readUshort(): number {\n        this.check();\n        const temp = tempTypedBuffer.ushort;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readLong(): number {\n        this.check();\n        const temp = tempTypedBuffer.long;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readUlong(): number {\n        this.check();\n        const temp = tempTypedBuffer.ulong;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readFloat(): number {\n        this.check();\n        const temp = tempTypedBuffer.float;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readDouble(): number {\n        this.check();\n        const temp = tempTypedBuffer.double;\n        temp[0] = this.readBuffer[this.readerCursor++];\n        return temp[0];\n    }\n    readBoolean(): boolean {\n        this.check();\n        return Boolean(this.readBuffer[this.readerCursor++]);\n    }\n    set(source: string, start = 0, end = -1): void {\n        this.writerCursor = 0;\n        const dst = JSON.parse(source);\n\n        let dstChecked = Array.isArray(dst) ? dst : [];\n        if (end < 0) {\n            end += dstChecked.length;\n        }\n        this.readerStart = this.readerCursor = start;\n        this.readerEnd = end;\n        this.readBuffer = dstChecked;\n    }\n\n    writeInt(source: number): IDatabufferWriter<string> {\n        const temp = tempTypedBuffer.int;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeUint(source: number): IDatabufferWriter<string> {\n        const temp = tempTypedBuffer.uint;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeShort(source: number): IDatabufferWriter<string> {\n        const temp = tempTypedBuffer.short;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeUshort(source: number): IDatabufferWriter<string> {\n        const temp = tempTypedBuffer.ushort;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeLong(source: number): IDatabufferWriter<string> {\n        const temp = tempTypedBuffer.long;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeUlong(source: number): IDatabufferWriter<string> {\n        const temp = tempTypedBuffer.ulong;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeFloat(source: number): IDatabufferWriter<string> {\n        const temp = tempTypedBuffer.float;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeDouble(source: number): IDatabufferWriter<string> {\n        const temp = tempTypedBuffer.double;\n        temp[0] = source;\n        this.writeBuffer[this.writerCursor++] = source;\n        return this;\n    }\n    writeBoolean(source: boolean): IDatabufferWriter<string> {\n        this.writeBuffer[this.writerCursor++] = source ? 1 : 0;\n        return this;\n    }\n\n    get(): string {\n        this.writeBuffer.length = this.writerCursor;\n        return JSON.stringify(this.writeBuffer);\n    }\n\n    hasNext(): boolean {\n        return (\n            this.readerCursor < this.readBuffer.length &&\n            this.readerCursor < this.readerEnd\n        );\n    }\n\n    append(other: IDatabufferWriter<string>): IDatabufferWriter<string> {\n        this.writeBuffer.push.apply(this.writeBuffer, other.writeBuffer);\n        this.writerCursor += other.writerCursor;\n        return this;\n    }\n}\n","import { LogicTimeComp, RenderTimeComp } from \"./builtin-comp\";\nimport {\n    DataTypeVoid,\n    ISchema,\n    RpcType,\n    Role,\n    SCHEME_KEY,\n} from \"./comp-schema\";\nimport { IDataBuffer, SupportNetDataType } from \"./data/serializable\";\nimport { Entity } from \"./entity\";\nimport { IComp } from \"./comp-interface\";\nimport { NULL_NUM } from \"./macro\";\nimport {\n    MessageEntityInfo,\n    MessageManager,\n    MessageRpcCallbackInfo,\n    MessageRpcInfo,\n} from \"./message-manager\";\nimport { asSerable, assert } from \"./misc\";\nimport { ArrayMap } from \"./array-map\";\nimport { compName2ctr, hash2compName, hash2RpcName } from \"./global-record\";\nimport { StringDataBuffer } from \"./data/string-databuffer\";\nimport { deserValue, serValue } from \"./comp-fixup\";\nimport { str as hash } from \"./lib/crc-32\";\n\nclass EntityNotValidError extends Error {}\nclass EntityRepeatRegisteredError extends Error {}\nclass EntityGroupOutOfRangeYouCanOpenAutoResize extends Error {}\nclass DomainDuplicated extends Error {}\nclass DomainLengthLimit extends Error {}\nclass DomainCompCountNotMatch extends Error {}\n\nexport type DomainConstructorParamters<TT extends new (...args: any) => any> =\n    TT extends new (_: any, ...args: infer P) => Domain ? P : never;\n\nexport interface DomainOption<T extends SupportNetDataType = string> {\n    dataBufCtr?: { new (...args: any[]): IDataBuffer<T> };\n    type: RpcType;\n    capacity?: number;\n    autoResize?: boolean;\n    fixedTimeSec?: number;\n}\n\nfunction HandleDomainDefautlValue<T extends DomainOption<any>>(option: T) {\n    if (typeof option.dataBufCtr === \"undefined\") {\n        option.dataBufCtr = StringDataBuffer;\n    }\n    if (typeof option.capacity === \"undefined\") {\n        option.capacity = 50;\n    }\n    if (typeof option.autoResize === \"undefined\") {\n        option.autoResize = true;\n    }\n    if (typeof option.fixedTimeSec === \"undefined\") {\n        option.fixedTimeSec = 0.2;\n    }\n    return option as Required<Readonly<T>>;\n}\n\nexport class Domain<T extends SupportNetDataType = any> {\n    private static _name2domainMap: ArrayMap<string, Domain> = new ArrayMap();\n    //#region static methods\n    static Create<T extends SupportNetDataType = any>(\n        name: string,\n        option: DomainOption<T>,\n        uuid: number = hash(name)\n    ) {\n        if (this._name2domainMap.has(name)) {\n            throw new DomainDuplicated(name);\n        }\n        const news: Domain<T> = new Domain(name, option, uuid);\n        const domainIndex = this._name2domainMap.set(name, news);\n        news._index = domainIndex;\n        return news;\n    }\n\n    static Get<T extends SupportNetDataType>(name: string = \"main\") {\n        return this._name2domainMap.get(name) as Domain<T>;\n    }\n\n    static GetByEntity(entity: Entity) {\n        const domainIndex = entity.id;\n        const domain = this._name2domainMap.values[domainIndex];\n        if (domain.isValid(entity)) {\n            return domain;\n        }\n        return null;\n    }\n\n    static Clear() {\n        this._name2domainMap.clear();\n    }\n    //#endregion\n\n    //#region member variables\n    get index() {\n        return this._index;\n    }\n    private _index = -1;\n    private _entities: (Entity | null)[];\n    private _entitiesLength = 0;\n    public get entities() {\n        return this._entities;\n    }\n    public get length() {\n        return this._entitiesLength;\n    }\n    private _entityVersion: number[];\n    private _destroyEntityId: number[];\n    private _entityIdCursor = 0;\n    private _internalMsgMng: MessageManager<T>;\n    public readonly readonlyInternalMsgMng!: MessageManager<T>;\n\n    private _fixedSecAccumulator = 0;\n    public readonly time: Entity;\n    public readonly logicTime: LogicTimeComp;\n    public readonly renderTime: RenderTimeComp;\n\n    private readonly _option: DomainOption<T>;\n\n    get option() {\n        return this._option as Required<Readonly<DomainOption<T>>>;\n    }\n    //#endregion\n    protected constructor(\n        readonly name: string,\n        option: DomainOption<T>,\n        readonly uuid: number\n    ) {\n        var requiredOption = HandleDomainDefautlValue(option);\n        this._option = requiredOption;\n        this._entities = new Array<Entity>(requiredOption.capacity);\n        this._entityVersion = new Array<number>(requiredOption.capacity);\n        this._entityVersion.fill(0);\n        this._destroyEntityId = new Array<number>();\n        this._internalMsgMng = new MessageManager(requiredOption.dataBufCtr);\n        this.readonlyInternalMsgMng = this._internalMsgMng;\n\n        this.logicTime = new LogicTimeComp();\n        this.renderTime = new RenderTimeComp();\n        this.time = new Entity(this.logicTime, this.renderTime);\n        this.logicTime.delta = this.option.fixedTimeSec;\n\n        this.reg(this.time);\n    }\n\n    //#region public methods\n    reg(entity: Entity) {\n        if (this.isValid(entity))\n            throw new EntityRepeatRegisteredError(entity.toString());\n        if (this._entityIdCursor == this._option.capacity) {\n            if (this._option.autoResize) {\n                this.resize(Math.ceil(this._option.capacity * 1.5));\n            } else\n                throw new EntityGroupOutOfRangeYouCanOpenAutoResize(\n                    `Domain: capacity: ${this._option.capacity}; ` +\n                        entity.toString()\n                );\n        }\n\n        const id = this._getEntityId();\n        const version = this._entityVersion[id];\n        this._reg(entity, id, version);\n        entity[\"_init\"]();\n    }\n\n    hasReg(entity: Entity) {\n        return this.isValid(entity);\n    }\n\n    unregWithoutValidation(entity: Entity) {\n        const index = entity.id;\n        this._entityVersion[index]++;\n        this._unreg(entity);\n        this._destroyEntityId.push(entity.id);\n        this._entities[index] = null;\n        entity[\"_destroy\"]();\n    }\n\n    unreg(entity: Entity) {\n        if (!this.isValid(entity))\n            throw new EntityNotValidError(entity.toString());\n        this.unregWithoutValidation(entity);\n    }\n\n    get(id: number) {\n        return this._entities[id];\n    }\n\n    resize(newSize: number) {\n        const oldSize = this._option.capacity;\n        this._entities.length = newSize;\n        this._entityVersion.length = newSize;\n        this._entityVersion.fill(0, oldSize, newSize);\n        this._option.capacity = newSize;\n    }\n\n    isValid(entity: Entity) {\n        return (\n            entity.id != NULL_NUM &&\n            entity.version != NULL_NUM &&\n            entity.version == this._entityVersion[entity.id]\n        );\n    }\n\n    asData(): T {\n        const isServer = this._option.type == RpcType.SERVER;\n        const outBuf = this._internalMsgMng.inoutbuffer;\n        const stateBuf = this._internalMsgMng.statebuffer;\n        const rpcBuf = this._internalMsgMng.rpcbuffer;\n        const rpcCbBuf = this._internalMsgMng.rpcCallbackBuffer;\n\n        outBuf.reset();\n        outBuf.writeInt(this.uuid).writeBoolean(isServer);\n\n        if (isServer) {\n            this._internalMsgMng.startSendEntityAndComps();\n            this._internalMsgMng.startSendRpc();\n            this._internalMsgMng.startSendRpcCallback();\n\n            this._serEntityAndComps();\n            const stateLen = stateBuf.writerCursor;\n            const rpcLen = rpcBuf.writerCursor;\n            const rpcCbLen = rpcCbBuf.writerCursor;\n\n            outBuf\n                .writeUlong(stateLen)\n                .writeUlong(rpcLen)\n                .writeUlong(rpcCbLen)\n                .append(stateBuf)\n                .append(rpcBuf)\n                .append(rpcCbBuf);\n\n            this._internalMsgMng.endSendEntityAndComps();\n            this._internalMsgMng.endSendRpc();\n            this._internalMsgMng.endSendRpcCallback();\n        } else {\n            this._internalMsgMng.startSendRpc();\n            this._internalMsgMng.startSendRpcCallback();\n\n            const rpcLen = rpcBuf.writerCursor;\n            const rpcCbLen = rpcCbBuf.writerCursor;\n\n            outBuf\n                .writeUlong(rpcLen)\n                .writeUlong(rpcCbLen)\n                .append(rpcBuf)\n                .append(rpcCbBuf);\n\n            this._internalMsgMng.endSendRpc();\n            this._internalMsgMng.endSendRpcCallback();\n        }\n\n        return outBuf.get();\n    }\n\n    setData(source: T) {\n        const inBuf = this._internalMsgMng.inoutbuffer;\n        const stateBuf = this._internalMsgMng.statebuffer;\n        const rpcBuf = this._internalMsgMng.rpcbuffer;\n        const rpcCbBuf = this._internalMsgMng.rpcCallbackBuffer;\n\n        inBuf.set(source);\n        const uuid = inBuf.readInt();\n        const isServer = inBuf.readBoolean();\n\n        if (isServer) {\n            const stateLen = inBuf.readUlong();\n            const rpcLen = inBuf.readUlong();\n            const rpcCbLen = inBuf.readUlong();\n\n            const stateStart = inBuf.readerCursor;\n            const stateEnd = stateStart + stateLen;\n\n            const rpcStart = stateEnd;\n            const rpcEnd = rpcStart + rpcLen;\n\n            const rpcCbStart = rpcEnd;\n            const rpcCbEnd = rpcCbStart + rpcCbLen;\n\n            stateBuf.set(source, stateStart, stateEnd);\n            rpcBuf.set(source, rpcStart, rpcEnd);\n            rpcCbBuf.set(source, rpcCbStart, rpcCbEnd);\n\n            this._internalMsgMng.startRecvEntityAndComps();\n            this._derEntityAndComps();\n            this._internalMsgMng.endRecvEntityAndComps();\n\n            this._internalMsgMng.startRecvRpc();\n            this._deserRpcs();\n            this._internalMsgMng.endRecvRpc();\n\n            this._internalMsgMng.startRecvRpcCallback();\n            this._deserRpcCallbacks();\n            this._internalMsgMng.endRecvRpcCallback();\n        } else {\n            const rpcLen = inBuf.readUlong();\n            const rpcCbLen = inBuf.readUlong();\n\n            const rpcStart = inBuf.readerCursor;\n            const rpcEnd = rpcStart + rpcLen;\n\n            const rpcCbStart = rpcEnd;\n            const rpcCbEnd = rpcCbStart + rpcCbLen;\n\n            rpcBuf.set(source, rpcStart, rpcEnd);\n            rpcCbBuf.set(source, rpcCbStart, rpcCbEnd);\n\n            this._internalMsgMng.startRecvRpc();\n            this._deserRpcs();\n            this._internalMsgMng.endRecvRpc();\n\n            this._internalMsgMng.startRecvRpcCallback();\n            this._deserRpcCallbacks();\n            this._internalMsgMng.endRecvRpcCallback();\n        }\n    }\n\n    update(dtSec: number) {\n        this._fixedSecAccumulator += dtSec;\n        const fixedDeltaTime = this.logicTime.delta;\n        while (this._fixedSecAccumulator > fixedDeltaTime) {\n            this._fixedSecAccumulator -= fixedDeltaTime;\n            this.logicTime.duration += fixedDeltaTime;\n            for (let i = 0, len = this._entitiesLength; i < len; i++) {\n                const ent = this._entities[i];\n                if (!ent) continue;\n                if (\n                    ent.role.local === Role.AUTHORITY ||\n                    ent.role.local === Role.AUTONMOUS_PROXY\n                ) {\n                    ent[\"_logicUpdate\"]();\n                }\n            }\n        }\n\n        this.renderTime.delta = dtSec;\n        this.renderTime.duration += dtSec;\n        for (let i = 0, len = this._entitiesLength; i < len; i++) {\n            const ent = this._entities[i];\n            if (!ent) continue;\n            ent[\"_renderUpdate\"]();\n        }\n    }\n\n    //#endregion\n\n    //#region protected methods\n    protected _reg(entity: Entity, id: number, version: number) {\n        entity[\"_id\"] = id;\n        entity[\"_version\"] = version;\n        entity[\"_domain\"] = this;\n        const index = entity.id;\n        this._entities[index] = entity;\n        if (index >= this._entitiesLength) {\n            this._entitiesLength = index + 1;\n        }\n    }\n\n    protected _unreg(entity: Entity) {\n        entity[\"_id\"] = NULL_NUM;\n        entity[\"_version\"] = NULL_NUM;\n        entity[\"_domain\"] = undefined;\n    }\n\n    protected _serEntityAndComps() {\n        for (let i = 0, len = this._entitiesLength; i < len; i++) {\n            const ent = this._entities[i];\n            if (!ent) {\n                this._internalMsgMng.sendEntity(\n                    i,\n                    this._entityVersion[i],\n                    0,\n                    true\n                );\n                continue;\n            }\n            this._internalMsgMng.sendEntity(\n                ent.id,\n                ent.version,\n                ent.comps.length,\n                false\n            );\n            const comps = ent.comps;\n            for (\n                let compIdx = 0, len = comps.length;\n                compIdx < len;\n                compIdx++\n            ) {\n                const comp = comps[compIdx] as ISchema & IComp;\n                const serableComp = asSerable(comp);\n                if (!serableComp) {\n                    console.warn(\n                        `[Domain#_ser(compIdx: ${compIdx}, entity: ${ent})]comp is not Serable!`\n                    );\n                    continue;\n                }\n                this._internalMsgMng.sendComp(compIdx, serableComp);\n            }\n            ent.role.ser(this._internalMsgMng.statebuffer);\n        }\n    }\n\n    protected _derEntityAndComps() {\n        let params: MessageEntityInfo | null;\n        while ((params = this._internalMsgMng.recvEntity())) {\n            let ent = this._entities[params.entityId];\n            if (\n                ent &&\n                (ent.version != params.entityVersion || params.destoryed)\n            ) {\n                this.unreg(ent);\n                ent = null;\n            }\n            if (!params.destoryed) {\n                ent = ent\n                    ? this._derEntityAndCompsUnderExisted(params, ent)\n                    : this._derEntityAndCompsUnderUnExsited(params);\n            }\n        }\n    }\n\n    protected _derEntityAndCompsUnderExisted(\n        params: MessageEntityInfo,\n        entity: Entity\n    ) {\n        const entComps = entity.comps;\n        assert(params.compCount == entComps.length, DomainCompCountNotMatch);\n        for (let i = 0, len = params.compCount; i < len; i++) {\n            const compHeaderInfo = this._internalMsgMng.recvCompHeader();\n            const comp = asSerable(entComps[compHeaderInfo.compIdx]);\n            if (!comp) continue;\n            this._internalMsgMng.recvCompBody(comp);\n        }\n        entity.role.deser(this._internalMsgMng.statebuffer);\n        return entity;\n    }\n\n    protected _derEntityAndCompsUnderUnExsited(params: MessageEntityInfo) {\n        const compArr = new Array<IComp>(params.compCount);\n        for (let i = 0, len = params.compCount; i < len; i++) {\n            const compHeaderInfo = this._internalMsgMng.recvCompHeader();\n            const compName = hash2compName[compHeaderInfo.hash];\n            const CompCtr = compName2ctr[compName];\n            const comp = new CompCtr();\n            this._internalMsgMng.recvCompBody(comp);\n            compArr[compHeaderInfo.compIdx] = comp;\n        }\n        const e = new Entity(...compArr);\n        e.role.deser(this._internalMsgMng.statebuffer);\n        this.reg(e);\n        return e;\n    }\n\n    protected _deserRpcs() {\n        let param: MessageRpcInfo | null;\n        while ((param = this._internalMsgMng.recvRpc())) {\n            const ent = this.get(param.entityId);\n            if (!ent) continue;\n            const comp = ent.comps[param.compIdx] as IComp &\n                ISchema &\n                Record<string, Function>;\n            if (!comp) continue;\n            const argus = comp[\"deser\" + param.methodHash](\n                this._internalMsgMng.rpcbuffer\n            );\n            const methodName = hash2RpcName[param.methodHash];\n            const unknown = comp[methodName].apply(comp, argus);\n\n            const s = comp[SCHEME_KEY];\n            const ms = s.methods[methodName];\n            if (ms.returnType != DataTypeVoid) {\n                const w = param!;\n                unknown?.then((result: any) => {\n                    this._internalMsgMng.sendRpcCallback(w);\n                    serValue(\n                        ms.returnType,\n                        result,\n                        this._internalMsgMng.rpcCallbackBuffer\n                    );\n                });\n            }\n        }\n    }\n\n    protected _deserRpcCallbacks() {\n        let param: MessageRpcCallbackInfo | null;\n        while ((param = this._internalMsgMng.recvRpcCallback())) {\n            const ent = this.get(param.entityId);\n            if (!ent) continue;\n            const comp = ent.comps[param.compIdx] as IComp &\n                ISchema &\n                Record<string, Function>;\n            if (!comp) continue;\n            const s = comp[SCHEME_KEY];\n            const methodName = hash2RpcName[param.methodHash];\n            const ms = s.methods[methodName];\n            let result: any;\n            if (ms.returnType != DataTypeVoid) {\n                result = deserValue(\n                    ms.returnType,\n                    this._internalMsgMng.rpcCallbackBuffer,\n                    undefined,\n                    ms.returnRefCtr\n                );\n            }\n            const callbackRecord =\n                this._internalMsgMng.getRpcCallbackRecord(param);\n            if (!callbackRecord) continue;\n            callbackRecord.deferred.resolve(result);\n        }\n    }\n\n    protected _getEntityId() {\n        return this._destroyEntityId.length > 0\n            ? this._destroyEntityId.unshift()\n            : this._entityIdCursor++;\n    }\n    //#endregion\n}\n","import { Deferred } from \"../src\";\n\nexport interface Receiver {\n    receive(data: any): void;\n}\n\nexport class MockTcp<T> {\n    private _arr: Deferred<T>[] = [];\n    receiver?: Receiver;\n    constructor() {}\n\n    send(defer: Deferred<T>) {\n        this._arr.push(defer);\n    }\n\n    update() {\n        let defer: Deferred<T>;\n        while (this._arr.length >= 1 && (defer = this._arr[0]).isFulfilled()) {\n            this.receiver?.receive(defer.value);\n            this._arr.shift();\n        }\n    }\n}\n\nexport class Net {\n    static delay = 0;\n    static jitter = 0;\n\n    private static _serverTcp = new MockTcp<string | ArrayBuffer>();\n    private static _client1Tcp = new MockTcp<string | ArrayBuffer>();\n    private static _client2Tcp = new MockTcp<string | ArrayBuffer>();\n    static set server(value: Receiver) {\n        this._serverTcp.receiver = value;\n    }\n    static set client1(value: Receiver) {\n        this._client1Tcp.receiver = value;\n    }\n    static set client2(value: Receiver) {\n        this._client2Tcp.receiver = value;\n    }\n\n    static clone(src: string | ArrayBuffer) {\n        return src;\n    }\n\n    static send<T extends string | ArrayBuffer>(obj: T) {\n        return {\n            server: () => {\n                const defer = new Deferred<string | ArrayBuffer>();\n                setTimeout(\n                    () => defer.resolve(this.clone(obj)),\n                    this.delay + Math.random() * this.jitter\n                );\n                this._serverTcp.send(defer);\n            },\n            c1: () => {\n                const defer = new Deferred<string | ArrayBuffer>();\n                setTimeout(\n                    () => defer.resolve(this.clone(obj)),\n                    this.delay + Math.random() * this.jitter\n                );\n                this._client1Tcp.send(defer);\n            },\n            c2: () => {\n                const defer = new Deferred<string | ArrayBuffer>();\n                setTimeout(\n                    () => defer.resolve(this.clone(obj)),\n                    this.delay + Math.random() * this.jitter\n                );\n                this._client2Tcp.send(defer);\n            },\n        };\n    }\n\n    static startUpdate() {\n        setTimeout(() => this.startUpdate());\n        this._serverTcp.update();\n        this._client1Tcp.update();\n        this._client2Tcp.update();\n    }\n}\n","import {\n    DataType,\n    IComp,\n    NetSerable,\n    NetVar,\n    Role,\n    Rpc,\n    RpcType,\n    RpcVar,\n} from \"../src\";\n\n@NetSerable(\"vec\")\nexport class Vector {\n    @NetVar(DataType.INT)\n    x: number = 0;\n    @NetVar(DataType.INT)\n    y: number = 0;\n}\n\n@NetSerable(\"trans\")\nexport class Transform extends IComp {\n    @NetVar(Vector)\n    pos = new Vector();\n\n    @Rpc(Role.AUTHORITY)\n    serverMove(\n        @RpcVar(DataType.FLOAT) x: number,\n        @RpcVar(DataType.FLOAT) y: number\n    ) {\n        if (x != 0 || y != 0) {\n            console.log(`${x} : ${y}`);\n        }\n        this.pos.x += x;\n        this.pos.y += y;\n    }\n}\n\n@NetSerable(\"view\")\nexport class View extends IComp {\n    @NetVar(DataType.INT)\n    color = 0xffffff;\n\n    @Rpc(Role.AUTHORITY)\n    changeColor(@RpcVar(DataType.INT) inColor: number) {\n        this.color = inColor;\n    }\n\n    private _ctx?: CanvasRenderingContext2D;\n\n    bindCanvas(ctx: CanvasRenderingContext2D) {\n        this._ctx = ctx;\n    }\n\n    renderUpdate() {\n        const trs = this.get(Transform);\n        const view = this.get(View);\n        if (!this._ctx || !trs || !view) return;\n        this.drawBall(this._ctx, trs.pos, \"#\" + view.color.toString(16));\n    }\n\n    protected drawBall(\n        ctx: CanvasRenderingContext2D,\n        pos: Vector,\n        color: string\n    ) {\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.arc(pos.x, pos.y, 26, 0, 2 * Math.PI);\n        ctx.fill();\n    }\n}\n\nexport interface ControlKeyboarnMap {\n    left: string;\n    right: string;\n}\n\nexport interface UserInput {\n    isLeft: boolean;\n    isRight: boolean;\n}\n\n@NetSerable(\"controller\")\nexport class Controller extends IComp {\n    private _input: UserInput = { isLeft: false, isRight: false };\n    private _onKeyDownDel: any;\n    private _onKeyUpDel: any;\n    private _enable = false;\n    controlMap!: ControlKeyboarnMap;\n    getEnable() {\n        return this._enable;\n    }\n\n    setEnable(value: false): void;\n    setEnable(value: true, controlMap: ControlKeyboarnMap): void;\n    setEnable(value: boolean, controlMap?: ControlKeyboarnMap): void {\n        if (this._enable == value) return;\n        this.controlMap = controlMap!;\n        if (value) {\n            window.addEventListener(\"keydown\", this._onKeyDownDel);\n            window.addEventListener(\"keyup\", this._onKeyUpDel);\n        } else {\n            window.removeEventListener(\"keydown\", this._onKeyDownDel);\n            window.removeEventListener(\"keyup\", this._onKeyUpDel);\n        }\n        this._enable = value;\n    }\n\n    constructor() {\n        super();\n        this._onKeyDownDel = this.onKeyDown.bind(this);\n        this._onKeyUpDel = this.onKeyUp.bind(this);\n    }\n\n    onKeyDown(ev: KeyboardEvent) {\n        const map = this.controlMap;\n        if (ev.key === map.left) {\n            this._input.isLeft = true;\n        } else if (ev.key === map.right) {\n            this._input.isRight = true;\n        }\n    }\n\n    onKeyUp(ev: KeyboardEvent) {\n        const map = this.controlMap;\n        if (ev.key === map.left) {\n            this._input.isLeft = false;\n        } else if (ev.key === map.right) {\n            this._input.isRight = false;\n        }\n    }\n\n    renderUpdate() {\n        if (!this._enable) return;\n        const input = this._input;\n        const trans = this.get(Transform)!;\n        const dirX = (input.isLeft ? -1 : 0) + (input.isRight ? 1 : 0);\n        trans.serverMove(dirX * this.domain.renderTime.delta * 100, 0);\n    }\n}\n","import { Domain, Entity, Rpc, RpcType, StringDataBuffer } from \"../src\";\nimport { Net } from \"./mock-net\";\nimport { Controller, Transform, Vector, View } from \"./net-comp\";\nexport * from \"./net-comp\";\nexport * from \"./mock-net\";\n\nconst COLOR_YELLOW = 0xf7d94c;\nconst COLOR_WHITE = 0xf8c3cd;\nconst CONTROLLER_MAP = {\n    1: { left: \"a\", right: \"d\" },\n    2: { left: \"ArrowLeft\", right: \"ArrowRight\" },\n} as any;\nexport abstract class Base {\n    readonly domain: Domain;\n    protected ctx: CanvasRenderingContext2D;\n    bg = \"#947A6D\";\n    myLoop: FrameRequestCallback;\n\n    isPrediction = false;\n    isInterpolation = false;\n    isRollback = false;\n\n    lastTimeStamp = 0;\n    actorArr: Entity[] = [];\n\n    constructor(\n        name: string,\n        readonly canvas: HTMLCanvasElement,\n        rpcType: RpcType\n    ) {\n        this.domain = Domain.Create(name, {\n            dataBufCtr: StringDataBuffer,\n            type: rpcType,\n        });\n        this.ctx = canvas.getContext(\"2d\")!;\n        this.canvas.width = 950;\n        this.canvas.height = 70;\n        this.ctx.fillStyle = this.bg;\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        this.myLoop = this.loop.bind(this);\n        this.initScene();\n        this.loop(0);\n    }\n\n    loop(timestamp: number) {\n        const dt = this.lastTimeStamp == 0 ? 0 : timestamp - this.lastTimeStamp;\n        this.lastTimeStamp = timestamp;\n        this.renderBg();\n        this.domain.update(dt / 1000);\n    }\n\n    initScene() {\n        const v1 = new View();\n        v1.bindCanvas(this.ctx);\n        const t1 = new Transform();\n        t1.pos.x = 30;\n        t1.pos.y = 35;\n        const c1 = new Entity(v1, t1, new Controller());\n\n        const v2 = new View();\n        v2.bindCanvas(this.ctx);\n        const t2 = new Transform();\n        t2.pos.x = 50;\n        t2.pos.y = 35;\n        const c2 = new Entity(v2, t2, new Controller());\n\n        this.domain.reg(c1);\n        this.domain.reg(c2);\n\n        v1.changeColor(COLOR_YELLOW);\n        v2.changeColor(COLOR_WHITE);\n\n        this.actorArr.push(c1, c2);\n    }\n\n    renderBg() {\n        this.canvas.width = this.canvas.width;\n        const ctx = this.ctx;\n\n        ctx.fillStyle = this.bg;\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    receive(data: any) {\n        if (this.isPrediction) return;\n        this.domain.setData(data);\n    }\n}\n\nexport class Server extends Base {\n    sendAccumulator = 0;\n    constructor(readonly canvas: HTMLCanvasElement) {\n        super(\"server\", canvas, RpcType.SERVER);\n    }\n\n    loop(dt: number) {\n        super.loop(dt);\n        this.sendAccumulator += this.domain.renderTime.delta;\n        if (this.sendAccumulator >= 1 / 20) {\n            const outData = this.domain.asData();\n            Net.send(outData).c1();\n            Net.send(outData).c2();\n            this.sendAccumulator = 0;\n        }\n    }\n}\n\nexport class Client extends Base {\n    constructor(readonly index: number, readonly canvas: HTMLCanvasElement) {\n        super(\"client\" + index, canvas, RpcType.CLIENT);\n        this.actorArr[index - 1]\n            .get(Controller)\n            ?.setEnable(true, CONTROLLER_MAP[index]);\n    }\n\n    loop(dt: number) {\n        super.loop(dt);\n        const outData = this.domain.asData();\n        Net.send(outData).server();\n    }\n}\n"],"names":["RpcType","Role","DataType","Object","IComp","this","_entity","domain","$comps","ctr","get","NULL_NUM","DataTypeObect","genMethodSchema","o","create","hash","name","paramCount","paramTypes","returnType","type","SCHEME_KEY","getOrCreateScheme","prototype","hasOwnProperty","s","count","props","methods","raw","superSchema","getPrototypeOf","push","apply","source","_name2indexRecord","_values","length","i","len","_a","key","value","ArrayMap","idx","getIndex","index","Array","from","asSerable","obj","ser","deser","state","fate","promise","Promise","resolve","reject","_this","_resolve","_reject","then","res","_value","Deferred","reason","factory","CRC32","version","T","c","table","n","Int32Array","signed_crc_table","bstr","seed","C","L","charCodeAt","buf","crc32_buf_8","str","d","DO_NOT_EXPORT_CRC","exports","Config","eval","Function","hash2compName","compName2ctr","hash2RpcName","serValue","buffer","INT","I32","writeInt","FLOAT","F32","writeFloat","DOUBLE","F64","writeDouble","BOOL","writeBoolean","genSerValueJit","valueStr","bufferStr","genForeachSerValueJit","to","arrStr","outStr","deserValue","ref","refCtr","readInt","readFloat","readDouble","readBoolean","genForeachDeserValueJit","recevierStr","genDeserValueJit","fixupSerable","schema","prop","propertyKey","container","dataType","i_1","j","arr","i_2","fixedupSerableState","rpcNames","keys","name_1","ms","args","len_1","len_2","privateName","_i","entity","role","local","readonlyInternalMsgMng","sendRpc","logicTime","duration","fixedupSerableRpc","fixupSerableJIT","serJitStr","itemSerFuncStr","deserJitStr","fixedupSerableStateJit","name_2","jitStr","fixedupSerableRpcJit","__extends","Error","sortComponentPropertyKey","a","b","akey","bkey","WhyPropertyKeyHasTheSameError","NetSerable","genSerable","target","sort","paramIndex","v","NetVar","t","String","undefined","Rpc","Crc32PropertyKeyHashConflict","returnRefCtr","console","warn","RpcVar","parameterIndex","ADirty","old","dirty","_super","Int","inValue","getsetDirty","__decorate","Float","Long","writeLong","readLong","LONG","Uint","writeUint","readUint","uint","Double","Ulong","writeUlong","readUlong","ulong","Short","writeShort","readShort","SHORT","Ushort","writeUshort","readUshort","ushort","MessageType","LogicTimeComp","$delta","RenderTimeComp","AUTHORITY","SIMULATED_PROXY","RoleComp","$local","$remote","remote","AUTONMOUS_PROXY","option","SERVER","_comps","Proxy","p","receiver","_compMap","Map","_initComp","Entity","_id","_version","_domain","map","__schema__","ComponentHasNotDecorated","has","set","error","insOrArr","isArray","ins","indexOf","init","renderUpdate","logicUpdate","destroy","clear","REG_ENTITY","UNREG_ENTITY","BufferCtr","inoutbuffer","statebuffer","rpcbuffer","rpcCallbackBuffer","MessageManager","_uuid","reset","entityId","entityVersion","compsLen","toDestroy","num","compIdx","comp","hasNext","destoryed","compCount","methodName","component","params","timestamp","uuid","_getUuid","RpcCallbackUuidOutOfRange","id","deferred","_rpcDeferred","methodHash","info","param","tempTypedBuffer","int","Uint32Array","short","Int16Array","Uint16Array","long","float","Float32Array","double","Float64Array","StringDataBuffer","increment","writerCursor","readBuffer","readerEnd","StringDataBufferOutOfRange","writeBuffer","readerCursor","check","temp","Boolean","start","end","dst","JSON","parse","dstChecked","readerStart","stringify","other","requiredOption","dataBufCtr","capacity","autoResize","fixedTimeSec","HandleDomainDefautlValue","_option","_entities","_entityVersion","fill","_destroyEntityId","_internalMsgMng","renderTime","time","delta","reg","Domain","_name2domainMap","DomainDuplicated","news","domainIndex","_index","values","isValid","_entitiesLength","EntityRepeatRegisteredError","toString","_entityIdCursor","EntityGroupOutOfRangeYouCanOpenAutoResize","resize","Math","ceil","_getEntityId","_reg","_unreg","EntityNotValidError","unregWithoutValidation","newSize","oldSize","isServer","outBuf","stateBuf","rpcBuf","rpcCbBuf","startSendEntityAndComps","startSendRpc","startSendRpcCallback","_serEntityAndComps","stateLen","rpcLen","rpcCbLen","append","endSendEntityAndComps","endSendRpc","endSendRpcCallback","inBuf","stateStart","stateEnd","rpcCbEnd","rpcCbStart","rpcEnd","rpcStart","startRecvEntityAndComps","_derEntityAndComps","endRecvEntityAndComps","startRecvRpc","_deserRpcs","endRecvRpc","startRecvRpcCallback","_deserRpcCallbacks","endRecvRpcCallback","dtSec","_fixedSecAccumulator","fixedDeltaTime","ent","sendEntity","comps","serableComp","sendComp","recvEntity","unreg","_derEntityAndCompsUnderExisted","_derEntityAndCompsUnderUnExsited","entComps","errrorClass","assert","DomainCompCountNotMatch","recvCompHeader","recvCompBody","compArr","compHeaderInfo","compName","CompCtr","e","this_1","argus","unknown","w_1","result","sendRpcCallback","recvRpc","recvRpcCallback","callbackRecord","getRpcCallbackRecord","unshift","MockTcp","defer","_arr","isFulfilled","receive","shift","Net","_serverTcp","_client1Tcp","_client2Tcp","src","server","setTimeout","clone","delay","random","jitter","send","c1","c2","startUpdate","update","Vector","Transform","x","y","log","pos","__param","View","inColor","color","ctx","_ctx","trs","view","View_1","drawBall","fillStyle","beginPath","arc","PI","isLeft","isRight","_onKeyDownDel","onKeyDown","bind","_onKeyUpDel","onKeyUp","Controller","_enable","controlMap","window","addEventListener","removeEventListener","ev","left","_input","right","input","trans","dirX","serverMove","CONTROLLER_MAP","canvas","rpcType","Create","getContext","width","height","bg","fillRect","myLoop","loop","initScene","Base","dt","lastTimeStamp","renderBg","v1","bindCanvas","t1","v2","t2","changeColor","actorArr","data","isPrediction","setData","Server","sendAccumulator","outData","asData","CLIENT","setEnable","Client"],"mappings":"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"}